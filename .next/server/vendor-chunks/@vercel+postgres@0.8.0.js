"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel+postgres@0.8.0";
exports.ids = ["vendor-chunks/@vercel+postgres@0.8.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/fallback.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/fallback.js ***!
  \***************************************************************************************/
/***/ ((module) => {

eval("\r\n\r\n/**\r\n * Masks a buffer using the given mask.\r\n *\r\n * @param {Buffer} source The buffer to mask\r\n * @param {Buffer} mask The mask to use\r\n * @param {Buffer} output The buffer where to store the result\r\n * @param {Number} offset The offset at which to start writing\r\n * @param {Number} length The number of bytes to mask.\r\n * @public\r\n */\r\nconst mask = (source, mask, output, offset, length) => {\r\n  for (var i = 0; i < length; i++) {\r\n    output[offset + i] = source[i] ^ mask[i & 3];\r\n  }\r\n};\r\n\r\n/**\r\n * Unmasks a buffer using the given mask.\r\n *\r\n * @param {Buffer} buffer The buffer to unmask\r\n * @param {Buffer} mask The mask to use\r\n * @public\r\n */\r\nconst unmask = (buffer, mask) => {\r\n  // Required until https://github.com/nodejs/node/issues/9006 is resolved.\r\n  const length = buffer.length;\r\n  for (var i = 0; i < length; i++) {\r\n    buffer[i] ^= mask[i & 3];\r\n  }\r\n};\r\n\r\nmodule.exports = { mask, unmask };\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvYnVmZmVydXRpbC9mYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL2J1ZmZlcnV0aWwvZmFsbGJhY2suanM/ZjJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXHJcbiAqXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzb3VyY2UgVGhlIGJ1ZmZlciB0byBtYXNrXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gb3V0cHV0IFRoZSBidWZmZXIgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgd3JpdGluZ1xyXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgbWFzayA9IChzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpID0+IHtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICBvdXRwdXRbb2Zmc2V0ICsgaV0gPSBzb3VyY2VbaV0gXiBtYXNrW2kgJiAzXTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cclxuICpcclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgdW5tYXNrID0gKGJ1ZmZlciwgbWFzaykgPT4ge1xyXG4gIC8vIFJlcXVpcmVkIHVudGlsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvOTAwNiBpcyByZXNvbHZlZC5cclxuICBjb25zdCBsZW5ndGggPSBidWZmZXIubGVuZ3RoO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgIGJ1ZmZlcltpXSBePSBtYXNrW2kgJiAzXTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHsgbWFzaywgdW5tYXNrIH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/index.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\ntry {\r\n  module.exports = __webpack_require__(/*! node-gyp-build */ \"(rsc)/./node_modules/.pnpm/node_modules/node-gyp-build/index.js\")(__dirname);\r\n} catch (e) {\r\n  module.exports = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/fallback.js\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvYnVmZmVydXRpbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyx1RkFBZ0I7QUFDM0MsRUFBRTtBQUNGLEVBQUUsK0lBQXNDO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL2J1ZmZlcnV0aWwvaW5kZXguanM/YTRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG50cnkge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnbm9kZS1neXAtYnVpbGQnKShfX2Rpcm5hbWUpO1xyXG59IGNhdGNoIChlKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhbGxiYWNrJyk7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/fallback.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/fallback.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

eval("\r\n\r\n/**\r\n * Checks if a given buffer contains only correct UTF-8.\r\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\r\n * Markus Kuhn.\r\n *\r\n * @param {Buffer} buf The buffer to check\r\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\r\n * @public\r\n */\r\nfunction isValidUTF8(buf) {\r\n  const len = buf.length;\r\n  let i = 0;\r\n\r\n  while (i < len) {\r\n    if ((buf[i] & 0x80) === 0x00) {  // 0xxxxxxx\r\n      i++;\r\n    } else if ((buf[i] & 0xe0) === 0xc0) {  // 110xxxxx 10xxxxxx\r\n      if (\r\n        i + 1 === len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i] & 0xfe) === 0xc0  // overlong\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 2;\r\n    } else if ((buf[i] & 0xf0) === 0xe0) {  // 1110xxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 2 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||  // overlong\r\n        buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0  // surrogate (U+D800 - U+DFFF)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 3;\r\n    } else if ((buf[i] & 0xf8) === 0xf0) {  // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 3 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i + 3] & 0xc0) !== 0x80 ||\r\n        buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||  // overlong\r\n        buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4  // > U+10FFFF\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 4;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nmodule.exports = isValidUTF8;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvdXRmLTgtdmFsaWRhdGUvZmFsbGJhY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0EsTUFBTSxzQ0FBc0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxzQ0FBc0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sc0NBQXNDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL3V0Zi04LXZhbGlkYXRlL2ZhbGxiYWNrLmpzP2U4OWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGJ1ZmZlciBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTguXHJcbiAqIFBvcnRlZCBmcm9tIGh0dHBzOi8vd3d3LmNsLmNhbS5hYy51ay8lN0VtZ2syNS91Y3MvdXRmOF9jaGVjay5jIGJ5XHJcbiAqIE1hcmt1cyBLdWhuLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmIFRoZSBidWZmZXIgdG8gY2hlY2tcclxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGBidWZgIGNvbnRhaW5zIG9ubHkgY29ycmVjdCBVVEYtOCwgZWxzZSBgZmFsc2VgXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGlzVmFsaWRVVEY4KGJ1Zikge1xyXG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGg7XHJcbiAgbGV0IGkgPSAwO1xyXG5cclxuICB3aGlsZSAoaSA8IGxlbikge1xyXG4gICAgaWYgKChidWZbaV0gJiAweDgwKSA9PT0gMHgwMCkgeyAgLy8gMHh4eHh4eHhcclxuICAgICAgaSsrO1xyXG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhlMCkgPT09IDB4YzApIHsgIC8vIDExMHh4eHh4IDEweHh4eHh4XHJcbiAgICAgIGlmIChcclxuICAgICAgICBpICsgMSA9PT0gbGVuIHx8XHJcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxyXG4gICAgICAgIChidWZbaV0gJiAweGZlKSA9PT0gMHhjMCAgLy8gb3ZlcmxvbmdcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpICs9IDI7XHJcbiAgICB9IGVsc2UgaWYgKChidWZbaV0gJiAweGYwKSA9PT0gMHhlMCkgeyAgLy8gMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHhcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGkgKyAyID49IGxlbiB8fFxyXG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcclxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgYnVmW2ldID09PSAweGUwICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4ODAgfHwgIC8vIG92ZXJsb25nXHJcbiAgICAgICAgYnVmW2ldID09PSAweGVkICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4YTAgIC8vIHN1cnJvZ2F0ZSAoVStEODAwIC0gVStERkZGKVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGkgKz0gMztcclxuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjgpID09PSAweGYwKSB7ICAvLyAxMTExMHh4eCAxMHh4eHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgaSArIDMgPj0gbGVuIHx8XHJcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxyXG4gICAgICAgIChidWZbaSArIDJdICYgMHhjMCkgIT09IDB4ODAgfHxcclxuICAgICAgICAoYnVmW2kgKyAzXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgYnVmW2ldID09PSAweGYwICYmIChidWZbaSArIDFdICYgMHhmMCkgPT09IDB4ODAgfHwgIC8vIG92ZXJsb25nXHJcbiAgICAgICAgYnVmW2ldID09PSAweGY0ICYmIGJ1ZltpICsgMV0gPiAweDhmIHx8IGJ1ZltpXSA+IDB4ZjQgIC8vID4gVSsxMEZGRkZcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpICs9IDQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBpc1ZhbGlkVVRGODtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/index.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\ntry {\r\n  module.exports = __webpack_require__(/*! node-gyp-build */ \"(rsc)/./node_modules/.pnpm/node_modules/node-gyp-build/index.js\")(__dirname);\r\n} catch (e) {\r\n  module.exports = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/fallback.js\");\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvdXRmLTgtdmFsaWRhdGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMsdUZBQWdCO0FBQzNDLEVBQUU7QUFDRixFQUFFLG1KQUFzQztBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AdmVyY2VsK3Bvc3RncmVzQDAuOC4wL25vZGVfbW9kdWxlcy91dGYtOC12YWxpZGF0ZS9pbmRleC5qcz9jM2E5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnRyeSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdub2RlLWd5cC1idWlsZCcpKF9fZGlybmFtZSk7XHJcbn0gY2F0Y2ggKGUpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFsbGJhY2snKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\n\r\nconst FastBuffer = Buffer[Symbol.species];\r\n\r\n/**\r\n * Merges an array of buffers into a new buffer.\r\n *\r\n * @param {Buffer[]} list The array of buffers to concat\r\n * @param {Number} totalLength The total length of buffers in the list\r\n * @return {Buffer} The resulting buffer\r\n * @public\r\n */\r\nfunction concat(list, totalLength) {\r\n  if (list.length === 0) return EMPTY_BUFFER;\r\n  if (list.length === 1) return list[0];\r\n\r\n  const target = Buffer.allocUnsafe(totalLength);\r\n  let offset = 0;\r\n\r\n  for (let i = 0; i < list.length; i++) {\r\n    const buf = list[i];\r\n    target.set(buf, offset);\r\n    offset += buf.length;\r\n  }\r\n\r\n  if (offset < totalLength) {\r\n    return new FastBuffer(target.buffer, target.byteOffset, offset);\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Masks a buffer using the given mask.\r\n *\r\n * @param {Buffer} source The buffer to mask\r\n * @param {Buffer} mask The mask to use\r\n * @param {Buffer} output The buffer where to store the result\r\n * @param {Number} offset The offset at which to start writing\r\n * @param {Number} length The number of bytes to mask.\r\n * @public\r\n */\r\nfunction _mask(source, mask, output, offset, length) {\r\n  for (let i = 0; i < length; i++) {\r\n    output[offset + i] = source[i] ^ mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Unmasks a buffer using the given mask.\r\n *\r\n * @param {Buffer} buffer The buffer to unmask\r\n * @param {Buffer} mask The mask to use\r\n * @public\r\n */\r\nfunction _unmask(buffer, mask) {\r\n  for (let i = 0; i < buffer.length; i++) {\r\n    buffer[i] ^= mask[i & 3];\r\n  }\r\n}\r\n\r\n/**\r\n * Converts a buffer to an `ArrayBuffer`.\r\n *\r\n * @param {Buffer} buf The buffer to convert\r\n * @return {ArrayBuffer} Converted buffer\r\n * @public\r\n */\r\nfunction toArrayBuffer(buf) {\r\n  if (buf.length === buf.buffer.byteLength) {\r\n    return buf.buffer;\r\n  }\r\n\r\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\r\n}\r\n\r\n/**\r\n * Converts `data` to a `Buffer`.\r\n *\r\n * @param {*} data The data to convert\r\n * @return {Buffer} The buffer\r\n * @throws {TypeError}\r\n * @public\r\n */\r\nfunction toBuffer(data) {\r\n  toBuffer.readOnly = true;\r\n\r\n  if (Buffer.isBuffer(data)) return data;\r\n\r\n  let buf;\r\n\r\n  if (data instanceof ArrayBuffer) {\r\n    buf = new FastBuffer(data);\r\n  } else if (ArrayBuffer.isView(data)) {\r\n    buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\r\n  } else {\r\n    buf = Buffer.from(data);\r\n    toBuffer.readOnly = false;\r\n  }\r\n\r\n  return buf;\r\n}\r\n\r\nmodule.exports = {\r\n  concat,\r\n  mask: _mask,\r\n  toArrayBuffer,\r\n  toBuffer,\r\n  unmask: _unmask\r\n};\r\n\r\n/* istanbul ignore else  */\r\nif (!process.env.WS_NO_BUFFER_UTIL) {\r\n  try {\r\n    const bufferUtil = __webpack_require__(/*! bufferutil */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/bufferutil/index.js\");\r\n\r\n    module.exports.mask = function (source, mask, output, offset, length) {\r\n      if (length < 48) _mask(source, mask, output, offset, length);\r\n      else bufferUtil.mask(source, mask, output, offset, length);\r\n    };\r\n\r\n    module.exports.unmask = function (buffer, mask) {\r\n      if (buffer.length < 32) _unmask(buffer, mask);\r\n      else bufferUtil.unmask(buffer, mask);\r\n    };\r\n  } catch (e) {\r\n    // Continue regardless of the error.\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxRQUFRLGVBQWUsRUFBRSxtQkFBTyxDQUFDLHVHQUFhO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZLFFBQVE7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFPLENBQUMsc0dBQVk7QUFDM0M7QUFDQSxJQUFJLG1CQUFtQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkscUJBQXFCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzP2U0ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgeyBFTVBUWV9CVUZGRVIgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XHJcblxyXG5jb25zdCBGYXN0QnVmZmVyID0gQnVmZmVyW1N5bWJvbC5zcGVjaWVzXTtcclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgYW4gYXJyYXkgb2YgYnVmZmVycyBpbnRvIGEgbmV3IGJ1ZmZlci5cclxuICpcclxuICogQHBhcmFtIHtCdWZmZXJbXX0gbGlzdCBUaGUgYXJyYXkgb2YgYnVmZmVycyB0byBjb25jYXRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsTGVuZ3RoIFRoZSB0b3RhbCBsZW5ndGggb2YgYnVmZmVycyBpbiB0aGUgbGlzdFxyXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSByZXN1bHRpbmcgYnVmZmVyXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGNvbmNhdChsaXN0LCB0b3RhbExlbmd0aCkge1xyXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIEVNUFRZX0JVRkZFUjtcclxuICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHJldHVybiBsaXN0WzBdO1xyXG5cclxuICBjb25zdCB0YXJnZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUodG90YWxMZW5ndGgpO1xyXG4gIGxldCBvZmZzZXQgPSAwO1xyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGJ1ZiA9IGxpc3RbaV07XHJcbiAgICB0YXJnZXQuc2V0KGJ1Ziwgb2Zmc2V0KTtcclxuICAgIG9mZnNldCArPSBidWYubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9mZnNldCA8IHRvdGFsTGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gbmV3IEZhc3RCdWZmZXIodGFyZ2V0LmJ1ZmZlciwgdGFyZ2V0LmJ5dGVPZmZzZXQsIG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWFza3MgYSBidWZmZXIgdXNpbmcgdGhlIGdpdmVuIG1hc2suXHJcbiAqXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBzb3VyY2UgVGhlIGJ1ZmZlciB0byBtYXNrXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gb3V0cHV0IFRoZSBidWZmZXIgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgd3JpdGluZ1xyXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gbWFzay5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gX21hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cclxuICpcclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIHVubWFza1xyXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gX3VubWFzayhidWZmZXIsIG1hc2spIHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xyXG4gICAgYnVmZmVyW2ldIF49IG1hc2tbaSAmIDNdO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGEgYnVmZmVyIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWYgVGhlIGJ1ZmZlciB0byBjb252ZXJ0XHJcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBDb252ZXJ0ZWQgYnVmZmVyXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmKSB7XHJcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IGJ1Zi5idWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGJ1Zi5idWZmZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYubGVuZ3RoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGBkYXRhYCB0byBhIGBCdWZmZXJgLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IGRhdGEgVGhlIGRhdGEgdG8gY29udmVydFxyXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IFRoZSBidWZmZXJcclxuICogQHRocm93cyB7VHlwZUVycm9yfVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0J1ZmZlcihkYXRhKSB7XHJcbiAgdG9CdWZmZXIucmVhZE9ubHkgPSB0cnVlO1xyXG5cclxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSByZXR1cm4gZGF0YTtcclxuXHJcbiAgbGV0IGJ1ZjtcclxuXHJcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgYnVmID0gbmV3IEZhc3RCdWZmZXIoZGF0YSk7XHJcbiAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcclxuICAgIGJ1ZiA9IG5ldyBGYXN0QnVmZmVyKGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xyXG4gICAgdG9CdWZmZXIucmVhZE9ubHkgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBidWY7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNvbmNhdCxcclxuICBtYXNrOiBfbWFzayxcclxuICB0b0FycmF5QnVmZmVyLFxyXG4gIHRvQnVmZmVyLFxyXG4gIHVubWFzazogX3VubWFza1xyXG59O1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXHJcbmlmICghcHJvY2Vzcy5lbnYuV1NfTk9fQlVGRkVSX1VUSUwpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJ2J1ZmZlcnV0aWwnKTtcclxuXHJcbiAgICBtb2R1bGUuZXhwb3J0cy5tYXNrID0gZnVuY3Rpb24gKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgICBpZiAobGVuZ3RoIDwgNDgpIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XHJcbiAgICAgIGVsc2UgYnVmZmVyVXRpbC5tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzLnVubWFzayA9IGZ1bmN0aW9uIChidWZmZXIsIG1hc2spIHtcclxuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAzMikgX3VubWFzayhidWZmZXIsIG1hc2spO1xyXG4gICAgICBlbHNlIGJ1ZmZlclV0aWwudW5tYXNrKGJ1ZmZlciwgbWFzayk7XHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vIENvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGVycm9yLlxyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("\r\n\r\nmodule.exports = {\r\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\r\n  EMPTY_BUFFER: Buffer.alloc(0),\r\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\r\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\r\n  kListener: Symbol('kListener'),\r\n  kStatusCode: Symbol('status-code'),\r\n  kWebSocket: Symbol('websocket'),\r\n  NOOP: () => {}\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcz9lODVhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIEJJTkFSWV9UWVBFUzogWydub2RlYnVmZmVyJywgJ2FycmF5YnVmZmVyJywgJ2ZyYWdtZW50cyddLFxyXG4gIEVNUFRZX0JVRkZFUjogQnVmZmVyLmFsbG9jKDApLFxyXG4gIEdVSUQ6ICcyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEnLFxyXG4gIGtGb3JPbkV2ZW50QXR0cmlidXRlOiBTeW1ib2woJ2tJc0Zvck9uRXZlbnRBdHRyaWJ1dGUnKSxcclxuICBrTGlzdGVuZXI6IFN5bWJvbCgna0xpc3RlbmVyJyksXHJcbiAga1N0YXR1c0NvZGU6IFN5bWJvbCgnc3RhdHVzLWNvZGUnKSxcclxuICBrV2ViU29ja2V0OiBTeW1ib2woJ3dlYnNvY2tldCcpLFxyXG4gIE5PT1A6ICgpID0+IHt9XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/event-target.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/event-target.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { kForOnEventAttribute, kListener } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\n\r\nconst kCode = Symbol('kCode');\r\nconst kData = Symbol('kData');\r\nconst kError = Symbol('kError');\r\nconst kMessage = Symbol('kMessage');\r\nconst kReason = Symbol('kReason');\r\nconst kTarget = Symbol('kTarget');\r\nconst kType = Symbol('kType');\r\nconst kWasClean = Symbol('kWasClean');\r\n\r\n/**\r\n * Class representing an event.\r\n */\r\nclass Event {\r\n  /**\r\n   * Create a new `Event`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @throws {TypeError} If the `type` argument is not specified\r\n   */\r\n  constructor(type) {\r\n    this[kTarget] = null;\r\n    this[kType] = type;\r\n  }\r\n\r\n  /**\r\n   * @type {*}\r\n   */\r\n  get target() {\r\n    return this[kTarget];\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get type() {\r\n    return this[kType];\r\n  }\r\n}\r\n\r\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\r\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\r\n\r\n/**\r\n * Class representing a close event.\r\n *\r\n * @extends Event\r\n */\r\nclass CloseEvent extends Event {\r\n  /**\r\n   * Create a new `CloseEvent`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} [options] A dictionary object that allows for setting\r\n   *     attributes via object members of the same name\r\n   * @param {Number} [options.code=0] The status code explaining why the\r\n   *     connection was closed\r\n   * @param {String} [options.reason=''] A human-readable string explaining why\r\n   *     the connection was closed\r\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\r\n   *     connection was cleanly closed\r\n   */\r\n  constructor(type, options = {}) {\r\n    super(type);\r\n\r\n    this[kCode] = options.code === undefined ? 0 : options.code;\r\n    this[kReason] = options.reason === undefined ? '' : options.reason;\r\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get code() {\r\n    return this[kCode];\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get reason() {\r\n    return this[kReason];\r\n  }\r\n\r\n  /**\r\n   * @type {Boolean}\r\n   */\r\n  get wasClean() {\r\n    return this[kWasClean];\r\n  }\r\n}\r\n\r\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\r\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\r\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\r\n\r\n/**\r\n * Class representing an error event.\r\n *\r\n * @extends Event\r\n */\r\nclass ErrorEvent extends Event {\r\n  /**\r\n   * Create a new `ErrorEvent`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} [options] A dictionary object that allows for setting\r\n   *     attributes via object members of the same name\r\n   * @param {*} [options.error=null] The error that generated this event\r\n   * @param {String} [options.message=''] The error message\r\n   */\r\n  constructor(type, options = {}) {\r\n    super(type);\r\n\r\n    this[kError] = options.error === undefined ? null : options.error;\r\n    this[kMessage] = options.message === undefined ? '' : options.message;\r\n  }\r\n\r\n  /**\r\n   * @type {*}\r\n   */\r\n  get error() {\r\n    return this[kError];\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get message() {\r\n    return this[kMessage];\r\n  }\r\n}\r\n\r\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\r\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\r\n\r\n/**\r\n * Class representing a message event.\r\n *\r\n * @extends Event\r\n */\r\nclass MessageEvent extends Event {\r\n  /**\r\n   * Create a new `MessageEvent`.\r\n   *\r\n   * @param {String} type The name of the event\r\n   * @param {Object} [options] A dictionary object that allows for setting\r\n   *     attributes via object members of the same name\r\n   * @param {*} [options.data=null] The message content\r\n   */\r\n  constructor(type, options = {}) {\r\n    super(type);\r\n\r\n    this[kData] = options.data === undefined ? null : options.data;\r\n  }\r\n\r\n  /**\r\n   * @type {*}\r\n   */\r\n  get data() {\r\n    return this[kData];\r\n  }\r\n}\r\n\r\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\r\n\r\n/**\r\n * This provides methods for emulating the `EventTarget` interface. It's not\r\n * meant to be used directly.\r\n *\r\n * @mixin\r\n */\r\nconst EventTarget = {\r\n  /**\r\n   * Register an event listener.\r\n   *\r\n   * @param {String} type A string representing the event type to listen for\r\n   * @param {(Function|Object)} handler The listener to add\r\n   * @param {Object} [options] An options object specifies characteristics about\r\n   *     the event listener\r\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\r\n   *     listener should be invoked at most once after being added. If `true`,\r\n   *     the listener would be automatically removed when invoked.\r\n   * @public\r\n   */\r\n  addEventListener(type, handler, options = {}) {\r\n    for (const listener of this.listeners(type)) {\r\n      if (\r\n        !options[kForOnEventAttribute] &&\r\n        listener[kListener] === handler &&\r\n        !listener[kForOnEventAttribute]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    let wrapper;\r\n\r\n    if (type === 'message') {\r\n      wrapper = function onMessage(data, isBinary) {\r\n        const event = new MessageEvent('message', {\r\n          data: isBinary ? data : data.toString()\r\n        });\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else if (type === 'close') {\r\n      wrapper = function onClose(code, message) {\r\n        const event = new CloseEvent('close', {\r\n          code,\r\n          reason: message.toString(),\r\n          wasClean: this._closeFrameReceived && this._closeFrameSent\r\n        });\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else if (type === 'error') {\r\n      wrapper = function onError(error) {\r\n        const event = new ErrorEvent('error', {\r\n          error,\r\n          message: error.message\r\n        });\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else if (type === 'open') {\r\n      wrapper = function onOpen() {\r\n        const event = new Event('open');\r\n\r\n        event[kTarget] = this;\r\n        callListener(handler, this, event);\r\n      };\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\r\n    wrapper[kListener] = handler;\r\n\r\n    if (options.once) {\r\n      this.once(type, wrapper);\r\n    } else {\r\n      this.on(type, wrapper);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Remove an event listener.\r\n   *\r\n   * @param {String} type A string representing the event type to remove\r\n   * @param {(Function|Object)} handler The listener to remove\r\n   * @public\r\n   */\r\n  removeEventListener(type, handler) {\r\n    for (const listener of this.listeners(type)) {\r\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\r\n        this.removeListener(type, listener);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  CloseEvent,\r\n  ErrorEvent,\r\n  Event,\r\n  EventTarget,\r\n  MessageEvent\r\n};\r\n\r\n/**\r\n * Call an event listener\r\n *\r\n * @param {(Function|Object)} listener The listener to call\r\n * @param {*} thisArg The value to use as `this`` when calling the listener\r\n * @param {Event} event The event to pass to the listener\r\n * @private\r\n */\r\nfunction callListener(listener, thisArg, event) {\r\n  if (typeof listener === 'object' && listener.handleEvent) {\r\n    listener.handleEvent.call(listener, event);\r\n  } else {\r\n    listener.call(thisArg, event);\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/extension.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/extension.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js\");\r\n\r\n/**\r\n * Adds an offer to the map of extension offers or a parameter to the map of\r\n * parameters.\r\n *\r\n * @param {Object} dest The map of extension offers or parameters\r\n * @param {String} name The extension or parameter name\r\n * @param {(Object|Boolean|String)} elem The extension parameters or the\r\n *     parameter value\r\n * @private\r\n */\r\nfunction push(dest, name, elem) {\r\n  if (dest[name] === undefined) dest[name] = [elem];\r\n  else dest[name].push(elem);\r\n}\r\n\r\n/**\r\n * Parses the `Sec-WebSocket-Extensions` header into an object.\r\n *\r\n * @param {String} header The field value of the header\r\n * @return {Object} The parsed object\r\n * @public\r\n */\r\nfunction parse(header) {\r\n  const offers = Object.create(null);\r\n  let params = Object.create(null);\r\n  let mustUnescape = false;\r\n  let isEscaping = false;\r\n  let inQuotes = false;\r\n  let extensionName;\r\n  let paramName;\r\n  let start = -1;\r\n  let code = -1;\r\n  let end = -1;\r\n  let i = 0;\r\n\r\n  for (; i < header.length; i++) {\r\n    code = header.charCodeAt(i);\r\n\r\n    if (extensionName === undefined) {\r\n      if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (\r\n        i !== 0 &&\r\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\r\n      ) {\r\n        if (end === -1 && start !== -1) end = i;\r\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        const name = header.slice(start, end);\r\n        if (code === 0x2c) {\r\n          push(offers, name, params);\r\n          params = Object.create(null);\r\n        } else {\r\n          extensionName = name;\r\n        }\r\n\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    } else if (paramName === undefined) {\r\n      if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (code === 0x20 || code === 0x09) {\r\n        if (end === -1 && start !== -1) end = i;\r\n      } else if (code === 0x3b || code === 0x2c) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        push(params, header.slice(start, end), true);\r\n        if (code === 0x2c) {\r\n          push(offers, extensionName, params);\r\n          params = Object.create(null);\r\n          extensionName = undefined;\r\n        }\r\n\r\n        start = end = -1;\r\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\r\n        paramName = header.slice(start, i);\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    } else {\r\n      //\r\n      // The value of a quoted-string after unescaping must conform to the\r\n      // token ABNF, so only token characters are valid.\r\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\r\n      //\r\n      if (isEscaping) {\r\n        if (tokenChars[code] !== 1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n        if (start === -1) start = i;\r\n        else if (!mustUnescape) mustUnescape = true;\r\n        isEscaping = false;\r\n      } else if (inQuotes) {\r\n        if (tokenChars[code] === 1) {\r\n          if (start === -1) start = i;\r\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\r\n          inQuotes = false;\r\n          end = i;\r\n        } else if (code === 0x5c /* '\\' */) {\r\n          isEscaping = true;\r\n        } else {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\r\n        inQuotes = true;\r\n      } else if (end === -1 && tokenChars[code] === 1) {\r\n        if (start === -1) start = i;\r\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\r\n        if (end === -1) end = i;\r\n      } else if (code === 0x3b || code === 0x2c) {\r\n        if (start === -1) {\r\n          throw new SyntaxError(`Unexpected character at index ${i}`);\r\n        }\r\n\r\n        if (end === -1) end = i;\r\n        let value = header.slice(start, end);\r\n        if (mustUnescape) {\r\n          value = value.replace(/\\\\/g, '');\r\n          mustUnescape = false;\r\n        }\r\n        push(params, paramName, value);\r\n        if (code === 0x2c) {\r\n          push(offers, extensionName, params);\r\n          params = Object.create(null);\r\n          extensionName = undefined;\r\n        }\r\n\r\n        paramName = undefined;\r\n        start = end = -1;\r\n      } else {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\r\n    throw new SyntaxError('Unexpected end of input');\r\n  }\r\n\r\n  if (end === -1) end = i;\r\n  const token = header.slice(start, end);\r\n  if (extensionName === undefined) {\r\n    push(offers, token, params);\r\n  } else {\r\n    if (paramName === undefined) {\r\n      push(params, token, true);\r\n    } else if (mustUnescape) {\r\n      push(params, paramName, token.replace(/\\\\/g, ''));\r\n    } else {\r\n      push(params, paramName, token);\r\n    }\r\n    push(offers, extensionName, params);\r\n  }\r\n\r\n  return offers;\r\n}\r\n\r\n/**\r\n * Builds the `Sec-WebSocket-Extensions` header field value.\r\n *\r\n * @param {Object} extensions The map of extensions and parameters to format\r\n * @return {String} A string representing the given object\r\n * @public\r\n */\r\nfunction format(extensions) {\r\n  return Object.keys(extensions)\r\n    .map((extension) => {\r\n      let configurations = extensions[extension];\r\n      if (!Array.isArray(configurations)) configurations = [configurations];\r\n      return configurations\r\n        .map((params) => {\r\n          return [extension]\r\n            .concat(\r\n              Object.keys(params).map((k) => {\r\n                let values = params[k];\r\n                if (!Array.isArray(values)) values = [values];\r\n                return values\r\n                  .map((v) => (v === true ? k : `${k}=${v}`))\r\n                  .join('; ');\r\n              })\r\n            )\r\n            .join('; ');\r\n        })\r\n        .join(', ');\r\n    })\r\n    .join(', ');\r\n}\r\n\r\nmodule.exports = { format, parse };\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/limiter.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/limiter.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("\r\n\r\nconst kDone = Symbol('kDone');\r\nconst kRun = Symbol('kRun');\r\n\r\n/**\r\n * A very simple job queue with adjustable concurrency. Adapted from\r\n * https://github.com/STRML/async-limiter\r\n */\r\nclass Limiter {\r\n  /**\r\n   * Creates a new `Limiter`.\r\n   *\r\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\r\n   *     to run concurrently\r\n   */\r\n  constructor(concurrency) {\r\n    this[kDone] = () => {\r\n      this.pending--;\r\n      this[kRun]();\r\n    };\r\n    this.concurrency = concurrency || Infinity;\r\n    this.jobs = [];\r\n    this.pending = 0;\r\n  }\r\n\r\n  /**\r\n   * Adds a job to the queue.\r\n   *\r\n   * @param {Function} job The job to run\r\n   * @public\r\n   */\r\n  add(job) {\r\n    this.jobs.push(job);\r\n    this[kRun]();\r\n  }\r\n\r\n  /**\r\n   * Removes a job from the queue and runs it if possible.\r\n   *\r\n   * @private\r\n   */\r\n  [kRun]() {\r\n    if (this.pending === this.concurrency) return;\r\n\r\n    if (this.jobs.length) {\r\n      const job = this.jobs.shift();\r\n\r\n      this.pending++;\r\n      job(this[kDone]);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Limiter;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL2xpbWl0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL3dzL2xpYi9saW1pdGVyLmpzPzMwNTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3Qga0RvbmUgPSBTeW1ib2woJ2tEb25lJyk7XHJcbmNvbnN0IGtSdW4gPSBTeW1ib2woJ2tSdW4nKTtcclxuXHJcbi8qKlxyXG4gKiBBIHZlcnkgc2ltcGxlIGpvYiBxdWV1ZSB3aXRoIGFkanVzdGFibGUgY29uY3VycmVuY3kuIEFkYXB0ZWQgZnJvbVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vU1RSTUwvYXN5bmMtbGltaXRlclxyXG4gKi9cclxuY2xhc3MgTGltaXRlciB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG5ldyBgTGltaXRlcmAuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmN1cnJlbmN5PUluZmluaXR5XSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygam9icyBhbGxvd2VkXHJcbiAgICogICAgIHRvIHJ1biBjb25jdXJyZW50bHlcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihjb25jdXJyZW5jeSkge1xyXG4gICAgdGhpc1trRG9uZV0gPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMucGVuZGluZy0tO1xyXG4gICAgICB0aGlzW2tSdW5dKCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jb25jdXJyZW5jeSA9IGNvbmN1cnJlbmN5IHx8IEluZmluaXR5O1xyXG4gICAgdGhpcy5qb2JzID0gW107XHJcbiAgICB0aGlzLnBlbmRpbmcgPSAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIGpvYiB0byB0aGUgcXVldWUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBqb2IgVGhlIGpvYiB0byBydW5cclxuICAgKiBAcHVibGljXHJcbiAgICovXHJcbiAgYWRkKGpvYikge1xyXG4gICAgdGhpcy5qb2JzLnB1c2goam9iKTtcclxuICAgIHRoaXNba1J1bl0oKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYSBqb2IgZnJvbSB0aGUgcXVldWUgYW5kIHJ1bnMgaXQgaWYgcG9zc2libGUuXHJcbiAgICpcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIFtrUnVuXSgpIHtcclxuICAgIGlmICh0aGlzLnBlbmRpbmcgPT09IHRoaXMuY29uY3VycmVuY3kpIHJldHVybjtcclxuXHJcbiAgICBpZiAodGhpcy5qb2JzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcclxuXHJcbiAgICAgIHRoaXMucGVuZGluZysrO1xyXG4gICAgICBqb2IodGhpc1trRG9uZV0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMaW1pdGVyO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\n\r\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js\");\r\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/limiter.js\");\r\nconst { kStatusCode } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\n\r\nconst FastBuffer = Buffer[Symbol.species];\r\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\r\nconst kPerMessageDeflate = Symbol('permessage-deflate');\r\nconst kTotalLength = Symbol('total-length');\r\nconst kCallback = Symbol('callback');\r\nconst kBuffers = Symbol('buffers');\r\nconst kError = Symbol('error');\r\n\r\n//\r\n// We limit zlib concurrency, which prevents severe memory fragmentation\r\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\r\n// and https://github.com/websockets/ws/issues/1202\r\n//\r\n// Intentionally global; it's the global thread pool that's an issue.\r\n//\r\nlet zlibLimiter;\r\n\r\n/**\r\n * permessage-deflate implementation.\r\n */\r\nclass PerMessageDeflate {\r\n  /**\r\n   * Creates a PerMessageDeflate instance.\r\n   *\r\n   * @param {Object} [options] Configuration options\r\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\r\n   *     for, or request, a custom client window size\r\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\r\n   *     acknowledge disabling of client context takeover\r\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\r\n   *     calls to zlib\r\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\r\n   *     use of a custom server window size\r\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\r\n   *     disabling of server context takeover\r\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\r\n   *     messages should not be compressed if context takeover is disabled\r\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\r\n   *     deflate\r\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\r\n   *     inflate\r\n   * @param {Boolean} [isServer=false] Create the instance in either server or\r\n   *     client mode\r\n   * @param {Number} [maxPayload=0] The maximum allowed message length\r\n   */\r\n  constructor(options, isServer, maxPayload) {\r\n    this._maxPayload = maxPayload | 0;\r\n    this._options = options || {};\r\n    this._threshold =\r\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\r\n    this._isServer = !!isServer;\r\n    this._deflate = null;\r\n    this._inflate = null;\r\n\r\n    this.params = null;\r\n\r\n    if (!zlibLimiter) {\r\n      const concurrency =\r\n        this._options.concurrencyLimit !== undefined\r\n          ? this._options.concurrencyLimit\r\n          : 10;\r\n      zlibLimiter = new Limiter(concurrency);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  static get extensionName() {\r\n    return 'permessage-deflate';\r\n  }\r\n\r\n  /**\r\n   * Create an extension negotiation offer.\r\n   *\r\n   * @return {Object} Extension parameters\r\n   * @public\r\n   */\r\n  offer() {\r\n    const params = {};\r\n\r\n    if (this._options.serverNoContextTakeover) {\r\n      params.server_no_context_takeover = true;\r\n    }\r\n    if (this._options.clientNoContextTakeover) {\r\n      params.client_no_context_takeover = true;\r\n    }\r\n    if (this._options.serverMaxWindowBits) {\r\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\r\n    }\r\n    if (this._options.clientMaxWindowBits) {\r\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\r\n    } else if (this._options.clientMaxWindowBits == null) {\r\n      params.client_max_window_bits = true;\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Accept an extension negotiation offer/response.\r\n   *\r\n   * @param {Array} configurations The extension negotiation offers/reponse\r\n   * @return {Object} Accepted configuration\r\n   * @public\r\n   */\r\n  accept(configurations) {\r\n    configurations = this.normalizeParams(configurations);\r\n\r\n    this.params = this._isServer\r\n      ? this.acceptAsServer(configurations)\r\n      : this.acceptAsClient(configurations);\r\n\r\n    return this.params;\r\n  }\r\n\r\n  /**\r\n   * Releases all resources used by the extension.\r\n   *\r\n   * @public\r\n   */\r\n  cleanup() {\r\n    if (this._inflate) {\r\n      this._inflate.close();\r\n      this._inflate = null;\r\n    }\r\n\r\n    if (this._deflate) {\r\n      const callback = this._deflate[kCallback];\r\n\r\n      this._deflate.close();\r\n      this._deflate = null;\r\n\r\n      if (callback) {\r\n        callback(\r\n          new Error(\r\n            'The deflate stream was closed while data was being processed'\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Accept an extension negotiation offer.\r\n   *\r\n   * @param {Array} offers The extension negotiation offers\r\n   * @return {Object} Accepted configuration\r\n   * @private\r\n   */\r\n  acceptAsServer(offers) {\r\n    const opts = this._options;\r\n    const accepted = offers.find((params) => {\r\n      if (\r\n        (opts.serverNoContextTakeover === false &&\r\n          params.server_no_context_takeover) ||\r\n        (params.server_max_window_bits &&\r\n          (opts.serverMaxWindowBits === false ||\r\n            (typeof opts.serverMaxWindowBits === 'number' &&\r\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\r\n        (typeof opts.clientMaxWindowBits === 'number' &&\r\n          !params.client_max_window_bits)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    if (!accepted) {\r\n      throw new Error('None of the extension offers can be accepted');\r\n    }\r\n\r\n    if (opts.serverNoContextTakeover) {\r\n      accepted.server_no_context_takeover = true;\r\n    }\r\n    if (opts.clientNoContextTakeover) {\r\n      accepted.client_no_context_takeover = true;\r\n    }\r\n    if (typeof opts.serverMaxWindowBits === 'number') {\r\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\r\n    }\r\n    if (typeof opts.clientMaxWindowBits === 'number') {\r\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\r\n    } else if (\r\n      accepted.client_max_window_bits === true ||\r\n      opts.clientMaxWindowBits === false\r\n    ) {\r\n      delete accepted.client_max_window_bits;\r\n    }\r\n\r\n    return accepted;\r\n  }\r\n\r\n  /**\r\n   * Accept the extension negotiation response.\r\n   *\r\n   * @param {Array} response The extension negotiation response\r\n   * @return {Object} Accepted configuration\r\n   * @private\r\n   */\r\n  acceptAsClient(response) {\r\n    const params = response[0];\r\n\r\n    if (\r\n      this._options.clientNoContextTakeover === false &&\r\n      params.client_no_context_takeover\r\n    ) {\r\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\r\n    }\r\n\r\n    if (!params.client_max_window_bits) {\r\n      if (typeof this._options.clientMaxWindowBits === 'number') {\r\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\r\n      }\r\n    } else if (\r\n      this._options.clientMaxWindowBits === false ||\r\n      (typeof this._options.clientMaxWindowBits === 'number' &&\r\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\r\n    ) {\r\n      throw new Error(\r\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\r\n      );\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Normalize parameters.\r\n   *\r\n   * @param {Array} configurations The extension negotiation offers/reponse\r\n   * @return {Array} The offers/response with normalized parameters\r\n   * @private\r\n   */\r\n  normalizeParams(configurations) {\r\n    configurations.forEach((params) => {\r\n      Object.keys(params).forEach((key) => {\r\n        let value = params[key];\r\n\r\n        if (value.length > 1) {\r\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\r\n        }\r\n\r\n        value = value[0];\r\n\r\n        if (key === 'client_max_window_bits') {\r\n          if (value !== true) {\r\n            const num = +value;\r\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\r\n              throw new TypeError(\r\n                `Invalid value for parameter \"${key}\": ${value}`\r\n              );\r\n            }\r\n            value = num;\r\n          } else if (!this._isServer) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n        } else if (key === 'server_max_window_bits') {\r\n          const num = +value;\r\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n          value = num;\r\n        } else if (\r\n          key === 'client_no_context_takeover' ||\r\n          key === 'server_no_context_takeover'\r\n        ) {\r\n          if (value !== true) {\r\n            throw new TypeError(\r\n              `Invalid value for parameter \"${key}\": ${value}`\r\n            );\r\n          }\r\n        } else {\r\n          throw new Error(`Unknown parameter \"${key}\"`);\r\n        }\r\n\r\n        params[key] = value;\r\n      });\r\n    });\r\n\r\n    return configurations;\r\n  }\r\n\r\n  /**\r\n   * Decompress data. Concurrency limited.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @public\r\n   */\r\n  decompress(data, fin, callback) {\r\n    zlibLimiter.add((done) => {\r\n      this._decompress(data, fin, (err, result) => {\r\n        done();\r\n        callback(err, result);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compress data. Concurrency limited.\r\n   *\r\n   * @param {(Buffer|String)} data Data to compress\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @public\r\n   */\r\n  compress(data, fin, callback) {\r\n    zlibLimiter.add((done) => {\r\n      this._compress(data, fin, (err, result) => {\r\n        done();\r\n        callback(err, result);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Decompress data.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @private\r\n   */\r\n  _decompress(data, fin, callback) {\r\n    const endpoint = this._isServer ? 'client' : 'server';\r\n\r\n    if (!this._inflate) {\r\n      const key = `${endpoint}_max_window_bits`;\r\n      const windowBits =\r\n        typeof this.params[key] !== 'number'\r\n          ? zlib.Z_DEFAULT_WINDOWBITS\r\n          : this.params[key];\r\n\r\n      this._inflate = zlib.createInflateRaw({\r\n        ...this._options.zlibInflateOptions,\r\n        windowBits\r\n      });\r\n      this._inflate[kPerMessageDeflate] = this;\r\n      this._inflate[kTotalLength] = 0;\r\n      this._inflate[kBuffers] = [];\r\n      this._inflate.on('error', inflateOnError);\r\n      this._inflate.on('data', inflateOnData);\r\n    }\r\n\r\n    this._inflate[kCallback] = callback;\r\n\r\n    this._inflate.write(data);\r\n    if (fin) this._inflate.write(TRAILER);\r\n\r\n    this._inflate.flush(() => {\r\n      const err = this._inflate[kError];\r\n\r\n      if (err) {\r\n        this._inflate.close();\r\n        this._inflate = null;\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      const data = bufferUtil.concat(\r\n        this._inflate[kBuffers],\r\n        this._inflate[kTotalLength]\r\n      );\r\n\r\n      if (this._inflate._readableState.endEmitted) {\r\n        this._inflate.close();\r\n        this._inflate = null;\r\n      } else {\r\n        this._inflate[kTotalLength] = 0;\r\n        this._inflate[kBuffers] = [];\r\n\r\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\r\n          this._inflate.reset();\r\n        }\r\n      }\r\n\r\n      callback(null, data);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Compress data.\r\n   *\r\n   * @param {(Buffer|String)} data Data to compress\r\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\r\n   * @param {Function} callback Callback\r\n   * @private\r\n   */\r\n  _compress(data, fin, callback) {\r\n    const endpoint = this._isServer ? 'server' : 'client';\r\n\r\n    if (!this._deflate) {\r\n      const key = `${endpoint}_max_window_bits`;\r\n      const windowBits =\r\n        typeof this.params[key] !== 'number'\r\n          ? zlib.Z_DEFAULT_WINDOWBITS\r\n          : this.params[key];\r\n\r\n      this._deflate = zlib.createDeflateRaw({\r\n        ...this._options.zlibDeflateOptions,\r\n        windowBits\r\n      });\r\n\r\n      this._deflate[kTotalLength] = 0;\r\n      this._deflate[kBuffers] = [];\r\n\r\n      this._deflate.on('data', deflateOnData);\r\n    }\r\n\r\n    this._deflate[kCallback] = callback;\r\n\r\n    this._deflate.write(data);\r\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\r\n      if (!this._deflate) {\r\n        //\r\n        // The deflate stream was closed while data was being processed.\r\n        //\r\n        return;\r\n      }\r\n\r\n      let data = bufferUtil.concat(\r\n        this._deflate[kBuffers],\r\n        this._deflate[kTotalLength]\r\n      );\r\n\r\n      if (fin) {\r\n        data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\r\n      }\r\n\r\n      //\r\n      // Ensure that the callback will not be called again in\r\n      // `PerMessageDeflate#cleanup()`.\r\n      //\r\n      this._deflate[kCallback] = null;\r\n\r\n      this._deflate[kTotalLength] = 0;\r\n      this._deflate[kBuffers] = [];\r\n\r\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\r\n        this._deflate.reset();\r\n      }\r\n\r\n      callback(null, data);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = PerMessageDeflate;\r\n\r\n/**\r\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction deflateOnData(chunk) {\r\n  this[kBuffers].push(chunk);\r\n  this[kTotalLength] += chunk.length;\r\n}\r\n\r\n/**\r\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction inflateOnData(chunk) {\r\n  this[kTotalLength] += chunk.length;\r\n\r\n  if (\r\n    this[kPerMessageDeflate]._maxPayload < 1 ||\r\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\r\n  ) {\r\n    this[kBuffers].push(chunk);\r\n    return;\r\n  }\r\n\r\n  this[kError] = new RangeError('Max payload size exceeded');\r\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\r\n  this[kError][kStatusCode] = 1009;\r\n  this.removeListener('data', inflateOnData);\r\n  this.reset();\r\n}\r\n\r\n/**\r\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\r\n *\r\n * @param {Error} err The emitted error\r\n * @private\r\n */\r\nfunction inflateOnError(err) {\r\n  //\r\n  // There is no need to call `Zlib#close()` as the handle is automatically\r\n  // closed when an error is emitted.\r\n  //\r\n  this[kPerMessageDeflate]._inflate = null;\r\n  err[kStatusCode] = 1007;\r\n  this[kCallback](err);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/receiver.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/receiver.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\r\n\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js\");\r\nconst {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER,\r\n  kStatusCode,\r\n  kWebSocket\r\n} = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js\");\r\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js\");\r\n\r\nconst FastBuffer = Buffer[Symbol.species];\r\nconst promise = Promise.resolve();\r\n\r\n//\r\n// `queueMicrotask()` is not available in Node.js < 11.\r\n//\r\nconst queueTask =\r\n  typeof queueMicrotask === 'function' ? queueMicrotask : queueMicrotaskShim;\r\n\r\nconst GET_INFO = 0;\r\nconst GET_PAYLOAD_LENGTH_16 = 1;\r\nconst GET_PAYLOAD_LENGTH_64 = 2;\r\nconst GET_MASK = 3;\r\nconst GET_DATA = 4;\r\nconst INFLATING = 5;\r\nconst WAIT_MICROTASK = 6;\r\n\r\n/**\r\n * HyBi Receiver implementation.\r\n *\r\n * @extends Writable\r\n */\r\nclass Receiver extends Writable {\r\n  /**\r\n   * Creates a Receiver instance.\r\n   *\r\n   * @param {Object} [options] Options object\r\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\r\n   * @param {Object} [options.extensions] An object containing the negotiated\r\n   *     extensions\r\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\r\n   *     client or server mode\r\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\r\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n   *     not to skip UTF-8 validation for text and close messages\r\n   */\r\n  constructor(options = {}) {\r\n    super();\r\n\r\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\r\n    this._extensions = options.extensions || {};\r\n    this._isServer = !!options.isServer;\r\n    this._maxPayload = options.maxPayload | 0;\r\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\r\n    this[kWebSocket] = undefined;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._buffers = [];\r\n\r\n    this._compressed = false;\r\n    this._payloadLength = 0;\r\n    this._mask = undefined;\r\n    this._fragmented = 0;\r\n    this._masked = false;\r\n    this._fin = false;\r\n    this._opcode = 0;\r\n\r\n    this._totalPayloadLength = 0;\r\n    this._messageLength = 0;\r\n    this._fragments = [];\r\n\r\n    this._state = GET_INFO;\r\n    this._loop = false;\r\n  }\r\n\r\n  /**\r\n   * Implements `Writable.prototype._write()`.\r\n   *\r\n   * @param {Buffer} chunk The chunk of data to write\r\n   * @param {String} encoding The character encoding of `chunk`\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  _write(chunk, encoding, cb) {\r\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\r\n\r\n    this._bufferedBytes += chunk.length;\r\n    this._buffers.push(chunk);\r\n    this.startLoop(cb);\r\n  }\r\n\r\n  /**\r\n   * Consumes `n` bytes from the buffered data.\r\n   *\r\n   * @param {Number} n The number of bytes to consume\r\n   * @return {Buffer} The consumed bytes\r\n   * @private\r\n   */\r\n  consume(n) {\r\n    this._bufferedBytes -= n;\r\n\r\n    if (n === this._buffers[0].length) return this._buffers.shift();\r\n\r\n    if (n < this._buffers[0].length) {\r\n      const buf = this._buffers[0];\r\n      this._buffers[0] = new FastBuffer(\r\n        buf.buffer,\r\n        buf.byteOffset + n,\r\n        buf.length - n\r\n      );\r\n\r\n      return new FastBuffer(buf.buffer, buf.byteOffset, n);\r\n    }\r\n\r\n    const dst = Buffer.allocUnsafe(n);\r\n\r\n    do {\r\n      const buf = this._buffers[0];\r\n      const offset = dst.length - n;\r\n\r\n      if (n >= buf.length) {\r\n        dst.set(this._buffers.shift(), offset);\r\n      } else {\r\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\r\n        this._buffers[0] = new FastBuffer(\r\n          buf.buffer,\r\n          buf.byteOffset + n,\r\n          buf.length - n\r\n        );\r\n      }\r\n\r\n      n -= buf.length;\r\n    } while (n > 0);\r\n\r\n    return dst;\r\n  }\r\n\r\n  /**\r\n   * Starts the parsing loop.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  startLoop(cb) {\r\n    let err;\r\n    this._loop = true;\r\n\r\n    do {\r\n      switch (this._state) {\r\n        case GET_INFO:\r\n          err = this.getInfo();\r\n          break;\r\n        case GET_PAYLOAD_LENGTH_16:\r\n          err = this.getPayloadLength16();\r\n          break;\r\n        case GET_PAYLOAD_LENGTH_64:\r\n          err = this.getPayloadLength64();\r\n          break;\r\n        case GET_MASK:\r\n          this.getMask();\r\n          break;\r\n        case GET_DATA:\r\n          err = this.getData(cb);\r\n          break;\r\n        case INFLATING:\r\n          this._loop = false;\r\n          return;\r\n        default:\r\n          //\r\n          // `WAIT_MICROTASK`.\r\n          //\r\n          this._loop = false;\r\n\r\n          queueTask(() => {\r\n            this._state = GET_INFO;\r\n            this.startLoop(cb);\r\n          });\r\n          return;\r\n      }\r\n    } while (this._loop);\r\n\r\n    cb(err);\r\n  }\r\n\r\n  /**\r\n   * Reads the first two bytes of a frame.\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getInfo() {\r\n    if (this._bufferedBytes < 2) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    const buf = this.consume(2);\r\n\r\n    if ((buf[0] & 0x30) !== 0x00) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'RSV2 and RSV3 must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_RSV_2_3'\r\n      );\r\n    }\r\n\r\n    const compressed = (buf[0] & 0x40) === 0x40;\r\n\r\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'RSV1 must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_RSV_1'\r\n      );\r\n    }\r\n\r\n    this._fin = (buf[0] & 0x80) === 0x80;\r\n    this._opcode = buf[0] & 0x0f;\r\n    this._payloadLength = buf[1] & 0x7f;\r\n\r\n    if (this._opcode === 0x00) {\r\n      if (compressed) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'RSV1 must be clear',\r\n          true,\r\n          1002,\r\n          'WS_ERR_UNEXPECTED_RSV_1'\r\n        );\r\n      }\r\n\r\n      if (!this._fragmented) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'invalid opcode 0',\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_OPCODE'\r\n        );\r\n      }\r\n\r\n      this._opcode = this._fragmented;\r\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\r\n      if (this._fragmented) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          `invalid opcode ${this._opcode}`,\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_OPCODE'\r\n        );\r\n      }\r\n\r\n      this._compressed = compressed;\r\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\r\n      if (!this._fin) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'FIN must be set',\r\n          true,\r\n          1002,\r\n          'WS_ERR_EXPECTED_FIN'\r\n        );\r\n      }\r\n\r\n      if (compressed) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'RSV1 must be clear',\r\n          true,\r\n          1002,\r\n          'WS_ERR_UNEXPECTED_RSV_1'\r\n        );\r\n      }\r\n\r\n      if (\r\n        this._payloadLength > 0x7d ||\r\n        (this._opcode === 0x08 && this._payloadLength === 1)\r\n      ) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          `invalid payload length ${this._payloadLength}`,\r\n          true,\r\n          1002,\r\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\r\n        );\r\n      }\r\n    } else {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        `invalid opcode ${this._opcode}`,\r\n        true,\r\n        1002,\r\n        'WS_ERR_INVALID_OPCODE'\r\n      );\r\n    }\r\n\r\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\r\n    this._masked = (buf[1] & 0x80) === 0x80;\r\n\r\n    if (this._isServer) {\r\n      if (!this._masked) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'MASK must be set',\r\n          true,\r\n          1002,\r\n          'WS_ERR_EXPECTED_MASK'\r\n        );\r\n      }\r\n    } else if (this._masked) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'MASK must be clear',\r\n        true,\r\n        1002,\r\n        'WS_ERR_UNEXPECTED_MASK'\r\n      );\r\n    }\r\n\r\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\r\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\r\n    else return this.haveLength();\r\n  }\r\n\r\n  /**\r\n   * Gets extended payload length (7+16).\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getPayloadLength16() {\r\n    if (this._bufferedBytes < 2) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    this._payloadLength = this.consume(2).readUInt16BE(0);\r\n    return this.haveLength();\r\n  }\r\n\r\n  /**\r\n   * Gets extended payload length (7+64).\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getPayloadLength64() {\r\n    if (this._bufferedBytes < 8) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    const buf = this.consume(8);\r\n    const num = buf.readUInt32BE(0);\r\n\r\n    //\r\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\r\n    // if payload length is greater than this number.\r\n    //\r\n    if (num > Math.pow(2, 53 - 32) - 1) {\r\n      this._loop = false;\r\n      return error(\r\n        RangeError,\r\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\r\n        false,\r\n        1009,\r\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\r\n      );\r\n    }\r\n\r\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\r\n    return this.haveLength();\r\n  }\r\n\r\n  /**\r\n   * Payload length has been read.\r\n   *\r\n   * @return {(RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  haveLength() {\r\n    if (this._payloadLength && this._opcode < 0x08) {\r\n      this._totalPayloadLength += this._payloadLength;\r\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\r\n        this._loop = false;\r\n        return error(\r\n          RangeError,\r\n          'Max payload size exceeded',\r\n          false,\r\n          1009,\r\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this._masked) this._state = GET_MASK;\r\n    else this._state = GET_DATA;\r\n  }\r\n\r\n  /**\r\n   * Reads mask bytes.\r\n   *\r\n   * @private\r\n   */\r\n  getMask() {\r\n    if (this._bufferedBytes < 4) {\r\n      this._loop = false;\r\n      return;\r\n    }\r\n\r\n    this._mask = this.consume(4);\r\n    this._state = GET_DATA;\r\n  }\r\n\r\n  /**\r\n   * Reads data bytes.\r\n   *\r\n   * @param {Function} cb Callback\r\n   * @return {(Error|RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  getData(cb) {\r\n    let data = EMPTY_BUFFER;\r\n\r\n    if (this._payloadLength) {\r\n      if (this._bufferedBytes < this._payloadLength) {\r\n        this._loop = false;\r\n        return;\r\n      }\r\n\r\n      data = this.consume(this._payloadLength);\r\n\r\n      if (\r\n        this._masked &&\r\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\r\n      ) {\r\n        unmask(data, this._mask);\r\n      }\r\n    }\r\n\r\n    if (this._opcode > 0x07) return this.controlMessage(data);\r\n\r\n    if (this._compressed) {\r\n      this._state = INFLATING;\r\n      this.decompress(data, cb);\r\n      return;\r\n    }\r\n\r\n    if (data.length) {\r\n      //\r\n      // This message is not compressed so its length is the sum of the payload\r\n      // length of all fragments.\r\n      //\r\n      this._messageLength = this._totalPayloadLength;\r\n      this._fragments.push(data);\r\n    }\r\n\r\n    return this.dataMessage();\r\n  }\r\n\r\n  /**\r\n   * Decompresses data.\r\n   *\r\n   * @param {Buffer} data Compressed data\r\n   * @param {Function} cb Callback\r\n   * @private\r\n   */\r\n  decompress(data, cb) {\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\r\n      if (err) return cb(err);\r\n\r\n      if (buf.length) {\r\n        this._messageLength += buf.length;\r\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\r\n          return cb(\r\n            error(\r\n              RangeError,\r\n              'Max payload size exceeded',\r\n              false,\r\n              1009,\r\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\r\n            )\r\n          );\r\n        }\r\n\r\n        this._fragments.push(buf);\r\n      }\r\n\r\n      const er = this.dataMessage();\r\n      if (er) return cb(er);\r\n\r\n      this.startLoop(cb);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles a data message.\r\n   *\r\n   * @return {(Error|undefined)} A possible error\r\n   * @private\r\n   */\r\n  dataMessage() {\r\n    if (this._fin) {\r\n      const messageLength = this._messageLength;\r\n      const fragments = this._fragments;\r\n\r\n      this._totalPayloadLength = 0;\r\n      this._messageLength = 0;\r\n      this._fragmented = 0;\r\n      this._fragments = [];\r\n\r\n      if (this._opcode === 2) {\r\n        let data;\r\n\r\n        if (this._binaryType === 'nodebuffer') {\r\n          data = concat(fragments, messageLength);\r\n        } else if (this._binaryType === 'arraybuffer') {\r\n          data = toArrayBuffer(concat(fragments, messageLength));\r\n        } else {\r\n          data = fragments;\r\n        }\r\n\r\n        this.emit('message', data, true);\r\n      } else {\r\n        const buf = concat(fragments, messageLength);\r\n\r\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\r\n          this._loop = false;\r\n          return error(\r\n            Error,\r\n            'invalid UTF-8 sequence',\r\n            true,\r\n            1007,\r\n            'WS_ERR_INVALID_UTF8'\r\n          );\r\n        }\r\n\r\n        this.emit('message', buf, false);\r\n      }\r\n    }\r\n\r\n    this._state = WAIT_MICROTASK;\r\n  }\r\n\r\n  /**\r\n   * Handles a control message.\r\n   *\r\n   * @param {Buffer} data Data to handle\r\n   * @return {(Error|RangeError|undefined)} A possible error\r\n   * @private\r\n   */\r\n  controlMessage(data) {\r\n    if (this._opcode === 0x08) {\r\n      this._loop = false;\r\n\r\n      if (data.length === 0) {\r\n        this.emit('conclude', 1005, EMPTY_BUFFER);\r\n        this.end();\r\n\r\n        this._state = GET_INFO;\r\n      } else {\r\n        const code = data.readUInt16BE(0);\r\n\r\n        if (!isValidStatusCode(code)) {\r\n          return error(\r\n            RangeError,\r\n            `invalid status code ${code}`,\r\n            true,\r\n            1002,\r\n            'WS_ERR_INVALID_CLOSE_CODE'\r\n          );\r\n        }\r\n\r\n        const buf = new FastBuffer(\r\n          data.buffer,\r\n          data.byteOffset + 2,\r\n          data.length - 2\r\n        );\r\n\r\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\r\n          return error(\r\n            Error,\r\n            'invalid UTF-8 sequence',\r\n            true,\r\n            1007,\r\n            'WS_ERR_INVALID_UTF8'\r\n          );\r\n        }\r\n\r\n        this.emit('conclude', code, buf);\r\n        this.end();\r\n\r\n        this._state = GET_INFO;\r\n      }\r\n    } else if (this._opcode === 0x09) {\r\n      this.emit('ping', data);\r\n      this._state = WAIT_MICROTASK;\r\n    } else {\r\n      this.emit('pong', data);\r\n      this._state = WAIT_MICROTASK;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Receiver;\r\n\r\n/**\r\n * Builds an error object.\r\n *\r\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\r\n * @param {String} message The error message\r\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\r\n *     `message`\r\n * @param {Number} statusCode The status code\r\n * @param {String} errorCode The exposed error code\r\n * @return {(Error|RangeError)} The error\r\n * @private\r\n */\r\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\r\n  const err = new ErrorCtor(\r\n    prefix ? `Invalid WebSocket frame: ${message}` : message\r\n  );\r\n\r\n  Error.captureStackTrace(err, error);\r\n  err.code = errorCode;\r\n  err[kStatusCode] = statusCode;\r\n  return err;\r\n}\r\n\r\n/**\r\n * A shim for `queueMicrotask()`.\r\n *\r\n * @param {Function} cb Callback\r\n */\r\nfunction queueMicrotaskShim(cb) {\r\n  promise.then(cb).catch(throwErrorNextTick);\r\n}\r\n\r\n/**\r\n * Throws an error.\r\n *\r\n * @param {Error} err The error to throw\r\n * @private\r\n */\r\nfunction throwError(err) {\r\n  throw err;\r\n}\r\n\r\n/**\r\n * Throws an error in the next tick.\r\n *\r\n * @param {Error} err The error to throw\r\n * @private\r\n */\r\nfunction throwErrorNextTick(err) {\r\n  process.nextTick(throwError, err);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/sender.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/sender.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\r\n\r\n\r\n\r\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\r\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js\");\r\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js\");\r\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js\");\r\n\r\nconst kByteLength = Symbol('kByteLength');\r\nconst maskBuffer = Buffer.alloc(4);\r\n\r\n/**\r\n * HyBi Sender implementation.\r\n */\r\nclass Sender {\r\n  /**\r\n   * Creates a Sender instance.\r\n   *\r\n   * @param {Duplex} socket The connection socket\r\n   * @param {Object} [extensions] An object containing the negotiated extensions\r\n   * @param {Function} [generateMask] The function used to generate the masking\r\n   *     key\r\n   */\r\n  constructor(socket, extensions, generateMask) {\r\n    this._extensions = extensions || {};\r\n\r\n    if (generateMask) {\r\n      this._generateMask = generateMask;\r\n      this._maskBuffer = Buffer.alloc(4);\r\n    }\r\n\r\n    this._socket = socket;\r\n\r\n    this._firstFragment = true;\r\n    this._compress = false;\r\n\r\n    this._bufferedBytes = 0;\r\n    this._deflating = false;\r\n    this._queue = [];\r\n  }\r\n\r\n  /**\r\n   * Frames a piece of data according to the HyBi WebSocket protocol.\r\n   *\r\n   * @param {(Buffer|String)} data The data to frame\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\r\n   *     key\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @return {(Buffer|String)[]} The framed data\r\n   * @public\r\n   */\r\n  static frame(data, options) {\r\n    let mask;\r\n    let merge = false;\r\n    let offset = 2;\r\n    let skipMasking = false;\r\n\r\n    if (options.mask) {\r\n      mask = options.maskBuffer || maskBuffer;\r\n\r\n      if (options.generateMask) {\r\n        options.generateMask(mask);\r\n      } else {\r\n        randomFillSync(mask, 0, 4);\r\n      }\r\n\r\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\r\n      offset = 6;\r\n    }\r\n\r\n    let dataLength;\r\n\r\n    if (typeof data === 'string') {\r\n      if (\r\n        (!options.mask || skipMasking) &&\r\n        options[kByteLength] !== undefined\r\n      ) {\r\n        dataLength = options[kByteLength];\r\n      } else {\r\n        data = Buffer.from(data);\r\n        dataLength = data.length;\r\n      }\r\n    } else {\r\n      dataLength = data.length;\r\n      merge = options.mask && options.readOnly && !skipMasking;\r\n    }\r\n\r\n    let payloadLength = dataLength;\r\n\r\n    if (dataLength >= 65536) {\r\n      offset += 8;\r\n      payloadLength = 127;\r\n    } else if (dataLength > 125) {\r\n      offset += 2;\r\n      payloadLength = 126;\r\n    }\r\n\r\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\r\n\r\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\r\n    if (options.rsv1) target[0] |= 0x40;\r\n\r\n    target[1] = payloadLength;\r\n\r\n    if (payloadLength === 126) {\r\n      target.writeUInt16BE(dataLength, 2);\r\n    } else if (payloadLength === 127) {\r\n      target[2] = target[3] = 0;\r\n      target.writeUIntBE(dataLength, 4, 6);\r\n    }\r\n\r\n    if (!options.mask) return [target, data];\r\n\r\n    target[1] |= 0x80;\r\n    target[offset - 4] = mask[0];\r\n    target[offset - 3] = mask[1];\r\n    target[offset - 2] = mask[2];\r\n    target[offset - 1] = mask[3];\r\n\r\n    if (skipMasking) return [target, data];\r\n\r\n    if (merge) {\r\n      applyMask(data, mask, target, offset, dataLength);\r\n      return [target];\r\n    }\r\n\r\n    applyMask(data, mask, data, 0, dataLength);\r\n    return [target, data];\r\n  }\r\n\r\n  /**\r\n   * Sends a close message to the other peer.\r\n   *\r\n   * @param {Number} [code] The status code component of the body\r\n   * @param {(String|Buffer)} [data] The message component of the body\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  close(code, data, mask, cb) {\r\n    let buf;\r\n\r\n    if (code === undefined) {\r\n      buf = EMPTY_BUFFER;\r\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\r\n      throw new TypeError('First argument must be a valid error code number');\r\n    } else if (data === undefined || !data.length) {\r\n      buf = Buffer.allocUnsafe(2);\r\n      buf.writeUInt16BE(code, 0);\r\n    } else {\r\n      const length = Buffer.byteLength(data);\r\n\r\n      if (length > 123) {\r\n        throw new RangeError('The message must not be greater than 123 bytes');\r\n      }\r\n\r\n      buf = Buffer.allocUnsafe(2 + length);\r\n      buf.writeUInt16BE(code, 0);\r\n\r\n      if (typeof data === 'string') {\r\n        buf.write(data, 2);\r\n      } else {\r\n        buf.set(data, 2);\r\n      }\r\n    }\r\n\r\n    const options = {\r\n      [kByteLength]: buf.length,\r\n      fin: true,\r\n      generateMask: this._generateMask,\r\n      mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode: 0x08,\r\n      readOnly: false,\r\n      rsv1: false\r\n    };\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.dispatch, buf, false, options, cb]);\r\n    } else {\r\n      this.sendFrame(Sender.frame(buf, options), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a ping message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  ping(data, mask, cb) {\r\n    let byteLength;\r\n    let readOnly;\r\n\r\n    if (typeof data === 'string') {\r\n      byteLength = Buffer.byteLength(data);\r\n      readOnly = false;\r\n    } else {\r\n      data = toBuffer(data);\r\n      byteLength = data.length;\r\n      readOnly = toBuffer.readOnly;\r\n    }\r\n\r\n    if (byteLength > 125) {\r\n      throw new RangeError('The data size must not be greater than 125 bytes');\r\n    }\r\n\r\n    const options = {\r\n      [kByteLength]: byteLength,\r\n      fin: true,\r\n      generateMask: this._generateMask,\r\n      mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode: 0x09,\r\n      readOnly,\r\n      rsv1: false\r\n    };\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.dispatch, data, false, options, cb]);\r\n    } else {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a pong message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  pong(data, mask, cb) {\r\n    let byteLength;\r\n    let readOnly;\r\n\r\n    if (typeof data === 'string') {\r\n      byteLength = Buffer.byteLength(data);\r\n      readOnly = false;\r\n    } else {\r\n      data = toBuffer(data);\r\n      byteLength = data.length;\r\n      readOnly = toBuffer.readOnly;\r\n    }\r\n\r\n    if (byteLength > 125) {\r\n      throw new RangeError('The data size must not be greater than 125 bytes');\r\n    }\r\n\r\n    const options = {\r\n      [kByteLength]: byteLength,\r\n      fin: true,\r\n      generateMask: this._generateMask,\r\n      mask,\r\n      maskBuffer: this._maskBuffer,\r\n      opcode: 0x0a,\r\n      readOnly,\r\n      rsv1: false\r\n    };\r\n\r\n    if (this._deflating) {\r\n      this.enqueue([this.dispatch, data, false, options, cb]);\r\n    } else {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a data message to the other peer.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\r\n   *     or text\r\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\r\n   *     compress `data`\r\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\r\n   *     last one\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Function} [cb] Callback\r\n   * @public\r\n   */\r\n  send(data, options, cb) {\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n    let opcode = options.binary ? 2 : 1;\r\n    let rsv1 = options.compress;\r\n\r\n    let byteLength;\r\n    let readOnly;\r\n\r\n    if (typeof data === 'string') {\r\n      byteLength = Buffer.byteLength(data);\r\n      readOnly = false;\r\n    } else {\r\n      data = toBuffer(data);\r\n      byteLength = data.length;\r\n      readOnly = toBuffer.readOnly;\r\n    }\r\n\r\n    if (this._firstFragment) {\r\n      this._firstFragment = false;\r\n      if (\r\n        rsv1 &&\r\n        perMessageDeflate &&\r\n        perMessageDeflate.params[\r\n          perMessageDeflate._isServer\r\n            ? 'server_no_context_takeover'\r\n            : 'client_no_context_takeover'\r\n        ]\r\n      ) {\r\n        rsv1 = byteLength >= perMessageDeflate._threshold;\r\n      }\r\n      this._compress = rsv1;\r\n    } else {\r\n      rsv1 = false;\r\n      opcode = 0;\r\n    }\r\n\r\n    if (options.fin) this._firstFragment = true;\r\n\r\n    if (perMessageDeflate) {\r\n      const opts = {\r\n        [kByteLength]: byteLength,\r\n        fin: options.fin,\r\n        generateMask: this._generateMask,\r\n        mask: options.mask,\r\n        maskBuffer: this._maskBuffer,\r\n        opcode,\r\n        readOnly,\r\n        rsv1\r\n      };\r\n\r\n      if (this._deflating) {\r\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\r\n      } else {\r\n        this.dispatch(data, this._compress, opts, cb);\r\n      }\r\n    } else {\r\n      this.sendFrame(\r\n        Sender.frame(data, {\r\n          [kByteLength]: byteLength,\r\n          fin: options.fin,\r\n          generateMask: this._generateMask,\r\n          mask: options.mask,\r\n          maskBuffer: this._maskBuffer,\r\n          opcode,\r\n          readOnly,\r\n          rsv1: false\r\n        }),\r\n        cb\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches a message.\r\n   *\r\n   * @param {(Buffer|String)} data The message to send\r\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\r\n   *     `data`\r\n   * @param {Object} options Options object\r\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\r\n   *     FIN bit\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\r\n   *     `data`\r\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\r\n   *     key\r\n   * @param {Number} options.opcode The opcode\r\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\r\n   *     modified\r\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\r\n   *     RSV1 bit\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  dispatch(data, compress, options, cb) {\r\n    if (!compress) {\r\n      this.sendFrame(Sender.frame(data, options), cb);\r\n      return;\r\n    }\r\n\r\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\r\n\r\n    this._bufferedBytes += options[kByteLength];\r\n    this._deflating = true;\r\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\r\n      if (this._socket.destroyed) {\r\n        const err = new Error(\r\n          'The socket was closed while data was being compressed'\r\n        );\r\n\r\n        if (typeof cb === 'function') cb(err);\r\n\r\n        for (let i = 0; i < this._queue.length; i++) {\r\n          const params = this._queue[i];\r\n          const callback = params[params.length - 1];\r\n\r\n          if (typeof callback === 'function') callback(err);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      this._bufferedBytes -= options[kByteLength];\r\n      this._deflating = false;\r\n      options.readOnly = false;\r\n      this.sendFrame(Sender.frame(buf, options), cb);\r\n      this.dequeue();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes queued send operations.\r\n   *\r\n   * @private\r\n   */\r\n  dequeue() {\r\n    while (!this._deflating && this._queue.length) {\r\n      const params = this._queue.shift();\r\n\r\n      this._bufferedBytes -= params[3][kByteLength];\r\n      Reflect.apply(params[0], this, params.slice(1));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enqueues a send operation.\r\n   *\r\n   * @param {Array} params Send operation parameters.\r\n   * @private\r\n   */\r\n  enqueue(params) {\r\n    this._bufferedBytes += params[3][kByteLength];\r\n    this._queue.push(params);\r\n  }\r\n\r\n  /**\r\n   * Sends a frame.\r\n   *\r\n   * @param {Buffer[]} list The frame to send\r\n   * @param {Function} [cb] Callback\r\n   * @private\r\n   */\r\n  sendFrame(list, cb) {\r\n    if (list.length === 2) {\r\n      this._socket.cork();\r\n      this._socket.write(list[0]);\r\n      this._socket.write(list[1], cb);\r\n      this._socket.uncork();\r\n    } else {\r\n      this._socket.write(list[0], cb);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Sender;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/stream.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/stream.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\r\n\r\n/**\r\n * Emits the `'close'` event on a stream.\r\n *\r\n * @param {Duplex} stream The stream.\r\n * @private\r\n */\r\nfunction emitClose(stream) {\r\n  stream.emit('close');\r\n}\r\n\r\n/**\r\n * The listener of the `'end'` event.\r\n *\r\n * @private\r\n */\r\nfunction duplexOnEnd() {\r\n  if (!this.destroyed && this._writableState.finished) {\r\n    this.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `'error'` event.\r\n *\r\n * @param {Error} err The error\r\n * @private\r\n */\r\nfunction duplexOnError(err) {\r\n  this.removeListener('error', duplexOnError);\r\n  this.destroy();\r\n  if (this.listenerCount('error') === 0) {\r\n    // Do not suppress the throwing behavior.\r\n    this.emit('error', err);\r\n  }\r\n}\r\n\r\n/**\r\n * Wraps a `WebSocket` in a duplex stream.\r\n *\r\n * @param {WebSocket} ws The `WebSocket` to wrap\r\n * @param {Object} [options] The options for the `Duplex` constructor\r\n * @return {Duplex} The duplex stream\r\n * @public\r\n */\r\nfunction createWebSocketStream(ws, options) {\r\n  let terminateOnDestroy = true;\r\n\r\n  const duplex = new Duplex({\r\n    ...options,\r\n    autoDestroy: false,\r\n    emitClose: false,\r\n    objectMode: false,\r\n    writableObjectMode: false\r\n  });\r\n\r\n  ws.on('message', function message(msg, isBinary) {\r\n    const data =\r\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\r\n\r\n    if (!duplex.push(data)) ws.pause();\r\n  });\r\n\r\n  ws.once('error', function error(err) {\r\n    if (duplex.destroyed) return;\r\n\r\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\r\n    //\r\n    // - If the `'error'` event is emitted before the `'open'` event, then\r\n    //   `ws.terminate()` is a noop as no socket is assigned.\r\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\r\n    //   event of the `Receiver` object. The listener already closes the\r\n    //   connection by calling `ws.close()`. This allows a close frame to be\r\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\r\n    //   then the close frame might not be sent.\r\n    terminateOnDestroy = false;\r\n    duplex.destroy(err);\r\n  });\r\n\r\n  ws.once('close', function close() {\r\n    if (duplex.destroyed) return;\r\n\r\n    duplex.push(null);\r\n  });\r\n\r\n  duplex._destroy = function (err, callback) {\r\n    if (ws.readyState === ws.CLOSED) {\r\n      callback(err);\r\n      process.nextTick(emitClose, duplex);\r\n      return;\r\n    }\r\n\r\n    let called = false;\r\n\r\n    ws.once('error', function error(err) {\r\n      called = true;\r\n      callback(err);\r\n    });\r\n\r\n    ws.once('close', function close() {\r\n      if (!called) callback(err);\r\n      process.nextTick(emitClose, duplex);\r\n    });\r\n\r\n    if (terminateOnDestroy) ws.terminate();\r\n  };\r\n\r\n  duplex._final = function (callback) {\r\n    if (ws.readyState === ws.CONNECTING) {\r\n      ws.once('open', function open() {\r\n        duplex._final(callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    // If the value of the `_socket` property is `null` it means that `ws` is a\r\n    // client websocket and the handshake failed. In fact, when this happens, a\r\n    // socket is never assigned to the websocket. Wait for the `'error'` event\r\n    // that will be emitted by the websocket.\r\n    if (ws._socket === null) return;\r\n\r\n    if (ws._socket._writableState.finished) {\r\n      callback();\r\n      if (duplex._readableState.endEmitted) duplex.destroy();\r\n    } else {\r\n      ws._socket.once('finish', function finish() {\r\n        // `duplex` is not destroyed here because the `'end'` event will be\r\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\r\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\r\n        callback();\r\n      });\r\n      ws.close();\r\n    }\r\n  };\r\n\r\n  duplex._read = function () {\r\n    if (ws.isPaused) ws.resume();\r\n  };\r\n\r\n  duplex._write = function (chunk, encoding, callback) {\r\n    if (ws.readyState === ws.CONNECTING) {\r\n      ws.once('open', function open() {\r\n        duplex._write(chunk, encoding, callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    ws.send(chunk, callback);\r\n  };\r\n\r\n  duplex.on('end', duplexOnEnd);\r\n  duplex.on('error', duplexOnError);\r\n  return duplex;\r\n}\r\n\r\nmodule.exports = createWebSocketStream;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsUUFBUSxTQUFTLEVBQUUsbUJBQU8sQ0FBQyxzQkFBUTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL3N0cmVhbS5qcz9iYTQzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHsgRHVwbGV4IH0gPSByZXF1aXJlKCdzdHJlYW0nKTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0cyB0aGUgYCdjbG9zZSdgIGV2ZW50IG9uIGEgc3RyZWFtLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0R1cGxleH0gc3RyZWFtIFRoZSBzdHJlYW0uXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBlbWl0Q2xvc2Uoc3RyZWFtKSB7XHJcbiAgc3RyZWFtLmVtaXQoJ2Nsb3NlJyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGAnZW5kJ2AgZXZlbnQuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBkdXBsZXhPbkVuZCgpIHtcclxuICBpZiAoIXRoaXMuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpIHtcclxuICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYCdlcnJvcidgIGV2ZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgVGhlIGVycm9yXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBkdXBsZXhPbkVycm9yKGVycikge1xyXG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZHVwbGV4T25FcnJvcik7XHJcbiAgdGhpcy5kZXN0cm95KCk7XHJcbiAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgnZXJyb3InKSA9PT0gMCkge1xyXG4gICAgLy8gRG8gbm90IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvci5cclxuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFdyYXBzIGEgYFdlYlNvY2tldGAgaW4gYSBkdXBsZXggc3RyZWFtLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1dlYlNvY2tldH0gd3MgVGhlIGBXZWJTb2NrZXRgIHRvIHdyYXBcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyBmb3IgdGhlIGBEdXBsZXhgIGNvbnN0cnVjdG9yXHJcbiAqIEByZXR1cm4ge0R1cGxleH0gVGhlIGR1cGxleCBzdHJlYW1cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0U3RyZWFtKHdzLCBvcHRpb25zKSB7XHJcbiAgbGV0IHRlcm1pbmF0ZU9uRGVzdHJveSA9IHRydWU7XHJcblxyXG4gIGNvbnN0IGR1cGxleCA9IG5ldyBEdXBsZXgoe1xyXG4gICAgLi4ub3B0aW9ucyxcclxuICAgIGF1dG9EZXN0cm95OiBmYWxzZSxcclxuICAgIGVtaXRDbG9zZTogZmFsc2UsXHJcbiAgICBvYmplY3RNb2RlOiBmYWxzZSxcclxuICAgIHdyaXRhYmxlT2JqZWN0TW9kZTogZmFsc2VcclxuICB9KTtcclxuXHJcbiAgd3Mub24oJ21lc3NhZ2UnLCBmdW5jdGlvbiBtZXNzYWdlKG1zZywgaXNCaW5hcnkpIHtcclxuICAgIGNvbnN0IGRhdGEgPVxyXG4gICAgICAhaXNCaW5hcnkgJiYgZHVwbGV4Ll9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPyBtc2cudG9TdHJpbmcoKSA6IG1zZztcclxuXHJcbiAgICBpZiAoIWR1cGxleC5wdXNoKGRhdGEpKSB3cy5wYXVzZSgpO1xyXG4gIH0pO1xyXG5cclxuICB3cy5vbmNlKCdlcnJvcicsIGZ1bmN0aW9uIGVycm9yKGVycikge1xyXG4gICAgaWYgKGR1cGxleC5kZXN0cm95ZWQpIHJldHVybjtcclxuXHJcbiAgICAvLyBQcmV2ZW50IGB3cy50ZXJtaW5hdGUoKWAgZnJvbSBiZWluZyBjYWxsZWQgYnkgYGR1cGxleC5fZGVzdHJveSgpYC5cclxuICAgIC8vXHJcbiAgICAvLyAtIElmIHRoZSBgJ2Vycm9yJ2AgZXZlbnQgaXMgZW1pdHRlZCBiZWZvcmUgdGhlIGAnb3BlbidgIGV2ZW50LCB0aGVuXHJcbiAgICAvLyAgIGB3cy50ZXJtaW5hdGUoKWAgaXMgYSBub29wIGFzIG5vIHNvY2tldCBpcyBhc3NpZ25lZC5cclxuICAgIC8vIC0gT3RoZXJ3aXNlLCB0aGUgZXJyb3IgaXMgcmUtZW1pdHRlZCBieSB0aGUgbGlzdGVuZXIgb2YgdGhlIGAnZXJyb3InYFxyXG4gICAgLy8gICBldmVudCBvZiB0aGUgYFJlY2VpdmVyYCBvYmplY3QuIFRoZSBsaXN0ZW5lciBhbHJlYWR5IGNsb3NlcyB0aGVcclxuICAgIC8vICAgY29ubmVjdGlvbiBieSBjYWxsaW5nIGB3cy5jbG9zZSgpYC4gVGhpcyBhbGxvd3MgYSBjbG9zZSBmcmFtZSB0byBiZVxyXG4gICAgLy8gICBzZW50IHRvIHRoZSBvdGhlciBwZWVyLiBJZiBgd3MudGVybWluYXRlKClgIGlzIGNhbGxlZCByaWdodCBhZnRlciB0aGlzLFxyXG4gICAgLy8gICB0aGVuIHRoZSBjbG9zZSBmcmFtZSBtaWdodCBub3QgYmUgc2VudC5cclxuICAgIHRlcm1pbmF0ZU9uRGVzdHJveSA9IGZhbHNlO1xyXG4gICAgZHVwbGV4LmRlc3Ryb3koZXJyKTtcclxuICB9KTtcclxuXHJcbiAgd3Mub25jZSgnY2xvc2UnLCBmdW5jdGlvbiBjbG9zZSgpIHtcclxuICAgIGlmIChkdXBsZXguZGVzdHJveWVkKSByZXR1cm47XHJcblxyXG4gICAgZHVwbGV4LnB1c2gobnVsbCk7XHJcbiAgfSk7XHJcblxyXG4gIGR1cGxleC5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ0xPU0VEKSB7XHJcbiAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCBkdXBsZXgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xyXG5cclxuICAgIHdzLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gZXJyb3IoZXJyKSB7XHJcbiAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB3cy5vbmNlKCdjbG9zZScsIGZ1bmN0aW9uIGNsb3NlKCkge1xyXG4gICAgICBpZiAoIWNhbGxlZCkgY2FsbGJhY2soZXJyKTtcclxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2UsIGR1cGxleCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGVybWluYXRlT25EZXN0cm95KSB3cy50ZXJtaW5hdGUoKTtcclxuICB9O1xyXG5cclxuICBkdXBsZXguX2ZpbmFsID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ09OTkVDVElORykge1xyXG4gICAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcclxuICAgICAgICBkdXBsZXguX2ZpbmFsKGNhbGxiYWNrKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB0aGUgdmFsdWUgb2YgdGhlIGBfc29ja2V0YCBwcm9wZXJ0eSBpcyBgbnVsbGAgaXQgbWVhbnMgdGhhdCBgd3NgIGlzIGFcclxuICAgIC8vIGNsaWVudCB3ZWJzb2NrZXQgYW5kIHRoZSBoYW5kc2hha2UgZmFpbGVkLiBJbiBmYWN0LCB3aGVuIHRoaXMgaGFwcGVucywgYVxyXG4gICAgLy8gc29ja2V0IGlzIG5ldmVyIGFzc2lnbmVkIHRvIHRoZSB3ZWJzb2NrZXQuIFdhaXQgZm9yIHRoZSBgJ2Vycm9yJ2AgZXZlbnRcclxuICAgIC8vIHRoYXQgd2lsbCBiZSBlbWl0dGVkIGJ5IHRoZSB3ZWJzb2NrZXQuXHJcbiAgICBpZiAod3MuX3NvY2tldCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGlmICh3cy5fc29ja2V0Ll93cml0YWJsZVN0YXRlLmZpbmlzaGVkKSB7XHJcbiAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIGlmIChkdXBsZXguX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCkgZHVwbGV4LmRlc3Ryb3koKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdzLl9zb2NrZXQub25jZSgnZmluaXNoJywgZnVuY3Rpb24gZmluaXNoKCkge1xyXG4gICAgICAgIC8vIGBkdXBsZXhgIGlzIG5vdCBkZXN0cm95ZWQgaGVyZSBiZWNhdXNlIHRoZSBgJ2VuZCdgIGV2ZW50IHdpbGwgYmVcclxuICAgICAgICAvLyBlbWl0dGVkIG9uIGBkdXBsZXhgIGFmdGVyIHRoaXMgYCdmaW5pc2gnYCBldmVudC4gVGhlIEVPRiBzaWduYWxpbmdcclxuICAgICAgICAvLyBgbnVsbGAgY2h1bmsgaXMsIGluIGZhY3QsIHB1c2hlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgZW1pdHMgYCdjbG9zZSdgLlxyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB3cy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGR1cGxleC5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh3cy5pc1BhdXNlZCkgd3MucmVzdW1lKCk7XHJcbiAgfTtcclxuXHJcbiAgZHVwbGV4Ll93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XHJcbiAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuQ09OTkVDVElORykge1xyXG4gICAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcclxuICAgICAgICBkdXBsZXguX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHdzLnNlbmQoY2h1bmssIGNhbGxiYWNrKTtcclxuICB9O1xyXG5cclxuICBkdXBsZXgub24oJ2VuZCcsIGR1cGxleE9uRW5kKTtcclxuICBkdXBsZXgub24oJ2Vycm9yJywgZHVwbGV4T25FcnJvcik7XHJcbiAgcmV0dXJuIGR1cGxleDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVXZWJTb2NrZXRTdHJlYW07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/subprotocol.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/subprotocol.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js\");\r\n\r\n/**\r\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\r\n *\r\n * @param {String} header The field value of the header\r\n * @return {Set} The subprotocol names\r\n * @public\r\n */\r\nfunction parse(header) {\r\n  const protocols = new Set();\r\n  let start = -1;\r\n  let end = -1;\r\n  let i = 0;\r\n\r\n  for (i; i < header.length; i++) {\r\n    const code = header.charCodeAt(i);\r\n\r\n    if (end === -1 && tokenChars[code] === 1) {\r\n      if (start === -1) start = i;\r\n    } else if (\r\n      i !== 0 &&\r\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\r\n    ) {\r\n      if (end === -1 && start !== -1) end = i;\r\n    } else if (code === 0x2c /* ',' */) {\r\n      if (start === -1) {\r\n        throw new SyntaxError(`Unexpected character at index ${i}`);\r\n      }\r\n\r\n      if (end === -1) end = i;\r\n\r\n      const protocol = header.slice(start, end);\r\n\r\n      if (protocols.has(protocol)) {\r\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\r\n      }\r\n\r\n      protocols.add(protocol);\r\n      start = end = -1;\r\n    } else {\r\n      throw new SyntaxError(`Unexpected character at index ${i}`);\r\n    }\r\n  }\r\n\r\n  if (start === -1 || end !== -1) {\r\n    throw new SyntaxError('Unexpected end of input');\r\n  }\r\n\r\n  const protocol = header.slice(start, i);\r\n\r\n  if (protocols.has(protocol)) {\r\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\r\n  }\r\n\r\n  protocols.add(protocol);\r\n  return protocols;\r\n}\r\n\r\nmodule.exports = { parse };\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL3N1YnByb3RvY29sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxRQUFRLGFBQWEsRUFBRSxtQkFBTyxDQUFDLHlHQUFjO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxtQkFBbUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSwrREFBK0QsRUFBRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDZEQUE2RCxFQUFFO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFNBQVM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL3dzL2xpYi9zdWJwcm90b2NvbC5qcz8zMDZjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmNvbnN0IHsgdG9rZW5DaGFycyB9ID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uJyk7XHJcblxyXG4vKipcclxuICogUGFyc2VzIHRoZSBgU2VjLVdlYlNvY2tldC1Qcm90b2NvbGAgaGVhZGVyIGludG8gYSBzZXQgb2Ygc3VicHJvdG9jb2wgbmFtZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXIgVGhlIGZpZWxkIHZhbHVlIG9mIHRoZSBoZWFkZXJcclxuICogQHJldHVybiB7U2V0fSBUaGUgc3VicHJvdG9jb2wgbmFtZXNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UoaGVhZGVyKSB7XHJcbiAgY29uc3QgcHJvdG9jb2xzID0gbmV3IFNldCgpO1xyXG4gIGxldCBzdGFydCA9IC0xO1xyXG4gIGxldCBlbmQgPSAtMTtcclxuICBsZXQgaSA9IDA7XHJcblxyXG4gIGZvciAoaTsgaSA8IGhlYWRlci5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY29kZSA9IGhlYWRlci5jaGFyQ29kZUF0KGkpO1xyXG5cclxuICAgIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcclxuICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgaSAhPT0gMCAmJlxyXG4gICAgICAoY29kZSA9PT0gMHgyMCAvKiAnICcgKi8gfHwgY29kZSA9PT0gMHgwOSkgLyogJ1xcdCcgKi9cclxuICAgICkge1xyXG4gICAgICBpZiAoZW5kID09PSAtMSAmJiBzdGFydCAhPT0gLTEpIGVuZCA9IGk7XHJcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MmMgLyogJywnICovKSB7XHJcbiAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcclxuICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XHJcblxyXG4gICAgICBjb25zdCBwcm90b2NvbCA9IGhlYWRlci5zbGljZShzdGFydCwgZW5kKTtcclxuXHJcbiAgICAgIGlmIChwcm90b2NvbHMuaGFzKHByb3RvY29sKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVGhlIFwiJHtwcm90b2NvbH1cIiBzdWJwcm90b2NvbCBpcyBkdXBsaWNhdGVkYCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByb3RvY29scy5hZGQocHJvdG9jb2wpO1xyXG4gICAgICBzdGFydCA9IGVuZCA9IC0xO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoc3RhcnQgPT09IC0xIHx8IGVuZCAhPT0gLTEpIHtcclxuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgaW5wdXQnKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHByb3RvY29sID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBpKTtcclxuXHJcbiAgaWYgKHByb3RvY29scy5oYXMocHJvdG9jb2wpKSB7XHJcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFRoZSBcIiR7cHJvdG9jb2x9XCIgc3VicHJvdG9jb2wgaXMgZHVwbGljYXRlZGApO1xyXG4gIH1cclxuXHJcbiAgcHJvdG9jb2xzLmFkZChwcm90b2NvbCk7XHJcbiAgcmV0dXJuIHByb3RvY29scztcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7IHBhcnNlIH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/subprotocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst { isUtf8 } = __webpack_require__(/*! buffer */ \"buffer\");\r\n\r\n//\r\n// Allowed token characters:\r\n//\r\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\r\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\r\n//\r\n// tokenChars[32] === 0 // ' '\r\n// tokenChars[33] === 1 // '!'\r\n// tokenChars[34] === 0 // '\"'\r\n// ...\r\n//\r\n// prettier-ignore\r\nconst tokenChars = [\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\r\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\r\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\r\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\r\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\r\n];\r\n\r\n/**\r\n * Checks if a status code is allowed in a close frame.\r\n *\r\n * @param {Number} code The status code\r\n * @return {Boolean} `true` if the status code is valid, else `false`\r\n * @public\r\n */\r\nfunction isValidStatusCode(code) {\r\n  return (\r\n    (code >= 1000 &&\r\n      code <= 1014 &&\r\n      code !== 1004 &&\r\n      code !== 1005 &&\r\n      code !== 1006) ||\r\n    (code >= 3000 && code <= 4999)\r\n  );\r\n}\r\n\r\n/**\r\n * Checks if a given buffer contains only correct UTF-8.\r\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\r\n * Markus Kuhn.\r\n *\r\n * @param {Buffer} buf The buffer to check\r\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\r\n * @public\r\n */\r\nfunction _isValidUTF8(buf) {\r\n  const len = buf.length;\r\n  let i = 0;\r\n\r\n  while (i < len) {\r\n    if ((buf[i] & 0x80) === 0) {\r\n      // 0xxxxxxx\r\n      i++;\r\n    } else if ((buf[i] & 0xe0) === 0xc0) {\r\n      // 110xxxxx 10xxxxxx\r\n      if (\r\n        i + 1 === len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i] & 0xfe) === 0xc0 // Overlong\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 2;\r\n    } else if ((buf[i] & 0xf0) === 0xe0) {\r\n      // 1110xxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 2 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\r\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 3;\r\n    } else if ((buf[i] & 0xf8) === 0xf0) {\r\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n      if (\r\n        i + 3 >= len ||\r\n        (buf[i + 1] & 0xc0) !== 0x80 ||\r\n        (buf[i + 2] & 0xc0) !== 0x80 ||\r\n        (buf[i + 3] & 0xc0) !== 0x80 ||\r\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\r\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\r\n        buf[i] > 0xf4 // > U+10FFFF\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      i += 4;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nmodule.exports = {\r\n  isValidStatusCode,\r\n  isValidUTF8: _isValidUTF8,\r\n  tokenChars\r\n};\r\n\r\nif (isUtf8) {\r\n  module.exports.isValidUTF8 = function (buf) {\r\n    return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\r\n  };\r\n} /* istanbul ignore else  */ else if (!process.env.WS_NO_UTF_8_VALIDATE) {\r\n  try {\r\n    const isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/utf-8-validate/index.js\");\r\n\r\n    module.exports.isValidUTF8 = function (buf) {\r\n      return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\r\n    };\r\n  } catch (e) {\r\n    // Continue regardless of the error.\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMsc0JBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDBCQUEwQjtBQUM1QjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0Esd0JBQXdCLG1CQUFPLENBQUMsOEdBQWdCO0FBQ2hEO0FBQ0EsSUFBSSwwQkFBMEI7QUFDOUI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanM/YTAyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zdCB7IGlzVXRmOCB9ID0gcmVxdWlyZSgnYnVmZmVyJyk7XHJcblxyXG4vL1xyXG4vLyBBbGxvd2VkIHRva2VuIGNoYXJhY3RlcnM6XHJcbi8vXHJcbi8vICchJywgJyMnLCAnJCcsICclJywgJyYnLCAnJycsICcqJywgJysnLCAnLScsXHJcbi8vICcuJywgMC05LCBBLVosICdeJywgJ18nLCAnYCcsIGEteiwgJ3wnLCAnfidcclxuLy9cclxuLy8gdG9rZW5DaGFyc1szMl0gPT09IDAgLy8gJyAnXHJcbi8vIHRva2VuQ2hhcnNbMzNdID09PSAxIC8vICchJ1xyXG4vLyB0b2tlbkNoYXJzWzM0XSA9PT0gMCAvLyAnXCInXHJcbi8vIC4uLlxyXG4vL1xyXG4vLyBwcmV0dGllci1pZ25vcmVcclxuY29uc3QgdG9rZW5DaGFycyA9IFtcclxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAwIC0gMTVcclxuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAxNiAtIDMxXHJcbiAgMCwgMSwgMCwgMSwgMSwgMSwgMSwgMSwgMCwgMCwgMSwgMSwgMCwgMSwgMSwgMCwgLy8gMzIgLSA0N1xyXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDQ4IC0gNjNcclxuICAwLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAvLyA2NCAtIDc5XHJcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMCwgMCwgMSwgMSwgLy8gODAgLSA5NVxyXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDk2IC0gMTExXHJcbiAgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMSwgMCwgMSwgMCAvLyAxMTIgLSAxMjdcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBzdGF0dXMgY29kZSBpcyBhbGxvd2VkIGluIGEgY2xvc2UgZnJhbWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBzdGF0dXMgY29kZVxyXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHN0YXR1cyBjb2RlIGlzIHZhbGlkLCBlbHNlIGBmYWxzZWBcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gaXNWYWxpZFN0YXR1c0NvZGUoY29kZSkge1xyXG4gIHJldHVybiAoXHJcbiAgICAoY29kZSA+PSAxMDAwICYmXHJcbiAgICAgIGNvZGUgPD0gMTAxNCAmJlxyXG4gICAgICBjb2RlICE9PSAxMDA0ICYmXHJcbiAgICAgIGNvZGUgIT09IDEwMDUgJiZcclxuICAgICAgY29kZSAhPT0gMTAwNikgfHxcclxuICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KVxyXG4gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBidWZmZXIgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LlxyXG4gKiBQb3J0ZWQgZnJvbSBodHRwczovL3d3dy5jbC5jYW0uYWMudWsvJTdFbWdrMjUvdWNzL3V0ZjhfY2hlY2suYyBieVxyXG4gKiBNYXJrdXMgS3Vobi5cclxuICpcclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNoZWNrXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgYnVmYCBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTgsIGVsc2UgYGZhbHNlYFxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBfaXNWYWxpZFVURjgoYnVmKSB7XHJcbiAgY29uc3QgbGVuID0gYnVmLmxlbmd0aDtcclxuICBsZXQgaSA9IDA7XHJcblxyXG4gIHdoaWxlIChpIDwgbGVuKSB7XHJcbiAgICBpZiAoKGJ1ZltpXSAmIDB4ODApID09PSAwKSB7XHJcbiAgICAgIC8vIDB4eHh4eHh4XHJcbiAgICAgIGkrKztcclxuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZTApID09PSAweGMwKSB7XHJcbiAgICAgIC8vIDExMHh4eHh4IDEweHh4eHh4XHJcbiAgICAgIGlmIChcclxuICAgICAgICBpICsgMSA9PT0gbGVuIHx8XHJcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxyXG4gICAgICAgIChidWZbaV0gJiAweGZlKSA9PT0gMHhjMCAvLyBPdmVybG9uZ1xyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGkgKz0gMjtcclxuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjApID09PSAweGUwKSB7XHJcbiAgICAgIC8vIDExMTB4eHh4IDEweHh4eHh4IDEweHh4eHh4XHJcbiAgICAgIGlmIChcclxuICAgICAgICBpICsgMiA+PSBsZW4gfHxcclxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgKGJ1ZltpICsgMl0gJiAweGMwKSAhPT0gMHg4MCB8fFxyXG4gICAgICAgIChidWZbaV0gPT09IDB4ZTAgJiYgKGJ1ZltpICsgMV0gJiAweGUwKSA9PT0gMHg4MCkgfHwgLy8gT3ZlcmxvbmdcclxuICAgICAgICAoYnVmW2ldID09PSAweGVkICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4YTApIC8vIFN1cnJvZ2F0ZSAoVStEODAwIC0gVStERkZGKVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGkgKz0gMztcclxuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjgpID09PSAweGYwKSB7XHJcbiAgICAgIC8vIDExMTEweHh4IDEweHh4eHh4IDEweHh4eHh4IDEweHh4eHh4XHJcbiAgICAgIGlmIChcclxuICAgICAgICBpICsgMyA+PSBsZW4gfHxcclxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XHJcbiAgICAgICAgKGJ1ZltpICsgMl0gJiAweGMwKSAhPT0gMHg4MCB8fFxyXG4gICAgICAgIChidWZbaSArIDNdICYgMHhjMCkgIT09IDB4ODAgfHxcclxuICAgICAgICAoYnVmW2ldID09PSAweGYwICYmIChidWZbaSArIDFdICYgMHhmMCkgPT09IDB4ODApIHx8IC8vIE92ZXJsb25nXHJcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhmNCAmJiBidWZbaSArIDFdID4gMHg4ZikgfHxcclxuICAgICAgICBidWZbaV0gPiAweGY0IC8vID4gVSsxMEZGRkZcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpICs9IDQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgaXNWYWxpZFN0YXR1c0NvZGUsXHJcbiAgaXNWYWxpZFVURjg6IF9pc1ZhbGlkVVRGOCxcclxuICB0b2tlbkNoYXJzXHJcbn07XHJcblxyXG5pZiAoaXNVdGY4KSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMuaXNWYWxpZFVURjggPSBmdW5jdGlvbiAoYnVmKSB7XHJcbiAgICByZXR1cm4gYnVmLmxlbmd0aCA8IDI0ID8gX2lzVmFsaWRVVEY4KGJ1ZikgOiBpc1V0ZjgoYnVmKTtcclxuICB9O1xyXG59IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICAqLyBlbHNlIGlmICghcHJvY2Vzcy5lbnYuV1NfTk9fVVRGXzhfVkFMSURBVEUpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgaXNWYWxpZFVURjggPSByZXF1aXJlKCd1dGYtOC12YWxpZGF0ZScpO1xyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzLmlzVmFsaWRVVEY4ID0gZnVuY3Rpb24gKGJ1Zikge1xyXG4gICAgICByZXR1cm4gYnVmLmxlbmd0aCA8IDMyID8gX2lzVmFsaWRVVEY4KGJ1ZikgOiBpc1ZhbGlkVVRGOChidWYpO1xyXG4gICAgfTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyBDb250aW51ZSByZWdhcmRsZXNzIG9mIHRoZSBlcnJvci5cclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket-server.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket-server.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\" }] */\r\n\r\n\r\n\r\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\r\nconst http = __webpack_require__(/*! http */ \"http\");\r\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\r\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\nconst extension = __webpack_require__(/*! ./extension */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/extension.js\");\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js\");\r\nconst subprotocol = __webpack_require__(/*! ./subprotocol */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/subprotocol.js\");\r\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket.js\");\r\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\n\r\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\r\n\r\nconst RUNNING = 0;\r\nconst CLOSING = 1;\r\nconst CLOSED = 2;\r\n\r\n/**\r\n * Class representing a WebSocket server.\r\n *\r\n * @extends EventEmitter\r\n */\r\nclass WebSocketServer extends EventEmitter {\r\n  /**\r\n   * Create a `WebSocketServer` instance.\r\n   *\r\n   * @param {Object} options Configuration options\r\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\r\n   *     pending connections\r\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\r\n   *     track clients\r\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\r\n   * @param {String} [options.host] The hostname where to bind the server\r\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\r\n   *     size\r\n   * @param {Boolean} [options.noServer=false] Enable no server mode\r\n   * @param {String} [options.path] Accept only connections matching this path\r\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\r\n   *     permessage-deflate\r\n   * @param {Number} [options.port] The port where to bind the server\r\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\r\n   *     server to use\r\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n   *     not to skip UTF-8 validation for text and close messages\r\n   * @param {Function} [options.verifyClient] A hook to reject connections\r\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\r\n   *     class to use. It must be the `WebSocket` class or class that extends it\r\n   * @param {Function} [callback] A listener for the `listening` event\r\n   */\r\n  constructor(options, callback) {\r\n    super();\r\n\r\n    options = {\r\n      maxPayload: 100 * 1024 * 1024,\r\n      skipUTF8Validation: false,\r\n      perMessageDeflate: false,\r\n      handleProtocols: null,\r\n      clientTracking: true,\r\n      verifyClient: null,\r\n      noServer: false,\r\n      backlog: null, // use default (511 as implemented in net.js)\r\n      server: null,\r\n      host: null,\r\n      path: null,\r\n      port: null,\r\n      WebSocket,\r\n      ...options\r\n    };\r\n\r\n    if (\r\n      (options.port == null && !options.server && !options.noServer) ||\r\n      (options.port != null && (options.server || options.noServer)) ||\r\n      (options.server && options.noServer)\r\n    ) {\r\n      throw new TypeError(\r\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\r\n          'must be specified'\r\n      );\r\n    }\r\n\r\n    if (options.port != null) {\r\n      this._server = http.createServer((req, res) => {\r\n        const body = http.STATUS_CODES[426];\r\n\r\n        res.writeHead(426, {\r\n          'Content-Length': body.length,\r\n          'Content-Type': 'text/plain'\r\n        });\r\n        res.end(body);\r\n      });\r\n      this._server.listen(\r\n        options.port,\r\n        options.host,\r\n        options.backlog,\r\n        callback\r\n      );\r\n    } else if (options.server) {\r\n      this._server = options.server;\r\n    }\r\n\r\n    if (this._server) {\r\n      const emitConnection = this.emit.bind(this, 'connection');\r\n\r\n      this._removeListeners = addListeners(this._server, {\r\n        listening: this.emit.bind(this, 'listening'),\r\n        error: this.emit.bind(this, 'error'),\r\n        upgrade: (req, socket, head) => {\r\n          this.handleUpgrade(req, socket, head, emitConnection);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\r\n    if (options.clientTracking) {\r\n      this.clients = new Set();\r\n      this._shouldEmitClose = false;\r\n    }\r\n\r\n    this.options = options;\r\n    this._state = RUNNING;\r\n  }\r\n\r\n  /**\r\n   * Returns the bound address, the address family name, and port of the server\r\n   * as reported by the operating system if listening on an IP socket.\r\n   * If the server is listening on a pipe or UNIX domain socket, the name is\r\n   * returned as a string.\r\n   *\r\n   * @return {(Object|String|null)} The address of the server\r\n   * @public\r\n   */\r\n  address() {\r\n    if (this.options.noServer) {\r\n      throw new Error('The server is operating in \"noServer\" mode');\r\n    }\r\n\r\n    if (!this._server) return null;\r\n    return this._server.address();\r\n  }\r\n\r\n  /**\r\n   * Stop the server from accepting new connections and emit the `'close'` event\r\n   * when all existing connections are closed.\r\n   *\r\n   * @param {Function} [cb] A one-time listener for the `'close'` event\r\n   * @public\r\n   */\r\n  close(cb) {\r\n    if (this._state === CLOSED) {\r\n      if (cb) {\r\n        this.once('close', () => {\r\n          cb(new Error('The server is not running'));\r\n        });\r\n      }\r\n\r\n      process.nextTick(emitClose, this);\r\n      return;\r\n    }\r\n\r\n    if (cb) this.once('close', cb);\r\n\r\n    if (this._state === CLOSING) return;\r\n    this._state = CLOSING;\r\n\r\n    if (this.options.noServer || this.options.server) {\r\n      if (this._server) {\r\n        this._removeListeners();\r\n        this._removeListeners = this._server = null;\r\n      }\r\n\r\n      if (this.clients) {\r\n        if (!this.clients.size) {\r\n          process.nextTick(emitClose, this);\r\n        } else {\r\n          this._shouldEmitClose = true;\r\n        }\r\n      } else {\r\n        process.nextTick(emitClose, this);\r\n      }\r\n    } else {\r\n      const server = this._server;\r\n\r\n      this._removeListeners();\r\n      this._removeListeners = this._server = null;\r\n\r\n      //\r\n      // The HTTP/S server was created internally. Close it, and rely on its\r\n      // `'close'` event.\r\n      //\r\n      server.close(() => {\r\n        emitClose(this);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * See if a given request should be handled by this server instance.\r\n   *\r\n   * @param {http.IncomingMessage} req Request object to inspect\r\n   * @return {Boolean} `true` if the request is valid, else `false`\r\n   * @public\r\n   */\r\n  shouldHandle(req) {\r\n    if (this.options.path) {\r\n      const index = req.url.indexOf('?');\r\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\r\n\r\n      if (pathname !== this.options.path) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handle a HTTP Upgrade request.\r\n   *\r\n   * @param {http.IncomingMessage} req The request object\r\n   * @param {Duplex} socket The network socket between the server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Function} cb Callback\r\n   * @public\r\n   */\r\n  handleUpgrade(req, socket, head, cb) {\r\n    socket.on('error', socketOnError);\r\n\r\n    const key = req.headers['sec-websocket-key'];\r\n    const version = +req.headers['sec-websocket-version'];\r\n\r\n    if (req.method !== 'GET') {\r\n      const message = 'Invalid HTTP method';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\r\n      return;\r\n    }\r\n\r\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\r\n      const message = 'Invalid Upgrade header';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n      return;\r\n    }\r\n\r\n    if (!key || !keyRegex.test(key)) {\r\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n      return;\r\n    }\r\n\r\n    if (version !== 8 && version !== 13) {\r\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\r\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n      return;\r\n    }\r\n\r\n    if (!this.shouldHandle(req)) {\r\n      abortHandshake(socket, 400);\r\n      return;\r\n    }\r\n\r\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\r\n    let protocols = new Set();\r\n\r\n    if (secWebSocketProtocol !== undefined) {\r\n      try {\r\n        protocols = subprotocol.parse(secWebSocketProtocol);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Protocol header';\r\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n        return;\r\n      }\r\n    }\r\n\r\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\r\n    const extensions = {};\r\n\r\n    if (\r\n      this.options.perMessageDeflate &&\r\n      secWebSocketExtensions !== undefined\r\n    ) {\r\n      const perMessageDeflate = new PerMessageDeflate(\r\n        this.options.perMessageDeflate,\r\n        true,\r\n        this.options.maxPayload\r\n      );\r\n\r\n      try {\r\n        const offers = extension.parse(secWebSocketExtensions);\r\n\r\n        if (offers[PerMessageDeflate.extensionName]) {\r\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\r\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\r\n        }\r\n      } catch (err) {\r\n        const message =\r\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\r\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\r\n        return;\r\n      }\r\n    }\r\n\r\n    //\r\n    // Optionally call external client verification handler.\r\n    //\r\n    if (this.options.verifyClient) {\r\n      const info = {\r\n        origin:\r\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\r\n        secure: !!(req.socket.authorized || req.socket.encrypted),\r\n        req\r\n      };\r\n\r\n      if (this.options.verifyClient.length === 2) {\r\n        this.options.verifyClient(info, (verified, code, message, headers) => {\r\n          if (!verified) {\r\n            return abortHandshake(socket, code || 401, message, headers);\r\n          }\r\n\r\n          this.completeUpgrade(\r\n            extensions,\r\n            key,\r\n            protocols,\r\n            req,\r\n            socket,\r\n            head,\r\n            cb\r\n          );\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\r\n    }\r\n\r\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\r\n  }\r\n\r\n  /**\r\n   * Upgrade the connection to WebSocket.\r\n   *\r\n   * @param {Object} extensions The accepted extensions\r\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\r\n   * @param {Set} protocols The subprotocols\r\n   * @param {http.IncomingMessage} req The request object\r\n   * @param {Duplex} socket The network socket between the server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Function} cb Callback\r\n   * @throws {Error} If called more than once with the same socket\r\n   * @private\r\n   */\r\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\r\n    //\r\n    // Destroy the socket if the client has already sent a FIN packet.\r\n    //\r\n    if (!socket.readable || !socket.writable) return socket.destroy();\r\n\r\n    if (socket[kWebSocket]) {\r\n      throw new Error(\r\n        'server.handleUpgrade() was called more than once with the same ' +\r\n          'socket, possibly due to a misconfiguration'\r\n      );\r\n    }\r\n\r\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\r\n\r\n    const digest = createHash('sha1')\r\n      .update(key + GUID)\r\n      .digest('base64');\r\n\r\n    const headers = [\r\n      'HTTP/1.1 101 Switching Protocols',\r\n      'Upgrade: websocket',\r\n      'Connection: Upgrade',\r\n      `Sec-WebSocket-Accept: ${digest}`\r\n    ];\r\n\r\n    const ws = new this.options.WebSocket(null);\r\n\r\n    if (protocols.size) {\r\n      //\r\n      // Optionally call external protocol selection handler.\r\n      //\r\n      const protocol = this.options.handleProtocols\r\n        ? this.options.handleProtocols(protocols, req)\r\n        : protocols.values().next().value;\r\n\r\n      if (protocol) {\r\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\r\n        ws._protocol = protocol;\r\n      }\r\n    }\r\n\r\n    if (extensions[PerMessageDeflate.extensionName]) {\r\n      const params = extensions[PerMessageDeflate.extensionName].params;\r\n      const value = extension.format({\r\n        [PerMessageDeflate.extensionName]: [params]\r\n      });\r\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\r\n      ws._extensions = extensions;\r\n    }\r\n\r\n    //\r\n    // Allow external modification/inspection of handshake headers.\r\n    //\r\n    this.emit('headers', headers, req);\r\n\r\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\r\n    socket.removeListener('error', socketOnError);\r\n\r\n    ws.setSocket(socket, head, {\r\n      maxPayload: this.options.maxPayload,\r\n      skipUTF8Validation: this.options.skipUTF8Validation\r\n    });\r\n\r\n    if (this.clients) {\r\n      this.clients.add(ws);\r\n      ws.on('close', () => {\r\n        this.clients.delete(ws);\r\n\r\n        if (this._shouldEmitClose && !this.clients.size) {\r\n          process.nextTick(emitClose, this);\r\n        }\r\n      });\r\n    }\r\n\r\n    cb(ws, req);\r\n  }\r\n}\r\n\r\nmodule.exports = WebSocketServer;\r\n\r\n/**\r\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\r\n * pairs.\r\n *\r\n * @param {EventEmitter} server The event emitter\r\n * @param {Object.<String, Function>} map The listeners to add\r\n * @return {Function} A function that will remove the added listeners when\r\n *     called\r\n * @private\r\n */\r\nfunction addListeners(server, map) {\r\n  for (const event of Object.keys(map)) server.on(event, map[event]);\r\n\r\n  return function removeListeners() {\r\n    for (const event of Object.keys(map)) {\r\n      server.removeListener(event, map[event]);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Emit a `'close'` event on an `EventEmitter`.\r\n *\r\n * @param {EventEmitter} server The event emitter\r\n * @private\r\n */\r\nfunction emitClose(server) {\r\n  server._state = CLOSED;\r\n  server.emit('close');\r\n}\r\n\r\n/**\r\n * Handle socket errors.\r\n *\r\n * @private\r\n */\r\nfunction socketOnError() {\r\n  this.destroy();\r\n}\r\n\r\n/**\r\n * Close the connection when preconditions are not fulfilled.\r\n *\r\n * @param {Duplex} socket The socket of the upgrade request\r\n * @param {Number} code The HTTP response status code\r\n * @param {String} [message] The HTTP response body\r\n * @param {Object} [headers] Additional HTTP response headers\r\n * @private\r\n */\r\nfunction abortHandshake(socket, code, message, headers) {\r\n  //\r\n  // The socket is writable unless the user destroyed or ended it before calling\r\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\r\n  // error. Handling this does not make much sense as the worst that can happen\r\n  // is that some of the data written by the user might be discarded due to the\r\n  // call to `socket.end()` below, which triggers an `'error'` event that in\r\n  // turn causes the socket to be destroyed.\r\n  //\r\n  message = message || http.STATUS_CODES[code];\r\n  headers = {\r\n    Connection: 'close',\r\n    'Content-Type': 'text/html',\r\n    'Content-Length': Buffer.byteLength(message),\r\n    ...headers\r\n  };\r\n\r\n  socket.once('finish', socket.destroy);\r\n\r\n  socket.end(\r\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\r\n      Object.keys(headers)\r\n        .map((h) => `${h}: ${headers[h]}`)\r\n        .join('\\r\\n') +\r\n      '\\r\\n\\r\\n' +\r\n      message\r\n  );\r\n}\r\n\r\n/**\r\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\r\n * one listener for it, otherwise call `abortHandshake()`.\r\n *\r\n * @param {WebSocketServer} server The WebSocket server\r\n * @param {http.IncomingMessage} req The request object\r\n * @param {Duplex} socket The socket of the upgrade request\r\n * @param {Number} code The HTTP response status code\r\n * @param {String} message The HTTP response body\r\n * @private\r\n */\r\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\r\n  if (server.listenerCount('wsClientError')) {\r\n    const err = new Error(message);\r\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\r\n\r\n    server.emit('wsClientError', err, socket, req);\r\n  } else {\r\n    abortHandshake(socket, code, message);\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\" }] */\r\n\r\n\r\n\r\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\r\nconst https = __webpack_require__(/*! https */ \"https\");\r\nconst http = __webpack_require__(/*! http */ \"http\");\r\nconst net = __webpack_require__(/*! net */ \"net\");\r\nconst tls = __webpack_require__(/*! tls */ \"tls\");\r\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\r\nconst { Duplex, Readable } = __webpack_require__(/*! stream */ \"stream\");\r\nconst { URL } = __webpack_require__(/*! url */ \"url\");\r\n\r\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/permessage-deflate.js\");\r\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/receiver.js\");\r\nconst Sender = __webpack_require__(/*! ./sender */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/sender.js\");\r\nconst {\r\n  BINARY_TYPES,\r\n  EMPTY_BUFFER,\r\n  GUID,\r\n  kForOnEventAttribute,\r\n  kListener,\r\n  kStatusCode,\r\n  kWebSocket,\r\n  NOOP\r\n} = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/constants.js\");\r\nconst {\r\n  EventTarget: { addEventListener, removeEventListener }\r\n} = __webpack_require__(/*! ./event-target */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/event-target.js\");\r\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/extension.js\");\r\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/buffer-util.js\");\r\n\r\nconst closeTimeout = 30 * 1000;\r\nconst kAborted = Symbol('kAborted');\r\nconst protocolVersions = [8, 13];\r\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\r\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\r\n\r\n/**\r\n * Class representing a WebSocket.\r\n *\r\n * @extends EventEmitter\r\n */\r\nclass WebSocket extends EventEmitter {\r\n  /**\r\n   * Create a new `WebSocket`.\r\n   *\r\n   * @param {(String|URL)} address The URL to which to connect\r\n   * @param {(String|String[])} [protocols] The subprotocols\r\n   * @param {Object} [options] Connection options\r\n   */\r\n  constructor(address, protocols, options) {\r\n    super();\r\n\r\n    this._binaryType = BINARY_TYPES[0];\r\n    this._closeCode = 1006;\r\n    this._closeFrameReceived = false;\r\n    this._closeFrameSent = false;\r\n    this._closeMessage = EMPTY_BUFFER;\r\n    this._closeTimer = null;\r\n    this._extensions = {};\r\n    this._paused = false;\r\n    this._protocol = '';\r\n    this._readyState = WebSocket.CONNECTING;\r\n    this._receiver = null;\r\n    this._sender = null;\r\n    this._socket = null;\r\n\r\n    if (address !== null) {\r\n      this._bufferedAmount = 0;\r\n      this._isServer = false;\r\n      this._redirects = 0;\r\n\r\n      if (protocols === undefined) {\r\n        protocols = [];\r\n      } else if (!Array.isArray(protocols)) {\r\n        if (typeof protocols === 'object' && protocols !== null) {\r\n          options = protocols;\r\n          protocols = [];\r\n        } else {\r\n          protocols = [protocols];\r\n        }\r\n      }\r\n\r\n      initAsClient(this, address, protocols, options);\r\n    } else {\r\n      this._isServer = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This deviates from the WHATWG interface since ws doesn't support the\r\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\r\n   * type).\r\n   *\r\n   * @type {String}\r\n   */\r\n  get binaryType() {\r\n    return this._binaryType;\r\n  }\r\n\r\n  set binaryType(type) {\r\n    if (!BINARY_TYPES.includes(type)) return;\r\n\r\n    this._binaryType = type;\r\n\r\n    //\r\n    // Allow to change `binaryType` on the fly.\r\n    //\r\n    if (this._receiver) this._receiver._binaryType = type;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get bufferedAmount() {\r\n    if (!this._socket) return this._bufferedAmount;\r\n\r\n    return this._socket._writableState.length + this._sender._bufferedBytes;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get extensions() {\r\n    return Object.keys(this._extensions).join();\r\n  }\r\n\r\n  /**\r\n   * @type {Boolean}\r\n   */\r\n  get isPaused() {\r\n    return this._paused;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onclose() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onerror() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onopen() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {Function}\r\n   */\r\n  /* istanbul ignore next */\r\n  get onmessage() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get protocol() {\r\n    return this._protocol;\r\n  }\r\n\r\n  /**\r\n   * @type {Number}\r\n   */\r\n  get readyState() {\r\n    return this._readyState;\r\n  }\r\n\r\n  /**\r\n   * @type {String}\r\n   */\r\n  get url() {\r\n    return this._url;\r\n  }\r\n\r\n  /**\r\n   * Set up the socket and the internal resources.\r\n   *\r\n   * @param {Duplex} socket The network socket between the server and client\r\n   * @param {Buffer} head The first packet of the upgraded stream\r\n   * @param {Object} options Options object\r\n   * @param {Function} [options.generateMask] The function used to generate the\r\n   *     masking key\r\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\r\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n   *     not to skip UTF-8 validation for text and close messages\r\n   * @private\r\n   */\r\n  setSocket(socket, head, options) {\r\n    const receiver = new Receiver({\r\n      binaryType: this.binaryType,\r\n      extensions: this._extensions,\r\n      isServer: this._isServer,\r\n      maxPayload: options.maxPayload,\r\n      skipUTF8Validation: options.skipUTF8Validation\r\n    });\r\n\r\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\r\n    this._receiver = receiver;\r\n    this._socket = socket;\r\n\r\n    receiver[kWebSocket] = this;\r\n    socket[kWebSocket] = this;\r\n\r\n    receiver.on('conclude', receiverOnConclude);\r\n    receiver.on('drain', receiverOnDrain);\r\n    receiver.on('error', receiverOnError);\r\n    receiver.on('message', receiverOnMessage);\r\n    receiver.on('ping', receiverOnPing);\r\n    receiver.on('pong', receiverOnPong);\r\n\r\n    //\r\n    // These methods may not be available if `socket` is just a `Duplex`.\r\n    //\r\n    if (socket.setTimeout) socket.setTimeout(0);\r\n    if (socket.setNoDelay) socket.setNoDelay();\r\n\r\n    if (head.length > 0) socket.unshift(head);\r\n\r\n    socket.on('close', socketOnClose);\r\n    socket.on('data', socketOnData);\r\n    socket.on('end', socketOnEnd);\r\n    socket.on('error', socketOnError);\r\n\r\n    this._readyState = WebSocket.OPEN;\r\n    this.emit('open');\r\n  }\r\n\r\n  /**\r\n   * Emit the `'close'` event.\r\n   *\r\n   * @private\r\n   */\r\n  emitClose() {\r\n    if (!this._socket) {\r\n      this._readyState = WebSocket.CLOSED;\r\n      this.emit('close', this._closeCode, this._closeMessage);\r\n      return;\r\n    }\r\n\r\n    if (this._extensions[PerMessageDeflate.extensionName]) {\r\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\r\n    }\r\n\r\n    this._receiver.removeAllListeners();\r\n    this._readyState = WebSocket.CLOSED;\r\n    this.emit('close', this._closeCode, this._closeMessage);\r\n  }\r\n\r\n  /**\r\n   * Start a closing handshake.\r\n   *\r\n   *          +----------+   +-----------+   +----------+\r\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\r\n   *    |     +----------+   +-----------+   +----------+     |\r\n   *          +----------+   +-----------+         |\r\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\r\n   *          +----------+   +-----------+   |\r\n   *    |           |                        |   +---+        |\r\n   *                +------------------------+-->|fin| - - - -\r\n   *    |         +---+                      |   +---+\r\n   *     - - - - -|fin|<---------------------+\r\n   *              +---+\r\n   *\r\n   * @param {Number} [code] Status code explaining why the connection is closing\r\n   * @param {(String|Buffer)} [data] The reason why the connection is\r\n   *     closing\r\n   * @public\r\n   */\r\n  close(code, data) {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      const msg = 'WebSocket was closed before the connection was established';\r\n      abortHandshake(this, this._req, msg);\r\n      return;\r\n    }\r\n\r\n    if (this.readyState === WebSocket.CLOSING) {\r\n      if (\r\n        this._closeFrameSent &&\r\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\r\n      ) {\r\n        this._socket.end();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this._readyState = WebSocket.CLOSING;\r\n    this._sender.close(code, data, !this._isServer, (err) => {\r\n      //\r\n      // This error is handled by the `'error'` listener on the socket. We only\r\n      // want to know if the close frame has been sent here.\r\n      //\r\n      if (err) return;\r\n\r\n      this._closeFrameSent = true;\r\n\r\n      if (\r\n        this._closeFrameReceived ||\r\n        this._receiver._writableState.errorEmitted\r\n      ) {\r\n        this._socket.end();\r\n      }\r\n    });\r\n\r\n    //\r\n    // Specify a timeout for the closing handshake to complete.\r\n    //\r\n    this._closeTimer = setTimeout(\r\n      this._socket.destroy.bind(this._socket),\r\n      closeTimeout\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Pause the socket.\r\n   *\r\n   * @public\r\n   */\r\n  pause() {\r\n    if (\r\n      this.readyState === WebSocket.CONNECTING ||\r\n      this.readyState === WebSocket.CLOSED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this._paused = true;\r\n    this._socket.pause();\r\n  }\r\n\r\n  /**\r\n   * Send a ping.\r\n   *\r\n   * @param {*} [data] The data to send\r\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when the ping is sent\r\n   * @public\r\n   */\r\n  ping(data, mask, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof data === 'function') {\r\n      cb = data;\r\n      data = mask = undefined;\r\n    } else if (typeof mask === 'function') {\r\n      cb = mask;\r\n      mask = undefined;\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    if (mask === undefined) mask = !this._isServer;\r\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\r\n  }\r\n\r\n  /**\r\n   * Send a pong.\r\n   *\r\n   * @param {*} [data] The data to send\r\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when the pong is sent\r\n   * @public\r\n   */\r\n  pong(data, mask, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof data === 'function') {\r\n      cb = data;\r\n      data = mask = undefined;\r\n    } else if (typeof mask === 'function') {\r\n      cb = mask;\r\n      mask = undefined;\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    if (mask === undefined) mask = !this._isServer;\r\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\r\n  }\r\n\r\n  /**\r\n   * Resume the socket.\r\n   *\r\n   * @public\r\n   */\r\n  resume() {\r\n    if (\r\n      this.readyState === WebSocket.CONNECTING ||\r\n      this.readyState === WebSocket.CLOSED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this._paused = false;\r\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\r\n  }\r\n\r\n  /**\r\n   * Send a data message.\r\n   *\r\n   * @param {*} data The message to send\r\n   * @param {Object} [options] Options object\r\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\r\n   *     text\r\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\r\n   *     `data`\r\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\r\n   *     last one\r\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\r\n   * @param {Function} [cb] Callback which is executed when data is written out\r\n   * @public\r\n   */\r\n  send(data, options, cb) {\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\r\n    }\r\n\r\n    if (typeof options === 'function') {\r\n      cb = options;\r\n      options = {};\r\n    }\r\n\r\n    if (typeof data === 'number') data = data.toString();\r\n\r\n    if (this.readyState !== WebSocket.OPEN) {\r\n      sendAfterClose(this, data, cb);\r\n      return;\r\n    }\r\n\r\n    const opts = {\r\n      binary: typeof data !== 'string',\r\n      mask: !this._isServer,\r\n      compress: true,\r\n      fin: true,\r\n      ...options\r\n    };\r\n\r\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\r\n      opts.compress = false;\r\n    }\r\n\r\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\r\n  }\r\n\r\n  /**\r\n   * Forcibly close the connection.\r\n   *\r\n   * @public\r\n   */\r\n  terminate() {\r\n    if (this.readyState === WebSocket.CLOSED) return;\r\n    if (this.readyState === WebSocket.CONNECTING) {\r\n      const msg = 'WebSocket was closed before the connection was established';\r\n      abortHandshake(this, this._req, msg);\r\n      return;\r\n    }\r\n\r\n    if (this._socket) {\r\n      this._readyState = WebSocket.CLOSING;\r\n      this._socket.destroy();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @constant {Number} CONNECTING\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CONNECTING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CONNECTING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CONNECTING\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CONNECTING')\r\n});\r\n\r\n/**\r\n * @constant {Number} OPEN\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'OPEN', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('OPEN')\r\n});\r\n\r\n/**\r\n * @constant {Number} OPEN\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('OPEN')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSING\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CLOSING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSING\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSING')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSED\r\n * @memberof WebSocket\r\n */\r\nObject.defineProperty(WebSocket, 'CLOSED', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSED')\r\n});\r\n\r\n/**\r\n * @constant {Number} CLOSED\r\n * @memberof WebSocket.prototype\r\n */\r\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\r\n  enumerable: true,\r\n  value: readyStates.indexOf('CLOSED')\r\n});\r\n\r\n[\r\n  'binaryType',\r\n  'bufferedAmount',\r\n  'extensions',\r\n  'isPaused',\r\n  'protocol',\r\n  'readyState',\r\n  'url'\r\n].forEach((property) => {\r\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\r\n});\r\n\r\n//\r\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\r\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\r\n//\r\n['open', 'error', 'close', 'message'].forEach((method) => {\r\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\r\n    enumerable: true,\r\n    get() {\r\n      for (const listener of this.listeners(method)) {\r\n        if (listener[kForOnEventAttribute]) return listener[kListener];\r\n      }\r\n\r\n      return null;\r\n    },\r\n    set(handler) {\r\n      for (const listener of this.listeners(method)) {\r\n        if (listener[kForOnEventAttribute]) {\r\n          this.removeListener(method, listener);\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (typeof handler !== 'function') return;\r\n\r\n      this.addEventListener(method, handler, {\r\n        [kForOnEventAttribute]: true\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nWebSocket.prototype.addEventListener = addEventListener;\r\nWebSocket.prototype.removeEventListener = removeEventListener;\r\n\r\nmodule.exports = WebSocket;\r\n\r\n/**\r\n * Initialize a WebSocket client.\r\n *\r\n * @param {WebSocket} websocket The client to initialize\r\n * @param {(String|URL)} address The URL to which to connect\r\n * @param {Array} protocols The subprotocols\r\n * @param {Object} [options] Connection options\r\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\r\n *     redirects\r\n * @param {Function} [options.generateMask] The function used to generate the\r\n *     masking key\r\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\r\n *     handshake request\r\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\r\n *     size\r\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\r\n *     allowed\r\n * @param {String} [options.origin] Value of the `Origin` or\r\n *     `Sec-WebSocket-Origin` header\r\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\r\n *     permessage-deflate\r\n * @param {Number} [options.protocolVersion=13] Value of the\r\n *     `Sec-WebSocket-Version` header\r\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\r\n *     not to skip UTF-8 validation for text and close messages\r\n * @private\r\n */\r\nfunction initAsClient(websocket, address, protocols, options) {\r\n  const opts = {\r\n    protocolVersion: protocolVersions[1],\r\n    maxPayload: 100 * 1024 * 1024,\r\n    skipUTF8Validation: false,\r\n    perMessageDeflate: true,\r\n    followRedirects: false,\r\n    maxRedirects: 10,\r\n    ...options,\r\n    createConnection: undefined,\r\n    socketPath: undefined,\r\n    hostname: undefined,\r\n    protocol: undefined,\r\n    timeout: undefined,\r\n    method: 'GET',\r\n    host: undefined,\r\n    path: undefined,\r\n    port: undefined\r\n  };\r\n\r\n  if (!protocolVersions.includes(opts.protocolVersion)) {\r\n    throw new RangeError(\r\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\r\n        `(supported versions: ${protocolVersions.join(', ')})`\r\n    );\r\n  }\r\n\r\n  let parsedUrl;\r\n\r\n  if (address instanceof URL) {\r\n    parsedUrl = address;\r\n  } else {\r\n    try {\r\n      parsedUrl = new URL(address);\r\n    } catch (e) {\r\n      throw new SyntaxError(`Invalid URL: ${address}`);\r\n    }\r\n  }\r\n\r\n  if (parsedUrl.protocol === 'http:') {\r\n    parsedUrl.protocol = 'ws:';\r\n  } else if (parsedUrl.protocol === 'https:') {\r\n    parsedUrl.protocol = 'wss:';\r\n  }\r\n\r\n  websocket._url = parsedUrl.href;\r\n\r\n  const isSecure = parsedUrl.protocol === 'wss:';\r\n  const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\r\n  let invalidUrlMessage;\r\n\r\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\r\n    invalidUrlMessage =\r\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' +\r\n      '\"http:\", \"https\", or \"ws+unix:\"';\r\n  } else if (isIpcUrl && !parsedUrl.pathname) {\r\n    invalidUrlMessage = \"The URL's pathname is empty\";\r\n  } else if (parsedUrl.hash) {\r\n    invalidUrlMessage = 'The URL contains a fragment identifier';\r\n  }\r\n\r\n  if (invalidUrlMessage) {\r\n    const err = new SyntaxError(invalidUrlMessage);\r\n\r\n    if (websocket._redirects === 0) {\r\n      throw err;\r\n    } else {\r\n      emitErrorAndClose(websocket, err);\r\n      return;\r\n    }\r\n  }\r\n\r\n  const defaultPort = isSecure ? 443 : 80;\r\n  const key = randomBytes(16).toString('base64');\r\n  const request = isSecure ? https.request : http.request;\r\n  const protocolSet = new Set();\r\n  let perMessageDeflate;\r\n\r\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\r\n  opts.defaultPort = opts.defaultPort || defaultPort;\r\n  opts.port = parsedUrl.port || defaultPort;\r\n  opts.host = parsedUrl.hostname.startsWith('[')\r\n    ? parsedUrl.hostname.slice(1, -1)\r\n    : parsedUrl.hostname;\r\n  opts.headers = {\r\n    ...opts.headers,\r\n    'Sec-WebSocket-Version': opts.protocolVersion,\r\n    'Sec-WebSocket-Key': key,\r\n    Connection: 'Upgrade',\r\n    Upgrade: 'websocket'\r\n  };\r\n  opts.path = parsedUrl.pathname + parsedUrl.search;\r\n  opts.timeout = opts.handshakeTimeout;\r\n\r\n  if (opts.perMessageDeflate) {\r\n    perMessageDeflate = new PerMessageDeflate(\r\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\r\n      false,\r\n      opts.maxPayload\r\n    );\r\n    opts.headers['Sec-WebSocket-Extensions'] = format({\r\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\r\n    });\r\n  }\r\n  if (protocols.length) {\r\n    for (const protocol of protocols) {\r\n      if (\r\n        typeof protocol !== 'string' ||\r\n        !subprotocolRegex.test(protocol) ||\r\n        protocolSet.has(protocol)\r\n      ) {\r\n        throw new SyntaxError(\r\n          'An invalid or duplicated subprotocol was specified'\r\n        );\r\n      }\r\n\r\n      protocolSet.add(protocol);\r\n    }\r\n\r\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\r\n  }\r\n  if (opts.origin) {\r\n    if (opts.protocolVersion < 13) {\r\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\r\n    } else {\r\n      opts.headers.Origin = opts.origin;\r\n    }\r\n  }\r\n  if (parsedUrl.username || parsedUrl.password) {\r\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\r\n  }\r\n\r\n  if (isIpcUrl) {\r\n    const parts = opts.path.split(':');\r\n\r\n    opts.socketPath = parts[0];\r\n    opts.path = parts[1];\r\n  }\r\n\r\n  let req;\r\n\r\n  if (opts.followRedirects) {\r\n    if (websocket._redirects === 0) {\r\n      websocket._originalIpc = isIpcUrl;\r\n      websocket._originalSecure = isSecure;\r\n      websocket._originalHostOrSocketPath = isIpcUrl\r\n        ? opts.socketPath\r\n        : parsedUrl.host;\r\n\r\n      const headers = options && options.headers;\r\n\r\n      //\r\n      // Shallow copy the user provided options so that headers can be changed\r\n      // without mutating the original object.\r\n      //\r\n      options = { ...options, headers: {} };\r\n\r\n      if (headers) {\r\n        for (const [key, value] of Object.entries(headers)) {\r\n          options.headers[key.toLowerCase()] = value;\r\n        }\r\n      }\r\n    } else if (websocket.listenerCount('redirect') === 0) {\r\n      const isSameHost = isIpcUrl\r\n        ? websocket._originalIpc\r\n          ? opts.socketPath === websocket._originalHostOrSocketPath\r\n          : false\r\n        : websocket._originalIpc\r\n        ? false\r\n        : parsedUrl.host === websocket._originalHostOrSocketPath;\r\n\r\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\r\n        //\r\n        // Match curl 7.77.0 behavior and drop the following headers. These\r\n        // headers are also dropped when following a redirect to a subdomain.\r\n        //\r\n        delete opts.headers.authorization;\r\n        delete opts.headers.cookie;\r\n\r\n        if (!isSameHost) delete opts.headers.host;\r\n\r\n        opts.auth = undefined;\r\n      }\r\n    }\r\n\r\n    //\r\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\r\n    // If the `Authorization` header is set, then there is nothing to do as it\r\n    // will take precedence.\r\n    //\r\n    if (opts.auth && !options.headers.authorization) {\r\n      options.headers.authorization =\r\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\r\n    }\r\n\r\n    req = websocket._req = request(opts);\r\n\r\n    if (websocket._redirects) {\r\n      //\r\n      // Unlike what is done for the `'upgrade'` event, no early exit is\r\n      // triggered here if the user calls `websocket.close()` or\r\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\r\n      // is because the user can also call `request.destroy()` with an error\r\n      // before calling `websocket.close()` or `websocket.terminate()` and this\r\n      // would result in an error being emitted on the `request` object with no\r\n      // `'error'` event listeners attached.\r\n      //\r\n      websocket.emit('redirect', websocket.url, req);\r\n    }\r\n  } else {\r\n    req = websocket._req = request(opts);\r\n  }\r\n\r\n  if (opts.timeout) {\r\n    req.on('timeout', () => {\r\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\r\n    });\r\n  }\r\n\r\n  req.on('error', (err) => {\r\n    if (req === null || req[kAborted]) return;\r\n\r\n    req = websocket._req = null;\r\n    emitErrorAndClose(websocket, err);\r\n  });\r\n\r\n  req.on('response', (res) => {\r\n    const location = res.headers.location;\r\n    const statusCode = res.statusCode;\r\n\r\n    if (\r\n      location &&\r\n      opts.followRedirects &&\r\n      statusCode >= 300 &&\r\n      statusCode < 400\r\n    ) {\r\n      if (++websocket._redirects > opts.maxRedirects) {\r\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\r\n        return;\r\n      }\r\n\r\n      req.abort();\r\n\r\n      let addr;\r\n\r\n      try {\r\n        addr = new URL(location, address);\r\n      } catch (e) {\r\n        const err = new SyntaxError(`Invalid URL: ${location}`);\r\n        emitErrorAndClose(websocket, err);\r\n        return;\r\n      }\r\n\r\n      initAsClient(websocket, addr, protocols, options);\r\n    } else if (!websocket.emit('unexpected-response', req, res)) {\r\n      abortHandshake(\r\n        websocket,\r\n        req,\r\n        `Unexpected server response: ${res.statusCode}`\r\n      );\r\n    }\r\n  });\r\n\r\n  req.on('upgrade', (res, socket, head) => {\r\n    websocket.emit('upgrade', res);\r\n\r\n    //\r\n    // The user may have closed the connection from a listener of the\r\n    // `'upgrade'` event.\r\n    //\r\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\r\n\r\n    req = websocket._req = null;\r\n\r\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\r\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\r\n      return;\r\n    }\r\n\r\n    const digest = createHash('sha1')\r\n      .update(key + GUID)\r\n      .digest('base64');\r\n\r\n    if (res.headers['sec-websocket-accept'] !== digest) {\r\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\r\n      return;\r\n    }\r\n\r\n    const serverProt = res.headers['sec-websocket-protocol'];\r\n    let protError;\r\n\r\n    if (serverProt !== undefined) {\r\n      if (!protocolSet.size) {\r\n        protError = 'Server sent a subprotocol but none was requested';\r\n      } else if (!protocolSet.has(serverProt)) {\r\n        protError = 'Server sent an invalid subprotocol';\r\n      }\r\n    } else if (protocolSet.size) {\r\n      protError = 'Server sent no subprotocol';\r\n    }\r\n\r\n    if (protError) {\r\n      abortHandshake(websocket, socket, protError);\r\n      return;\r\n    }\r\n\r\n    if (serverProt) websocket._protocol = serverProt;\r\n\r\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\r\n\r\n    if (secWebSocketExtensions !== undefined) {\r\n      if (!perMessageDeflate) {\r\n        const message =\r\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\r\n          'was requested';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      let extensions;\r\n\r\n      try {\r\n        extensions = parse(secWebSocketExtensions);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Extensions header';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      const extensionNames = Object.keys(extensions);\r\n\r\n      if (\r\n        extensionNames.length !== 1 ||\r\n        extensionNames[0] !== PerMessageDeflate.extensionName\r\n      ) {\r\n        const message = 'Server indicated an extension that was not requested';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\r\n      } catch (err) {\r\n        const message = 'Invalid Sec-WebSocket-Extensions header';\r\n        abortHandshake(websocket, socket, message);\r\n        return;\r\n      }\r\n\r\n      websocket._extensions[PerMessageDeflate.extensionName] =\r\n        perMessageDeflate;\r\n    }\r\n\r\n    websocket.setSocket(socket, head, {\r\n      generateMask: opts.generateMask,\r\n      maxPayload: opts.maxPayload,\r\n      skipUTF8Validation: opts.skipUTF8Validation\r\n    });\r\n  });\r\n\r\n  if (opts.finishRequest) {\r\n    opts.finishRequest(req, websocket);\r\n  } else {\r\n    req.end();\r\n  }\r\n}\r\n\r\n/**\r\n * Emit the `'error'` and `'close'` events.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {Error} The error to emit\r\n * @private\r\n */\r\nfunction emitErrorAndClose(websocket, err) {\r\n  websocket._readyState = WebSocket.CLOSING;\r\n  websocket.emit('error', err);\r\n  websocket.emitClose();\r\n}\r\n\r\n/**\r\n * Create a `net.Socket` and initiate a connection.\r\n *\r\n * @param {Object} options Connection options\r\n * @return {net.Socket} The newly created socket used to start the connection\r\n * @private\r\n */\r\nfunction netConnect(options) {\r\n  options.path = options.socketPath;\r\n  return net.connect(options);\r\n}\r\n\r\n/**\r\n * Create a `tls.TLSSocket` and initiate a connection.\r\n *\r\n * @param {Object} options Connection options\r\n * @return {tls.TLSSocket} The newly created socket used to start the connection\r\n * @private\r\n */\r\nfunction tlsConnect(options) {\r\n  options.path = undefined;\r\n\r\n  if (!options.servername && options.servername !== '') {\r\n    options.servername = net.isIP(options.host) ? '' : options.host;\r\n  }\r\n\r\n  return tls.connect(options);\r\n}\r\n\r\n/**\r\n * Abort the handshake and emit an error.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\r\n *     abort or the socket to destroy\r\n * @param {String} message The error message\r\n * @private\r\n */\r\nfunction abortHandshake(websocket, stream, message) {\r\n  websocket._readyState = WebSocket.CLOSING;\r\n\r\n  const err = new Error(message);\r\n  Error.captureStackTrace(err, abortHandshake);\r\n\r\n  if (stream.setHeader) {\r\n    stream[kAborted] = true;\r\n    stream.abort();\r\n\r\n    if (stream.socket && !stream.socket.destroyed) {\r\n      //\r\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\r\n      // called after the request completed. See\r\n      // https://github.com/websockets/ws/issues/1869.\r\n      //\r\n      stream.socket.destroy();\r\n    }\r\n\r\n    process.nextTick(emitErrorAndClose, websocket, err);\r\n  } else {\r\n    stream.destroy(err);\r\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\r\n    stream.once('close', websocket.emitClose.bind(websocket));\r\n  }\r\n}\r\n\r\n/**\r\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\r\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\r\n *\r\n * @param {WebSocket} websocket The WebSocket instance\r\n * @param {*} [data] The data to send\r\n * @param {Function} [cb] Callback\r\n * @private\r\n */\r\nfunction sendAfterClose(websocket, data, cb) {\r\n  if (data) {\r\n    const length = toBuffer(data).length;\r\n\r\n    //\r\n    // The `_bufferedAmount` property is used only when the peer is a client and\r\n    // the opening handshake fails. Under these circumstances, in fact, the\r\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\r\n    // properties are set to `null`.\r\n    //\r\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\r\n    else websocket._bufferedAmount += length;\r\n  }\r\n\r\n  if (cb) {\r\n    const err = new Error(\r\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\r\n        `(${readyStates[websocket.readyState]})`\r\n    );\r\n    process.nextTick(cb, err);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'conclude'` event.\r\n *\r\n * @param {Number} code The status code\r\n * @param {Buffer} reason The reason for closing\r\n * @private\r\n */\r\nfunction receiverOnConclude(code, reason) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket._closeFrameReceived = true;\r\n  websocket._closeMessage = reason;\r\n  websocket._closeCode = code;\r\n\r\n  if (websocket._socket[kWebSocket] === undefined) return;\r\n\r\n  websocket._socket.removeListener('data', socketOnData);\r\n  process.nextTick(resume, websocket._socket);\r\n\r\n  if (code === 1005) websocket.close();\r\n  else websocket.close(code, reason);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'drain'` event.\r\n *\r\n * @private\r\n */\r\nfunction receiverOnDrain() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (!websocket.isPaused) websocket._socket.resume();\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'error'` event.\r\n *\r\n * @param {(RangeError|Error)} err The emitted error\r\n * @private\r\n */\r\nfunction receiverOnError(err) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  if (websocket._socket[kWebSocket] !== undefined) {\r\n    websocket._socket.removeListener('data', socketOnData);\r\n\r\n    //\r\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\r\n    // https://github.com/websockets/ws/issues/1940.\r\n    //\r\n    process.nextTick(resume, websocket._socket);\r\n\r\n    websocket.close(err[kStatusCode]);\r\n  }\r\n\r\n  websocket.emit('error', err);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'finish'` event.\r\n *\r\n * @private\r\n */\r\nfunction receiverOnFinish() {\r\n  this[kWebSocket].emitClose();\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'message'` event.\r\n *\r\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\r\n * @param {Boolean} isBinary Specifies whether the message is binary or not\r\n * @private\r\n */\r\nfunction receiverOnMessage(data, isBinary) {\r\n  this[kWebSocket].emit('message', data, isBinary);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'ping'` event.\r\n *\r\n * @param {Buffer} data The data included in the ping frame\r\n * @private\r\n */\r\nfunction receiverOnPing(data) {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket.pong(data, !websocket._isServer, NOOP);\r\n  websocket.emit('ping', data);\r\n}\r\n\r\n/**\r\n * The listener of the `Receiver` `'pong'` event.\r\n *\r\n * @param {Buffer} data The data included in the pong frame\r\n * @private\r\n */\r\nfunction receiverOnPong(data) {\r\n  this[kWebSocket].emit('pong', data);\r\n}\r\n\r\n/**\r\n * Resume a readable stream\r\n *\r\n * @param {Readable} stream The readable stream\r\n * @private\r\n */\r\nfunction resume(stream) {\r\n  stream.resume();\r\n}\r\n\r\n/**\r\n * The listener of the socket `'close'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnClose() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  this.removeListener('close', socketOnClose);\r\n  this.removeListener('data', socketOnData);\r\n  this.removeListener('end', socketOnEnd);\r\n\r\n  websocket._readyState = WebSocket.CLOSING;\r\n\r\n  let chunk;\r\n\r\n  //\r\n  // The close frame might not have been received or the `'end'` event emitted,\r\n  // for example, if the socket was destroyed due to an error. Ensure that the\r\n  // `receiver` stream is closed after writing any remaining buffered data to\r\n  // it. If the readable side of the socket is in flowing mode then there is no\r\n  // buffered data as everything has been already written and `readable.read()`\r\n  // will return `null`. If instead, the socket is paused, any possible buffered\r\n  // data will be read as a single chunk.\r\n  //\r\n  if (\r\n    !this._readableState.endEmitted &&\r\n    !websocket._closeFrameReceived &&\r\n    !websocket._receiver._writableState.errorEmitted &&\r\n    (chunk = websocket._socket.read()) !== null\r\n  ) {\r\n    websocket._receiver.write(chunk);\r\n  }\r\n\r\n  websocket._receiver.end();\r\n\r\n  this[kWebSocket] = undefined;\r\n\r\n  clearTimeout(websocket._closeTimer);\r\n\r\n  if (\r\n    websocket._receiver._writableState.finished ||\r\n    websocket._receiver._writableState.errorEmitted\r\n  ) {\r\n    websocket.emitClose();\r\n  } else {\r\n    websocket._receiver.on('error', receiverOnFinish);\r\n    websocket._receiver.on('finish', receiverOnFinish);\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the socket `'data'` event.\r\n *\r\n * @param {Buffer} chunk A chunk of data\r\n * @private\r\n */\r\nfunction socketOnData(chunk) {\r\n  if (!this[kWebSocket]._receiver.write(chunk)) {\r\n    this.pause();\r\n  }\r\n}\r\n\r\n/**\r\n * The listener of the socket `'end'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnEnd() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  websocket._readyState = WebSocket.CLOSING;\r\n  websocket._receiver.end();\r\n  this.end();\r\n}\r\n\r\n/**\r\n * The listener of the socket `'error'` event.\r\n *\r\n * @private\r\n */\r\nfunction socketOnError() {\r\n  const websocket = this[kWebSocket];\r\n\r\n  this.removeListener('error', socketOnError);\r\n  this.on('error', NOOP);\r\n\r\n  if (websocket) {\r\n    websocket._readyState = WebSocket.CLOSING;\r\n    this.destroy();\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@neondatabase/serverless/index.mjs":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@neondatabase/serverless/index.mjs ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ xn),\n/* harmony export */   ClientBase: () => (/* binding */ export_ClientBase),\n/* harmony export */   Connection: () => (/* binding */ export_Connection),\n/* harmony export */   DatabaseError: () => (/* binding */ export_DatabaseError),\n/* harmony export */   NeonDbError: () => (/* binding */ Ae),\n/* harmony export */   Pool: () => (/* binding */ Zs),\n/* harmony export */   Query: () => (/* binding */ export_Query),\n/* harmony export */   defaults: () => (/* binding */ export_defaults),\n/* harmony export */   neon: () => (/* binding */ Ys),\n/* harmony export */   neonConfig: () => (/* binding */ _e),\n/* harmony export */   types: () => (/* binding */ export_types)\n/* harmony export */ });\nvar Xs=Object.create;var Ie=Object.defineProperty;var eo=Object.getOwnPropertyDescriptor;var to=Object.getOwnPropertyNames;var ro=Object.getPrototypeOf,no=Object.prototype.hasOwnProperty;var io=(r,e,t)=>e in r?Ie(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):\r\nr[e]=t;var a=(r,e)=>Ie(r,\"name\",{value:e,configurable:!0});var K=(r,e)=>()=>(r&&(e=r(r=0)),e);var I=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),X=(r,e)=>{for(var t in e)\r\nIe(r,t,{get:e[t],enumerable:!0})},_n=(r,e,t,n)=>{if(e&&typeof e==\"object\"||typeof e==\r\n\"function\")for(let i of to(e))!no.call(r,i)&&i!==t&&Ie(r,i,{get:()=>e[i],enumerable:!(n=\r\neo(e,i))||n.enumerable});return r};var We=(r,e,t)=>(t=r!=null?Xs(ro(r)):{},_n(e||!r||!r.__esModule?Ie(t,\"default\",{\r\nvalue:r,enumerable:!0}):t,r)),k=r=>_n(Ie({},\"__esModule\",{value:!0}),r);var T=(r,e,t)=>(io(r,typeof e!=\"symbol\"?e+\"\":e,t),t);var In=I(it=>{\"use strict\";p();it.byteLength=oo;it.toByteArray=uo;it.fromByteArray=\r\nlo;var oe=[],ee=[],so=typeof Uint8Array<\"u\"?Uint8Array:Array,It=\"ABCDEFGHIJKLMNO\\\r\nPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(Ee=0,An=It.length;Ee<An;++Ee)\r\noe[Ee]=It[Ee],ee[It.charCodeAt(Ee)]=Ee;var Ee,An;ee[45]=62;ee[95]=63;function Cn(r){\r\nvar e=r.length;if(e%4>0)throw new Error(\"Invalid string. Length must be a multip\\\r\nle of 4\");var t=r.indexOf(\"=\");t===-1&&(t=e);var n=t===e?0:4-t%4;return[t,n]}a(Cn,\r\n\"getLens\");function oo(r){var e=Cn(r),t=e[0],n=e[1];return(t+n)*3/4-n}a(oo,\"byte\\\r\nLength\");function ao(r,e,t){return(e+t)*3/4-t}a(ao,\"_byteLength\");function uo(r){\r\nvar e,t=Cn(r),n=t[0],i=t[1],s=new so(ao(r,n,i)),o=0,u=i>0?n-4:n,c;for(c=0;c<u;c+=\r\n4)e=ee[r.charCodeAt(c)]<<18|ee[r.charCodeAt(c+1)]<<12|ee[r.charCodeAt(c+2)]<<6|ee[r.\r\ncharCodeAt(c+3)],s[o++]=e>>16&255,s[o++]=e>>8&255,s[o++]=e&255;return i===2&&(e=\r\nee[r.charCodeAt(c)]<<2|ee[r.charCodeAt(c+1)]>>4,s[o++]=e&255),i===1&&(e=ee[r.charCodeAt(\r\nc)]<<10|ee[r.charCodeAt(c+1)]<<4|ee[r.charCodeAt(c+2)]>>2,s[o++]=e>>8&255,s[o++]=\r\ne&255),s}a(uo,\"toByteArray\");function co(r){return oe[r>>18&63]+oe[r>>12&63]+oe[r>>\r\n6&63]+oe[r&63]}a(co,\"tripletToBase64\");function ho(r,e,t){for(var n,i=[],s=e;s<t;s+=\r\n3)n=(r[s]<<16&16711680)+(r[s+1]<<8&65280)+(r[s+2]&255),i.push(co(n));return i.join(\r\n\"\")}a(ho,\"encodeChunk\");function lo(r){for(var e,t=r.length,n=t%3,i=[],s=16383,o=0,\r\nu=t-n;o<u;o+=s)i.push(ho(r,o,o+s>u?u:o+s));return n===1?(e=r[t-1],i.push(oe[e>>2]+\r\noe[e<<4&63]+\"==\")):n===2&&(e=(r[t-2]<<8)+r[t-1],i.push(oe[e>>10]+oe[e>>4&63]+oe[e<<\r\n2&63]+\"=\")),i.join(\"\")}a(lo,\"fromByteArray\")});var Tn=I(Tt=>{p();Tt.read=function(r,e,t,n,i){var s,o,u=i*8-n-1,c=(1<<u)-1,h=c>>\r\n1,l=-7,y=t?i-1:0,E=t?-1:1,_=r[e+y];for(y+=E,s=_&(1<<-l)-1,_>>=-l,l+=u;l>0;s=s*256+\r\nr[e+y],y+=E,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=n;l>0;o=o*256+r[e+y],y+=E,l-=8);if(s===\r\n0)s=1-h;else{if(s===c)return o?NaN:(_?-1:1)*(1/0);o=o+Math.pow(2,n),s=s-h}return(_?\r\n-1:1)*o*Math.pow(2,s-n)};Tt.write=function(r,e,t,n,i,s){var o,u,c,h=s*8-i-1,l=(1<<\r\nh)-1,y=l>>1,E=i===23?Math.pow(2,-24)-Math.pow(2,-77):0,_=n?0:s-1,P=n?1:-1,N=e<0||\r\ne===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,o=l):(o=Math.\r\nfloor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-o))<1&&(o--,c*=2),o+y>=1?e+=E/c:e+=\r\nE*Math.pow(2,1-y),e*c>=2&&(o++,c/=2),o+y>=l?(u=0,o=l):o+y>=1?(u=(e*c-1)*Math.pow(\r\n2,i),o=o+y):(u=e*Math.pow(2,y-1)*Math.pow(2,i),o=0));i>=8;r[t+_]=u&255,_+=P,u/=256,\r\ni-=8);for(o=o<<i|u,h+=i;h>0;r[t+_]=o&255,_+=P,o/=256,h-=8);r[t+_-P]|=N*128}});var Gn=I(Le=>{\"use strict\";p();var Pt=In(),Pe=Tn(),Pn=typeof Symbol==\"function\"&&\r\ntypeof Symbol.for==\"function\"?Symbol.for(\"nodejs.util.inspect.custom\"):null;Le.Buffer=\r\nf;Le.SlowBuffer=wo;Le.INSPECT_MAX_BYTES=50;var st=2147483647;Le.kMaxLength=st;f.\r\nTYPED_ARRAY_SUPPORT=fo();!f.TYPED_ARRAY_SUPPORT&&typeof console<\"u\"&&typeof console.\r\nerror==\"function\"&&console.error(\"This browser lacks typed array (Uint8Array) su\\\r\npport which is required by `buffer` v5.x. Use `buffer` v4.x if you require old b\\\r\nrowser support.\");function fo(){try{let r=new Uint8Array(1),e={foo:function(){return 42}};\r\nreturn Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(r,e),\r\nr.foo()===42}catch{return!1}}a(fo,\"typedArraySupport\");Object.defineProperty(f.prototype,\r\n\"parent\",{enumerable:!0,get:function(){if(f.isBuffer(this))return this.buffer}});\r\nObject.defineProperty(f.prototype,\"offset\",{enumerable:!0,get:function(){if(f.isBuffer(\r\nthis))return this.byteOffset}});function le(r){if(r>st)throw new RangeError('The\\\r\n value \"'+r+'\" is invalid for option \"size\"');let e=new Uint8Array(r);return Object.\r\nsetPrototypeOf(e,f.prototype),e}a(le,\"createBuffer\");function f(r,e,t){if(typeof r==\r\n\"number\"){if(typeof e==\"string\")throw new TypeError('The \"string\" argument must \\\r\nbe of type string. Received type number');return Ft(r)}return Fn(r,e,t)}a(f,\"Buf\\\r\nfer\");f.poolSize=8192;function Fn(r,e,t){if(typeof r==\"string\")return yo(r,e);if(ArrayBuffer.\r\nisView(r))return mo(r);if(r==null)throw new TypeError(\"The first argument must b\\\r\ne one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received\\\r\n type \"+typeof r);if(ae(r,ArrayBuffer)||r&&ae(r.buffer,ArrayBuffer)||typeof SharedArrayBuffer<\r\n\"u\"&&(ae(r,SharedArrayBuffer)||r&&ae(r.buffer,SharedArrayBuffer)))return Lt(r,e,\r\nt);if(typeof r==\"number\")throw new TypeError('The \"value\" argument must not be o\\\r\nf type number. Received type number');let n=r.valueOf&&r.valueOf();if(n!=null&&n!==\r\nr)return f.from(n,e,t);let i=go(r);if(i)return i;if(typeof Symbol<\"u\"&&Symbol.toPrimitive!=\r\nnull&&typeof r[Symbol.toPrimitive]==\"function\")return f.from(r[Symbol.toPrimitive](\r\n\"string\"),e,t);throw new TypeError(\"The first argument must be one of type strin\\\r\ng, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof r)}a(\r\nFn,\"from\");f.from=function(r,e,t){return Fn(r,e,t)};Object.setPrototypeOf(f.prototype,\r\nUint8Array.prototype);Object.setPrototypeOf(f,Uint8Array);function Mn(r){if(typeof r!=\r\n\"number\")throw new TypeError('\"size\" argument must be of type number');if(r<0)throw new RangeError(\r\n'The value \"'+r+'\" is invalid for option \"size\"')}a(Mn,\"assertSize\");function po(r,e,t){\r\nreturn Mn(r),r<=0?le(r):e!==void 0?typeof t==\"string\"?le(r).fill(e,t):le(r).fill(\r\ne):le(r)}a(po,\"alloc\");f.alloc=function(r,e,t){return po(r,e,t)};function Ft(r){\r\nreturn Mn(r),le(r<0?0:Mt(r)|0)}a(Ft,\"allocUnsafe\");f.allocUnsafe=function(r){return Ft(\r\nr)};f.allocUnsafeSlow=function(r){return Ft(r)};function yo(r,e){if((typeof e!=\"\\\r\nstring\"||e===\"\")&&(e=\"utf8\"),!f.isEncoding(e))throw new TypeError(\"Unknown encod\\\r\ning: \"+e);let t=Dn(r,e)|0,n=le(t),i=n.write(r,e);return i!==t&&(n=n.slice(0,i)),\r\nn}a(yo,\"fromString\");function Bt(r){let e=r.length<0?0:Mt(r.length)|0,t=le(e);for(let n=0;n<\r\ne;n+=1)t[n]=r[n]&255;return t}a(Bt,\"fromArrayLike\");function mo(r){if(ae(r,Uint8Array)){\r\nlet e=new Uint8Array(r);return Lt(e.buffer,e.byteOffset,e.byteLength)}return Bt(\r\nr)}a(mo,\"fromArrayView\");function Lt(r,e,t){if(e<0||r.byteLength<e)throw new RangeError(\r\n'\"offset\" is outside of buffer bounds');if(r.byteLength<e+(t||0))throw new RangeError(\r\n'\"length\" is outside of buffer bounds');let n;return e===void 0&&t===void 0?n=new Uint8Array(\r\nr):t===void 0?n=new Uint8Array(r,e):n=new Uint8Array(r,e,t),Object.setPrototypeOf(\r\nn,f.prototype),n}a(Lt,\"fromArrayBuffer\");function go(r){if(f.isBuffer(r)){let e=Mt(\r\nr.length)|0,t=le(e);return t.length===0||r.copy(t,0,0,e),t}if(r.length!==void 0)\r\nreturn typeof r.length!=\"number\"||Ot(r.length)?le(0):Bt(r);if(r.type===\"Buffer\"&&\r\nArray.isArray(r.data))return Bt(r.data)}a(go,\"fromObject\");function Mt(r){if(r>=\r\nst)throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+\r\nst.toString(16)+\" bytes\");return r|0}a(Mt,\"checked\");function wo(r){return+r!=r&&\r\n(r=0),f.alloc(+r)}a(wo,\"SlowBuffer\");f.isBuffer=a(function(e){return e!=null&&e.\r\n_isBuffer===!0&&e!==f.prototype},\"isBuffer\");f.compare=a(function(e,t){if(ae(e,Uint8Array)&&\r\n(e=f.from(e,e.offset,e.byteLength)),ae(t,Uint8Array)&&(t=f.from(t,t.offset,t.byteLength)),\r\n!f.isBuffer(e)||!f.isBuffer(t))throw new TypeError('The \"buf1\", \"buf2\" arguments\\\r\n must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,i=t.\r\nlength;for(let s=0,o=Math.min(n,i);s<o;++s)if(e[s]!==t[s]){n=e[s],i=t[s];break}return n<\r\ni?-1:i<n?1:0},\"compare\");f.isEncoding=a(function(e){switch(String(e).toLowerCase()){case\"\\\r\nhex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"\\\r\nucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},\"isEn\\\r\ncoding\");f.concat=a(function(e,t){if(!Array.isArray(e))throw new TypeError('\"lis\\\r\nt\" argument must be an Array of Buffers');if(e.length===0)return f.alloc(0);let n;\r\nif(t===void 0)for(t=0,n=0;n<e.length;++n)t+=e[n].length;let i=f.allocUnsafe(t),s=0;\r\nfor(n=0;n<e.length;++n){let o=e[n];if(ae(o,Uint8Array))s+o.length>i.length?(f.isBuffer(\r\no)||(o=f.from(o)),o.copy(i,s)):Uint8Array.prototype.set.call(i,o,s);else if(f.isBuffer(\r\no))o.copy(i,s);else throw new TypeError('\"list\" argument must be an Array of Buf\\\r\nfers');s+=o.length}return i},\"concat\");function Dn(r,e){if(f.isBuffer(r))return r.\r\nlength;if(ArrayBuffer.isView(r)||ae(r,ArrayBuffer))return r.byteLength;if(typeof r!=\r\n\"string\")throw new TypeError('The \"string\" argument must be one of type string, \\\r\nBuffer, or ArrayBuffer. Received type '+typeof r);let t=r.length,n=arguments.length>\r\n2&&arguments[2]===!0;if(!n&&t===0)return 0;let i=!1;for(;;)switch(e){case\"ascii\":case\"\\\r\nlatin1\":case\"binary\":return t;case\"utf8\":case\"utf-8\":return Rt(r).length;case\"uc\\\r\ns2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return t*2;case\"hex\":return t>>>1;case\"\\\r\nbase64\":return Hn(r).length;default:if(i)return n?-1:Rt(r).length;e=(\"\"+e).toLowerCase(),\r\ni=!0}}a(Dn,\"byteLength\");f.byteLength=Dn;function bo(r,e,t){let n=!1;if((e===void 0||\r\ne<0)&&(e=0),e>this.length||((t===void 0||t>this.length)&&(t=this.length),t<=0)||\r\n(t>>>=0,e>>>=0,t<=e))return\"\";for(r||(r=\"utf8\");;)switch(r){case\"hex\":return Po(\r\nthis,e,t);case\"utf8\":case\"utf-8\":return kn(this,e,t);case\"ascii\":return Io(this,\r\ne,t);case\"latin1\":case\"binary\":return To(this,e,t);case\"base64\":return Ao(this,e,\r\nt);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return Bo(this,e,t);default:\r\nif(n)throw new TypeError(\"Unknown encoding: \"+r);r=(r+\"\").toLowerCase(),n=!0}}a(\r\nbo,\"slowToString\");f.prototype._isBuffer=!0;function ve(r,e,t){let n=r[e];r[e]=r[t],\r\nr[t]=n}a(ve,\"swap\");f.prototype.swap16=a(function(){let e=this.length;if(e%2!==0)\r\nthrow new RangeError(\"Buffer size must be a multiple of 16-bits\");for(let t=0;t<\r\ne;t+=2)ve(this,t,t+1);return this},\"swap16\");f.prototype.swap32=a(function(){let e=this.\r\nlength;if(e%4!==0)throw new RangeError(\"Buffer size must be a multiple of 32-bit\\\r\ns\");for(let t=0;t<e;t+=4)ve(this,t,t+3),ve(this,t+1,t+2);return this},\"swap32\");\r\nf.prototype.swap64=a(function(){let e=this.length;if(e%8!==0)throw new RangeError(\r\n\"Buffer size must be a multiple of 64-bits\");for(let t=0;t<e;t+=8)ve(this,t,t+7),\r\nve(this,t+1,t+6),ve(this,t+2,t+5),ve(this,t+3,t+4);return this},\"swap64\");f.prototype.\r\ntoString=a(function(){let e=this.length;return e===0?\"\":arguments.length===0?kn(\r\nthis,0,e):bo.apply(this,arguments)},\"toString\");f.prototype.toLocaleString=f.prototype.\r\ntoString;f.prototype.equals=a(function(e){if(!f.isBuffer(e))throw new TypeError(\r\n\"Argument must be a Buffer\");return this===e?!0:f.compare(this,e)===0},\"equals\");\r\nf.prototype.inspect=a(function(){let e=\"\",t=Le.INSPECT_MAX_BYTES;return e=this.toString(\r\n\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim(),this.length>t&&(e+=\" ... \"),\"<Buffer \"+\r\ne+\">\"},\"inspect\");Pn&&(f.prototype[Pn]=f.prototype.inspect);f.prototype.compare=\r\na(function(e,t,n,i,s){if(ae(e,Uint8Array)&&(e=f.from(e,e.offset,e.byteLength)),!f.\r\nisBuffer(e))throw new TypeError('The \"target\" argument must be one of type Buffe\\\r\nr or Uint8Array. Received type '+typeof e);if(t===void 0&&(t=0),n===void 0&&(n=e?\r\ne.length:0),i===void 0&&(i=0),s===void 0&&(s=this.length),t<0||n>e.length||i<0||\r\ns>this.length)throw new RangeError(\"out of range index\");if(i>=s&&t>=n)return 0;\r\nif(i>=s)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,i>>>=0,s>>>=0,this===e)return 0;\r\nlet o=s-i,u=n-t,c=Math.min(o,u),h=this.slice(i,s),l=e.slice(t,n);for(let y=0;y<c;++y)\r\nif(h[y]!==l[y]){o=h[y],u=l[y];break}return o<u?-1:u<o?1:0},\"compare\");function On(r,e,t,n,i){\r\nif(r.length===0)return-1;if(typeof t==\"string\"?(n=t,t=0):t>2147483647?t=2147483647:\r\nt<-2147483648&&(t=-2147483648),t=+t,Ot(t)&&(t=i?0:r.length-1),t<0&&(t=r.length+t),\r\nt>=r.length){if(i)return-1;t=r.length-1}else if(t<0)if(i)t=0;else return-1;if(typeof e==\r\n\"string\"&&(e=f.from(e,n)),f.isBuffer(e))return e.length===0?-1:Bn(r,e,t,n,i);if(typeof e==\r\n\"number\")return e=e&255,typeof Uint8Array.prototype.indexOf==\"function\"?i?Uint8Array.\r\nprototype.indexOf.call(r,e,t):Uint8Array.prototype.lastIndexOf.call(r,e,t):Bn(r,\r\n[e],t,n,i);throw new TypeError(\"val must be string, number or Buffer\")}a(On,\"bid\\\r\nirectionalIndexOf\");function Bn(r,e,t,n,i){let s=1,o=r.length,u=e.length;if(n!==\r\nvoid 0&&(n=String(n).toLowerCase(),n===\"ucs2\"||n===\"ucs-2\"||n===\"utf16le\"||n===\"\\\r\nutf-16le\")){if(r.length<2||e.length<2)return-1;s=2,o/=2,u/=2,t/=2}function c(l,y){\r\nreturn s===1?l[y]:l.readUInt16BE(y*s)}a(c,\"read\");let h;if(i){let l=-1;for(h=t;h<\r\no;h++)if(c(r,h)===c(e,l===-1?0:h-l)){if(l===-1&&(l=h),h-l+1===u)return l*s}else l!==\r\n-1&&(h-=h-l),l=-1}else for(t+u>o&&(t=o-u),h=t;h>=0;h--){let l=!0;for(let y=0;y<u;y++)\r\nif(c(r,h+y)!==c(e,y)){l=!1;break}if(l)return h}return-1}a(Bn,\"arrayIndexOf\");f.prototype.\r\nincludes=a(function(e,t,n){return this.indexOf(e,t,n)!==-1},\"includes\");f.prototype.\r\nindexOf=a(function(e,t,n){return On(this,e,t,n,!0)},\"indexOf\");f.prototype.lastIndexOf=\r\na(function(e,t,n){return On(this,e,t,n,!1)},\"lastIndexOf\");function So(r,e,t,n){\r\nt=Number(t)||0;let i=r.length-t;n?(n=Number(n),n>i&&(n=i)):n=i;let s=e.length;n>\r\ns/2&&(n=s/2);let o;for(o=0;o<n;++o){let u=parseInt(e.substr(o*2,2),16);if(Ot(u))\r\nreturn o;r[t+o]=u}return o}a(So,\"hexWrite\");function xo(r,e,t,n){return ot(Rt(e,\r\nr.length-t),r,t,n)}a(xo,\"utf8Write\");function Eo(r,e,t,n){return ot(Mo(e),r,t,n)}\r\na(Eo,\"asciiWrite\");function vo(r,e,t,n){return ot(Hn(e),r,t,n)}a(vo,\"base64Write\");\r\nfunction _o(r,e,t,n){return ot(Do(e,r.length-t),r,t,n)}a(_o,\"ucs2Write\");f.prototype.\r\nwrite=a(function(e,t,n,i){if(t===void 0)i=\"utf8\",n=this.length,t=0;else if(n===void 0&&\r\ntypeof t==\"string\")i=t,n=this.length,t=0;else if(isFinite(t))t=t>>>0,isFinite(n)?\r\n(n=n>>>0,i===void 0&&(i=\"utf8\")):(i=n,n=void 0);else throw new Error(\"Buffer.wri\\\r\nte(string, encoding, offset[, length]) is no longer supported\");let s=this.length-\r\nt;if((n===void 0||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError(\r\n\"Attempt to write outside buffer bounds\");i||(i=\"utf8\");let o=!1;for(;;)switch(i){case\"\\\r\nhex\":return So(this,e,t,n);case\"utf8\":case\"utf-8\":return xo(this,e,t,n);case\"asc\\\r\nii\":case\"latin1\":case\"binary\":return Eo(this,e,t,n);case\"base64\":return vo(this,\r\ne,t,n);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return _o(this,e,t,n);default:\r\nif(o)throw new TypeError(\"Unknown encoding: \"+i);i=(\"\"+i).toLowerCase(),o=!0}},\"\\\r\nwrite\");f.prototype.toJSON=a(function(){return{type:\"Buffer\",data:Array.prototype.\r\nslice.call(this._arr||this,0)}},\"toJSON\");function Ao(r,e,t){return e===0&&t===r.\r\nlength?Pt.fromByteArray(r):Pt.fromByteArray(r.slice(e,t))}a(Ao,\"base64Slice\");function kn(r,e,t){\r\nt=Math.min(r.length,t);let n=[],i=e;for(;i<t;){let s=r[i],o=null,u=s>239?4:s>223?\r\n3:s>191?2:1;if(i+u<=t){let c,h,l,y;switch(u){case 1:s<128&&(o=s);break;case 2:c=\r\nr[i+1],(c&192)===128&&(y=(s&31)<<6|c&63,y>127&&(o=y));break;case 3:c=r[i+1],h=r[i+\r\n2],(c&192)===128&&(h&192)===128&&(y=(s&15)<<12|(c&63)<<6|h&63,y>2047&&(y<55296||\r\ny>57343)&&(o=y));break;case 4:c=r[i+1],h=r[i+2],l=r[i+3],(c&192)===128&&(h&192)===\r\n128&&(l&192)===128&&(y=(s&15)<<18|(c&63)<<12|(h&63)<<6|l&63,y>65535&&y<1114112&&\r\n(o=y))}}o===null?(o=65533,u=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|\r\no&1023),n.push(o),i+=u}return Co(n)}a(kn,\"utf8Slice\");var Ln=4096;function Co(r){\r\nlet e=r.length;if(e<=Ln)return String.fromCharCode.apply(String,r);let t=\"\",n=0;\r\nfor(;n<e;)t+=String.fromCharCode.apply(String,r.slice(n,n+=Ln));return t}a(Co,\"d\\\r\necodeCodePointsArray\");function Io(r,e,t){let n=\"\";t=Math.min(r.length,t);for(let i=e;i<\r\nt;++i)n+=String.fromCharCode(r[i]&127);return n}a(Io,\"asciiSlice\");function To(r,e,t){\r\nlet n=\"\";t=Math.min(r.length,t);for(let i=e;i<t;++i)n+=String.fromCharCode(r[i]);\r\nreturn n}a(To,\"latin1Slice\");function Po(r,e,t){let n=r.length;(!e||e<0)&&(e=0),\r\n(!t||t<0||t>n)&&(t=n);let i=\"\";for(let s=e;s<t;++s)i+=Oo[r[s]];return i}a(Po,\"he\\\r\nxSlice\");function Bo(r,e,t){let n=r.slice(e,t),i=\"\";for(let s=0;s<n.length-1;s+=\r\n2)i+=String.fromCharCode(n[s]+n[s+1]*256);return i}a(Bo,\"utf16leSlice\");f.prototype.\r\nslice=a(function(e,t){let n=this.length;e=~~e,t=t===void 0?n:~~t,e<0?(e+=n,e<0&&\r\n(e=0)):e>n&&(e=n),t<0?(t+=n,t<0&&(t=0)):t>n&&(t=n),t<e&&(t=e);let i=this.subarray(\r\ne,t);return Object.setPrototypeOf(i,f.prototype),i},\"slice\");function U(r,e,t){if(r%\r\n1!==0||r<0)throw new RangeError(\"offset is not uint\");if(r+e>t)throw new RangeError(\r\n\"Trying to access beyond buffer length\")}a(U,\"checkOffset\");f.prototype.readUintLE=\r\nf.prototype.readUIntLE=a(function(e,t,n){e=e>>>0,t=t>>>0,n||U(e,t,this.length);let i=this[e],\r\ns=1,o=0;for(;++o<t&&(s*=256);)i+=this[e+o]*s;return i},\"readUIntLE\");f.prototype.\r\nreadUintBE=f.prototype.readUIntBE=a(function(e,t,n){e=e>>>0,t=t>>>0,n||U(e,t,this.\r\nlength);let i=this[e+--t],s=1;for(;t>0&&(s*=256);)i+=this[e+--t]*s;return i},\"re\\\r\nadUIntBE\");f.prototype.readUint8=f.prototype.readUInt8=a(function(e,t){return e=\r\ne>>>0,t||U(e,1,this.length),this[e]},\"readUInt8\");f.prototype.readUint16LE=f.prototype.\r\nreadUInt16LE=a(function(e,t){return e=e>>>0,t||U(e,2,this.length),this[e]|this[e+\r\n1]<<8},\"readUInt16LE\");f.prototype.readUint16BE=f.prototype.readUInt16BE=a(function(e,t){\r\nreturn e=e>>>0,t||U(e,2,this.length),this[e]<<8|this[e+1]},\"readUInt16BE\");f.prototype.\r\nreadUint32LE=f.prototype.readUInt32LE=a(function(e,t){return e=e>>>0,t||U(e,4,this.\r\nlength),(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216},\"readUInt32LE\");\r\nf.prototype.readUint32BE=f.prototype.readUInt32BE=a(function(e,t){return e=e>>>0,\r\nt||U(e,4,this.length),this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])},\"\\\r\nreadUInt32BE\");f.prototype.readBigUInt64LE=me(a(function(e){e=e>>>0,Be(e,\"offset\");\r\nlet t=this[e],n=this[e+7];(t===void 0||n===void 0)&&je(e,this.length-8);let i=t+\r\nthis[++e]*2**8+this[++e]*2**16+this[++e]*2**24,s=this[++e]+this[++e]*2**8+this[++e]*\r\n2**16+n*2**24;return BigInt(i)+(BigInt(s)<<BigInt(32))},\"readBigUInt64LE\"));f.prototype.\r\nreadBigUInt64BE=me(a(function(e){e=e>>>0,Be(e,\"offset\");let t=this[e],n=this[e+7];\r\n(t===void 0||n===void 0)&&je(e,this.length-8);let i=t*2**24+this[++e]*2**16+this[++e]*\r\n2**8+this[++e],s=this[++e]*2**24+this[++e]*2**16+this[++e]*2**8+n;return(BigInt(\r\ni)<<BigInt(32))+BigInt(s)},\"readBigUInt64BE\"));f.prototype.readIntLE=a(function(e,t,n){\r\ne=e>>>0,t=t>>>0,n||U(e,t,this.length);let i=this[e],s=1,o=0;for(;++o<t&&(s*=256);)\r\ni+=this[e+o]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*t)),i},\"readIntLE\");f.prototype.\r\nreadIntBE=a(function(e,t,n){e=e>>>0,t=t>>>0,n||U(e,t,this.length);let i=t,s=1,o=this[e+\r\n--i];for(;i>0&&(s*=256);)o+=this[e+--i]*s;return s*=128,o>=s&&(o-=Math.pow(2,8*t)),\r\no},\"readIntBE\");f.prototype.readInt8=a(function(e,t){return e=e>>>0,t||U(e,1,this.\r\nlength),this[e]&128?(255-this[e]+1)*-1:this[e]},\"readInt8\");f.prototype.readInt16LE=\r\na(function(e,t){e=e>>>0,t||U(e,2,this.length);let n=this[e]|this[e+1]<<8;return n&\r\n32768?n|4294901760:n},\"readInt16LE\");f.prototype.readInt16BE=a(function(e,t){e=e>>>\r\n0,t||U(e,2,this.length);let n=this[e+1]|this[e]<<8;return n&32768?n|4294901760:n},\r\n\"readInt16BE\");f.prototype.readInt32LE=a(function(e,t){return e=e>>>0,t||U(e,4,this.\r\nlength),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},\"readInt32LE\");f.prototype.\r\nreadInt32BE=a(function(e,t){return e=e>>>0,t||U(e,4,this.length),this[e]<<24|this[e+\r\n1]<<16|this[e+2]<<8|this[e+3]},\"readInt32BE\");f.prototype.readBigInt64LE=me(a(function(e){\r\ne=e>>>0,Be(e,\"offset\");let t=this[e],n=this[e+7];(t===void 0||n===void 0)&&je(e,\r\nthis.length-8);let i=this[e+4]+this[e+5]*2**8+this[e+6]*2**16+(n<<24);return(BigInt(\r\ni)<<BigInt(32))+BigInt(t+this[++e]*2**8+this[++e]*2**16+this[++e]*2**24)},\"readB\\\r\nigInt64LE\"));f.prototype.readBigInt64BE=me(a(function(e){e=e>>>0,Be(e,\"offset\");\r\nlet t=this[e],n=this[e+7];(t===void 0||n===void 0)&&je(e,this.length-8);let i=(t<<\r\n24)+this[++e]*2**16+this[++e]*2**8+this[++e];return(BigInt(i)<<BigInt(32))+BigInt(\r\nthis[++e]*2**24+this[++e]*2**16+this[++e]*2**8+n)},\"readBigInt64BE\"));f.prototype.\r\nreadFloatLE=a(function(e,t){return e=e>>>0,t||U(e,4,this.length),Pe.read(this,e,\r\n!0,23,4)},\"readFloatLE\");f.prototype.readFloatBE=a(function(e,t){return e=e>>>0,\r\nt||U(e,4,this.length),Pe.read(this,e,!1,23,4)},\"readFloatBE\");f.prototype.readDoubleLE=\r\na(function(e,t){return e=e>>>0,t||U(e,8,this.length),Pe.read(this,e,!0,52,8)},\"r\\\r\neadDoubleLE\");f.prototype.readDoubleBE=a(function(e,t){return e=e>>>0,t||U(e,8,this.\r\nlength),Pe.read(this,e,!1,52,8)},\"readDoubleBE\");function z(r,e,t,n,i,s){if(!f.isBuffer(\r\nr))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(e>i||e<\r\ns)throw new RangeError('\"value\" argument is out of bounds');if(t+n>r.length)throw new RangeError(\r\n\"Index out of range\")}a(z,\"checkInt\");f.prototype.writeUintLE=f.prototype.writeUIntLE=\r\na(function(e,t,n,i){if(e=+e,t=t>>>0,n=n>>>0,!i){let u=Math.pow(2,8*n)-1;z(this,e,\r\nt,n,u,0)}let s=1,o=0;for(this[t]=e&255;++o<n&&(s*=256);)this[t+o]=e/s&255;return t+\r\nn},\"writeUIntLE\");f.prototype.writeUintBE=f.prototype.writeUIntBE=a(function(e,t,n,i){\r\nif(e=+e,t=t>>>0,n=n>>>0,!i){let u=Math.pow(2,8*n)-1;z(this,e,t,n,u,0)}let s=n-1,\r\no=1;for(this[t+s]=e&255;--s>=0&&(o*=256);)this[t+s]=e/o&255;return t+n},\"writeUI\\\r\nntBE\");f.prototype.writeUint8=f.prototype.writeUInt8=a(function(e,t,n){return e=\r\n+e,t=t>>>0,n||z(this,e,t,1,255,0),this[t]=e&255,t+1},\"writeUInt8\");f.prototype.writeUint16LE=\r\nf.prototype.writeUInt16LE=a(function(e,t,n){return e=+e,t=t>>>0,n||z(this,e,t,2,\r\n65535,0),this[t]=e&255,this[t+1]=e>>>8,t+2},\"writeUInt16LE\");f.prototype.writeUint16BE=\r\nf.prototype.writeUInt16BE=a(function(e,t,n){return e=+e,t=t>>>0,n||z(this,e,t,2,\r\n65535,0),this[t]=e>>>8,this[t+1]=e&255,t+2},\"writeUInt16BE\");f.prototype.writeUint32LE=\r\nf.prototype.writeUInt32LE=a(function(e,t,n){return e=+e,t=t>>>0,n||z(this,e,t,4,\r\n4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=e&255,t+\r\n4},\"writeUInt32LE\");f.prototype.writeUint32BE=f.prototype.writeUInt32BE=a(function(e,t,n){\r\nreturn e=+e,t=t>>>0,n||z(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,\r\nthis[t+2]=e>>>8,this[t+3]=e&255,t+4},\"writeUInt32BE\");function Un(r,e,t,n,i){jn(\r\ne,n,i,r,t,7);let s=Number(e&BigInt(4294967295));r[t++]=s,s=s>>8,r[t++]=s,s=s>>8,\r\nr[t++]=s,s=s>>8,r[t++]=s;let o=Number(e>>BigInt(32)&BigInt(4294967295));return r[t++]=\r\no,o=o>>8,r[t++]=o,o=o>>8,r[t++]=o,o=o>>8,r[t++]=o,t}a(Un,\"wrtBigUInt64LE\");function qn(r,e,t,n,i){\r\njn(e,n,i,r,t,7);let s=Number(e&BigInt(4294967295));r[t+7]=s,s=s>>8,r[t+6]=s,s=s>>\r\n8,r[t+5]=s,s=s>>8,r[t+4]=s;let o=Number(e>>BigInt(32)&BigInt(4294967295));return r[t+\r\n3]=o,o=o>>8,r[t+2]=o,o=o>>8,r[t+1]=o,o=o>>8,r[t]=o,t+8}a(qn,\"wrtBigUInt64BE\");f.\r\nprototype.writeBigUInt64LE=me(a(function(e,t=0){return Un(this,e,t,BigInt(0),BigInt(\r\n\"0xffffffffffffffff\"))},\"writeBigUInt64LE\"));f.prototype.writeBigUInt64BE=me(a(function(e,t=0){\r\nreturn qn(this,e,t,BigInt(0),BigInt(\"0xffffffffffffffff\"))},\"writeBigUInt64BE\"));\r\nf.prototype.writeIntLE=a(function(e,t,n,i){if(e=+e,t=t>>>0,!i){let c=Math.pow(2,\r\n8*n-1);z(this,e,t,n,c-1,-c)}let s=0,o=1,u=0;for(this[t]=e&255;++s<n&&(o*=256);)e<\r\n0&&u===0&&this[t+s-1]!==0&&(u=1),this[t+s]=(e/o>>0)-u&255;return t+n},\"writeIntL\\\r\nE\");f.prototype.writeIntBE=a(function(e,t,n,i){if(e=+e,t=t>>>0,!i){let c=Math.pow(\r\n2,8*n-1);z(this,e,t,n,c-1,-c)}let s=n-1,o=1,u=0;for(this[t+s]=e&255;--s>=0&&(o*=\r\n256);)e<0&&u===0&&this[t+s+1]!==0&&(u=1),this[t+s]=(e/o>>0)-u&255;return t+n},\"w\\\r\nriteIntBE\");f.prototype.writeInt8=a(function(e,t,n){return e=+e,t=t>>>0,n||z(this,\r\ne,t,1,127,-128),e<0&&(e=255+e+1),this[t]=e&255,t+1},\"writeInt8\");f.prototype.writeInt16LE=\r\na(function(e,t,n){return e=+e,t=t>>>0,n||z(this,e,t,2,32767,-32768),this[t]=e&255,\r\nthis[t+1]=e>>>8,t+2},\"writeInt16LE\");f.prototype.writeInt16BE=a(function(e,t,n){\r\nreturn e=+e,t=t>>>0,n||z(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=e&255,\r\nt+2},\"writeInt16BE\");f.prototype.writeInt32LE=a(function(e,t,n){return e=+e,t=t>>>\r\n0,n||z(this,e,t,4,2147483647,-2147483648),this[t]=e&255,this[t+1]=e>>>8,this[t+2]=\r\ne>>>16,this[t+3]=e>>>24,t+4},\"writeInt32LE\");f.prototype.writeInt32BE=a(function(e,t,n){\r\nreturn e=+e,t=t>>>0,n||z(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+\r\n1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=e&255,t+4},\"writeIn\\\r\nt32BE\");f.prototype.writeBigInt64LE=me(a(function(e,t=0){return Un(this,e,t,-BigInt(\r\n\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))},\"writeBigInt64LE\"));f.prototype.\r\nwriteBigInt64BE=me(a(function(e,t=0){return qn(this,e,t,-BigInt(\"0x8000000000000\\\r\n000\"),BigInt(\"0x7fffffffffffffff\"))},\"writeBigInt64BE\"));function Nn(r,e,t,n,i,s){\r\nif(t+n>r.length)throw new RangeError(\"Index out of range\");if(t<0)throw new RangeError(\r\n\"Index out of range\")}a(Nn,\"checkIEEE754\");function Qn(r,e,t,n,i){return e=+e,t=\r\nt>>>0,i||Nn(r,e,t,4,34028234663852886e22,-34028234663852886e22),Pe.write(r,e,t,n,\r\n23,4),t+4}a(Qn,\"writeFloat\");f.prototype.writeFloatLE=a(function(e,t,n){return Qn(\r\nthis,e,t,!0,n)},\"writeFloatLE\");f.prototype.writeFloatBE=a(function(e,t,n){return Qn(\r\nthis,e,t,!1,n)},\"writeFloatBE\");function Wn(r,e,t,n,i){return e=+e,t=t>>>0,i||Nn(\r\nr,e,t,8,17976931348623157e292,-17976931348623157e292),Pe.write(r,e,t,n,52,8),t+8}\r\na(Wn,\"writeDouble\");f.prototype.writeDoubleLE=a(function(e,t,n){return Wn(this,e,\r\nt,!0,n)},\"writeDoubleLE\");f.prototype.writeDoubleBE=a(function(e,t,n){return Wn(\r\nthis,e,t,!1,n)},\"writeDoubleBE\");f.prototype.copy=a(function(e,t,n,i){if(!f.isBuffer(\r\ne))throw new TypeError(\"argument should be a Buffer\");if(n||(n=0),!i&&i!==0&&(i=\r\nthis.length),t>=e.length&&(t=e.length),t||(t=0),i>0&&i<n&&(i=n),i===n||e.length===\r\n0||this.length===0)return 0;if(t<0)throw new RangeError(\"targetStart out of boun\\\r\nds\");if(n<0||n>=this.length)throw new RangeError(\"Index out of range\");if(i<0)throw new RangeError(\r\n\"sourceEnd out of bounds\");i>this.length&&(i=this.length),e.length-t<i-n&&(i=e.length-\r\nt+n);let s=i-n;return this===e&&typeof Uint8Array.prototype.copyWithin==\"functio\\\r\nn\"?this.copyWithin(t,n,i):Uint8Array.prototype.set.call(e,this.subarray(n,i),t),\r\ns},\"copy\");f.prototype.fill=a(function(e,t,n,i){if(typeof e==\"string\"){if(typeof t==\r\n\"string\"?(i=t,t=0,n=this.length):typeof n==\"string\"&&(i=n,n=this.length),i!==void 0&&\r\ntypeof i!=\"string\")throw new TypeError(\"encoding must be a string\");if(typeof i==\r\n\"string\"&&!f.isEncoding(i))throw new TypeError(\"Unknown encoding: \"+i);if(e.length===\r\n1){let o=e.charCodeAt(0);(i===\"utf8\"&&o<128||i===\"latin1\")&&(e=o)}}else typeof e==\r\n\"number\"?e=e&255:typeof e==\"boolean\"&&(e=Number(e));if(t<0||this.length<t||this.\r\nlength<n)throw new RangeError(\"Out of range index\");if(n<=t)return this;t=t>>>0,\r\nn=n===void 0?this.length:n>>>0,e||(e=0);let s;if(typeof e==\"number\")for(s=t;s<n;++s)\r\nthis[s]=e;else{let o=f.isBuffer(e)?e:f.from(e,i),u=o.length;if(u===0)throw new TypeError(\r\n'The value \"'+e+'\" is invalid for argument \"value\"');for(s=0;s<n-t;++s)this[s+t]=\r\no[s%u]}return this},\"fill\");var Te={};function Dt(r,e,t){var n;Te[r]=(n=class extends t{constructor(){\r\nsuper(),Object.defineProperty(this,\"message\",{value:e.apply(this,arguments),writable:!0,\r\nconfigurable:!0}),this.name=`${this.name} [${r}]`,this.stack,delete this.name}get code(){\r\nreturn r}set code(s){Object.defineProperty(this,\"code\",{configurable:!0,enumerable:!0,\r\nvalue:s,writable:!0})}toString(){return`${this.name} [${r}]: ${this.message}`}},\r\na(n,\"NodeError\"),n)}a(Dt,\"E\");Dt(\"ERR_BUFFER_OUT_OF_BOUNDS\",function(r){return r?\r\n`${r} is outside of buffer bounds`:\"Attempt to access memory outside buffer boun\\\r\nds\"},RangeError);Dt(\"ERR_INVALID_ARG_TYPE\",function(r,e){return`The \"${r}\" argum\\\r\nent must be of type number. Received type ${typeof e}`},TypeError);Dt(\"ERR_OUT_O\\\r\nF_RANGE\",function(r,e,t){let n=`The value of \"${r}\" is out of range.`,i=t;return Number.\r\nisInteger(t)&&Math.abs(t)>2**32?i=Rn(String(t)):typeof t==\"bigint\"&&(i=String(t),\r\n(t>BigInt(2)**BigInt(32)||t<-(BigInt(2)**BigInt(32)))&&(i=Rn(i)),i+=\"n\"),n+=` It\\\r\n must be ${e}. Received ${i}`,n},RangeError);function Rn(r){let e=\"\",t=r.length,\r\nn=r[0]===\"-\"?1:0;for(;t>=n+4;t-=3)e=`_${r.slice(t-3,t)}${e}`;return`${r.slice(0,\r\nt)}${e}`}a(Rn,\"addNumericalSeparator\");function Lo(r,e,t){Be(e,\"offset\"),(r[e]===\r\nvoid 0||r[e+t]===void 0)&&je(e,r.length-(t+1))}a(Lo,\"checkBounds\");function jn(r,e,t,n,i,s){\r\nif(r>t||r<e){let o=typeof e==\"bigint\"?\"n\":\"\",u;throw s>3?e===0||e===BigInt(0)?u=\r\n`>= 0${o} and < 2${o} ** ${(s+1)*8}${o}`:u=`>= -(2${o} ** ${(s+1)*8-1}${o}) and \\\r\n< 2 ** ${(s+1)*8-1}${o}`:u=`>= ${e}${o} and <= ${t}${o}`,new Te.ERR_OUT_OF_RANGE(\r\n\"value\",u,r)}Lo(n,i,s)}a(jn,\"checkIntBI\");function Be(r,e){if(typeof r!=\"number\")\r\nthrow new Te.ERR_INVALID_ARG_TYPE(e,\"number\",r)}a(Be,\"validateNumber\");function je(r,e,t){\r\nthrow Math.floor(r)!==r?(Be(r,t),new Te.ERR_OUT_OF_RANGE(t||\"offset\",\"an integer\",\r\nr)):e<0?new Te.ERR_BUFFER_OUT_OF_BOUNDS:new Te.ERR_OUT_OF_RANGE(t||\"offset\",`>= ${t?\r\n1:0} and <= ${e}`,r)}a(je,\"boundsError\");var Ro=/[^+/0-9A-Za-z-_]/g;function Fo(r){\r\nif(r=r.split(\"=\")[0],r=r.trim().replace(Ro,\"\"),r.length<2)return\"\";for(;r.length%\r\n4!==0;)r=r+\"=\";return r}a(Fo,\"base64clean\");function Rt(r,e){e=e||1/0;let t,n=r.\r\nlength,i=null,s=[];for(let o=0;o<n;++o){if(t=r.charCodeAt(o),t>55295&&t<57344){if(!i){\r\nif(t>56319){(e-=3)>-1&&s.push(239,191,189);continue}else if(o+1===n){(e-=3)>-1&&\r\ns.push(239,191,189);continue}i=t;continue}if(t<56320){(e-=3)>-1&&s.push(239,191,\r\n189),i=t;continue}t=(i-55296<<10|t-56320)+65536}else i&&(e-=3)>-1&&s.push(239,191,\r\n189);if(i=null,t<128){if((e-=1)<0)break;s.push(t)}else if(t<2048){if((e-=2)<0)break;\r\ns.push(t>>6|192,t&63|128)}else if(t<65536){if((e-=3)<0)break;s.push(t>>12|224,t>>\r\n6&63|128,t&63|128)}else if(t<1114112){if((e-=4)<0)break;s.push(t>>18|240,t>>12&63|\r\n128,t>>6&63|128,t&63|128)}else throw new Error(\"Invalid code point\")}return s}a(\r\nRt,\"utf8ToBytes\");function Mo(r){let e=[];for(let t=0;t<r.length;++t)e.push(r.charCodeAt(\r\nt)&255);return e}a(Mo,\"asciiToBytes\");function Do(r,e){let t,n,i,s=[];for(let o=0;o<\r\nr.length&&!((e-=2)<0);++o)t=r.charCodeAt(o),n=t>>8,i=t%256,s.push(i),s.push(n);return s}\r\na(Do,\"utf16leToBytes\");function Hn(r){return Pt.toByteArray(Fo(r))}a(Hn,\"base64T\\\r\noBytes\");function ot(r,e,t,n){let i;for(i=0;i<n&&!(i+t>=e.length||i>=r.length);++i)\r\ne[i+t]=r[i];return i}a(ot,\"blitBuffer\");function ae(r,e){return r instanceof e||\r\nr!=null&&r.constructor!=null&&r.constructor.name!=null&&r.constructor.name===e.name}\r\na(ae,\"isInstance\");function Ot(r){return r!==r}a(Ot,\"numberIsNaN\");var Oo=function(){\r\nlet r=\"0123456789abcdef\",e=new Array(256);for(let t=0;t<16;++t){let n=t*16;for(let i=0;i<\r\n16;++i)e[n+i]=r[t]+r[i]}return e}();function me(r){return typeof BigInt>\"u\"?ko:r}\r\na(me,\"defineBigIntMethod\");function ko(){throw new Error(\"BigInt not supported\")}\r\na(ko,\"BufferBigIntNotDefined\")});var b,S,v,w,d,m,p=K(()=>{\"use strict\";b=globalThis,S=globalThis.setImmediate??(r=>setTimeout(\r\nr,0)),v=globalThis.clearImmediate??(r=>clearTimeout(r)),w=globalThis.crypto??{};\r\nw.subtle??(w.subtle={});d=typeof globalThis.Buffer==\"function\"&&typeof globalThis.\r\nBuffer.allocUnsafe==\"function\"?globalThis.Buffer:Gn().Buffer,m=globalThis.process??\r\n{};m.env??(m.env={});try{m.nextTick(()=>{})}catch{let e=Promise.resolve();m.nextTick=\r\ne.then.bind(e)}});var ge=I((Jc,kt)=>{\"use strict\";p();var Re=typeof Reflect==\"object\"?Reflect:null,\r\n$n=Re&&typeof Re.apply==\"function\"?Re.apply:a(function(e,t,n){return Function.prototype.\r\napply.call(e,t,n)},\"ReflectApply\"),at;Re&&typeof Re.ownKeys==\"function\"?at=Re.ownKeys:\r\nObject.getOwnPropertySymbols?at=a(function(e){return Object.getOwnPropertyNames(\r\ne).concat(Object.getOwnPropertySymbols(e))},\"ReflectOwnKeys\"):at=a(function(e){return Object.\r\ngetOwnPropertyNames(e)},\"ReflectOwnKeys\");function Uo(r){console&&console.warn&&\r\nconsole.warn(r)}a(Uo,\"ProcessEmitWarning\");var Vn=Number.isNaN||a(function(e){return e!==\r\ne},\"NumberIsNaN\");function B(){B.init.call(this)}a(B,\"EventEmitter\");kt.exports=\r\nB;kt.exports.once=Wo;B.EventEmitter=B;B.prototype._events=void 0;B.prototype._eventsCount=\r\n0;B.prototype._maxListeners=void 0;var Kn=10;function ut(r){if(typeof r!=\"functi\\\r\non\")throw new TypeError('The \"listener\" argument must be of type Function. Recei\\\r\nved type '+typeof r)}a(ut,\"checkListener\");Object.defineProperty(B,\"defaultMaxLi\\\r\nsteners\",{enumerable:!0,get:function(){return Kn},set:function(r){if(typeof r!=\"\\\r\nnumber\"||r<0||Vn(r))throw new RangeError('The value of \"defaultMaxListeners\" is \\\r\nout of range. It must be a non-negative number. Received '+r+\".\");Kn=r}});B.init=\r\nfunction(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&\r\n(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||\r\nvoid 0};B.prototype.setMaxListeners=a(function(e){if(typeof e!=\"number\"||e<0||Vn(\r\ne))throw new RangeError('The value of \"n\" is out of range. It must be a non-nega\\\r\ntive number. Received '+e+\".\");return this._maxListeners=e,this},\"setMaxListener\\\r\ns\");function zn(r){return r._maxListeners===void 0?B.defaultMaxListeners:r._maxListeners}\r\na(zn,\"_getMaxListeners\");B.prototype.getMaxListeners=a(function(){return zn(this)},\r\n\"getMaxListeners\");B.prototype.emit=a(function(e){for(var t=[],n=1;n<arguments.length;n++)\r\nt.push(arguments[n]);var i=e===\"error\",s=this._events;if(s!==void 0)i=i&&s.error===\r\nvoid 0;else if(!i)return!1;if(i){var o;if(t.length>0&&(o=t[0]),o instanceof Error)\r\nthrow o;var u=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));throw u.context=\r\no,u}var c=s[e];if(c===void 0)return!1;if(typeof c==\"function\")$n(c,this,t);else for(var h=c.\r\nlength,l=ei(c,h),n=0;n<h;++n)$n(l[n],this,t);return!0},\"emit\");function Yn(r,e,t,n){\r\nvar i,s,o;if(ut(t),s=r._events,s===void 0?(s=r._events=Object.create(null),r._eventsCount=\r\n0):(s.newListener!==void 0&&(r.emit(\"newListener\",e,t.listener?t.listener:t),s=r.\r\n_events),o=s[e]),o===void 0)o=s[e]=t,++r._eventsCount;else if(typeof o==\"functio\\\r\nn\"?o=s[e]=n?[t,o]:[o,t]:n?o.unshift(t):o.push(t),i=zn(r),i>0&&o.length>i&&!o.warned){\r\no.warned=!0;var u=new Error(\"Possible EventEmitter memory leak detected. \"+o.length+\r\n\" \"+String(e)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");\r\nu.name=\"MaxListenersExceededWarning\",u.emitter=r,u.type=e,u.count=o.length,Uo(u)}\r\nreturn r}a(Yn,\"_addListener\");B.prototype.addListener=a(function(e,t){return Yn(\r\nthis,e,t,!1)},\"addListener\");B.prototype.on=B.prototype.addListener;B.prototype.\r\nprependListener=a(function(e,t){return Yn(this,e,t,!0)},\"prependListener\");function qo(){\r\nif(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=\r\n!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.\r\ntarget,arguments)}a(qo,\"onceWrapper\");function Zn(r,e,t){var n={fired:!1,wrapFn:void 0,\r\ntarget:r,type:e,listener:t},i=qo.bind(n);return i.listener=t,n.wrapFn=i,i}a(Zn,\"\\\r\n_onceWrap\");B.prototype.once=a(function(e,t){return ut(t),this.on(e,Zn(this,e,t)),\r\nthis},\"once\");B.prototype.prependOnceListener=a(function(e,t){return ut(t),this.\r\nprependListener(e,Zn(this,e,t)),this},\"prependOnceListener\");B.prototype.removeListener=\r\na(function(e,t){var n,i,s,o,u;if(ut(t),i=this._events,i===void 0)return this;if(n=\r\ni[e],n===void 0)return this;if(n===t||n.listener===t)--this._eventsCount===0?this.\r\n_events=Object.create(null):(delete i[e],i.removeListener&&this.emit(\"removeList\\\r\nener\",e,n.listener||t));else if(typeof n!=\"function\"){for(s=-1,o=n.length-1;o>=0;o--)\r\nif(n[o]===t||n[o].listener===t){u=n[o].listener,s=o;break}if(s<0)return this;s===\r\n0?n.shift():No(n,s),n.length===1&&(i[e]=n[0]),i.removeListener!==void 0&&this.emit(\r\n\"removeListener\",e,u||t)}return this},\"removeListener\");B.prototype.off=B.prototype.\r\nremoveListener;B.prototype.removeAllListeners=a(function(e){var t,n,i;if(n=this.\r\n_events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===\r\n0?(this._events=Object.create(null),this._eventsCount=0):n[e]!==void 0&&(--this.\r\n_eventsCount===0?this._events=Object.create(null):delete n[e]),this;if(arguments.\r\nlength===0){var s=Object.keys(n),o;for(i=0;i<s.length;++i)o=s[i],o!==\"removeList\\\r\nener\"&&this.removeAllListeners(o);return this.removeAllListeners(\"removeListener\"),\r\nthis._events=Object.create(null),this._eventsCount=0,this}if(t=n[e],typeof t==\"f\\\r\nunction\")this.removeListener(e,t);else if(t!==void 0)for(i=t.length-1;i>=0;i--)this.\r\nremoveListener(e,t[i]);return this},\"removeAllListeners\");function Jn(r,e,t){var n=r.\r\n_events;if(n===void 0)return[];var i=n[e];return i===void 0?[]:typeof i==\"functi\\\r\non\"?t?[i.listener||i]:[i]:t?Qo(i):ei(i,i.length)}a(Jn,\"_listeners\");B.prototype.\r\nlisteners=a(function(e){return Jn(this,e,!0)},\"listeners\");B.prototype.rawListeners=\r\na(function(e){return Jn(this,e,!1)},\"rawListeners\");B.listenerCount=function(r,e){\r\nreturn typeof r.listenerCount==\"function\"?r.listenerCount(e):Xn.call(r,e)};B.prototype.\r\nlistenerCount=Xn;function Xn(r){var e=this._events;if(e!==void 0){var t=e[r];if(typeof t==\r\n\"function\")return 1;if(t!==void 0)return t.length}return 0}a(Xn,\"listenerCount\");\r\nB.prototype.eventNames=a(function(){return this._eventsCount>0?at(this._events):\r\n[]},\"eventNames\");function ei(r,e){for(var t=new Array(e),n=0;n<e;++n)t[n]=r[n];\r\nreturn t}a(ei,\"arrayClone\");function No(r,e){for(;e+1<r.length;e++)r[e]=r[e+1];r.\r\npop()}a(No,\"spliceOne\");function Qo(r){for(var e=new Array(r.length),t=0;t<e.length;++t)\r\ne[t]=r[t].listener||r[t];return e}a(Qo,\"unwrapListeners\");function Wo(r,e){return new Promise(\r\nfunction(t,n){function i(o){r.removeListener(e,s),n(o)}a(i,\"errorListener\");function s(){\r\ntypeof r.removeListener==\"function\"&&r.removeListener(\"error\",i),t([].slice.call(\r\narguments))}a(s,\"resolver\"),ti(r,e,s,{once:!0}),e!==\"error\"&&jo(r,i,{once:!0})})}\r\na(Wo,\"once\");function jo(r,e,t){typeof r.on==\"function\"&&ti(r,\"error\",e,t)}a(jo,\r\n\"addErrorHandlerIfEventEmitter\");function ti(r,e,t,n){if(typeof r.on==\"function\")\r\nn.once?r.once(e,t):r.on(e,t);else if(typeof r.addEventListener==\"function\")r.addEventListener(\r\ne,a(function i(s){n.once&&r.removeEventListener(e,i),t(s)},\"wrapListener\"));else\r\nthrow new TypeError('The \"emitter\" argument must be of type EventEmitter. Receiv\\\r\ned type '+typeof r)}a(ti,\"eventTargetAgnosticAddListener\")});var He={};X(He,{default:()=>Ho});var Ho,Ge=K(()=>{\"use strict\";p();Ho={}});function $e(r){let e=1779033703,t=3144134277,n=1013904242,i=2773480762,s=1359893119,\r\no=2600822924,u=528734635,c=1541459225,h=0,l=0,y=[1116352408,1899447441,3049323471,\r\n3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,\r\n1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,\r\n604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,\r\n3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,\r\n1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,\r\n3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,\r\n883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,\r\n2361852424,2428436474,2756734187,3204031479,3329325298],E=a((A,g)=>A>>>g|A<<32-g,\r\n\"rrot\"),_=new Uint32Array(64),P=new Uint8Array(64),N=a(()=>{for(let L=0,G=0;L<16;L++,\r\nG+=4)_[L]=P[G]<<24|P[G+1]<<16|P[G+2]<<8|P[G+3];for(let L=16;L<64;L++){let G=E(_[L-\r\n15],7)^E(_[L-15],18)^_[L-15]>>>3,ce=E(_[L-2],17)^E(_[L-2],19)^_[L-2]>>>10;_[L]=_[L-\r\n16]+G+_[L-7]+ce|0}let A=e,g=t,D=n,H=i,Q=s,W=o,ue=u,de=c;for(let L=0;L<64;L++){let G=E(\r\nQ,6)^E(Q,11)^E(Q,25),ce=Q&W^~Q&ue,ye=de+G+ce+y[L]+_[L]|0,xe=E(A,2)^E(A,13)^E(A,22),\r\nhe=A&g^A&D^g&D,ie=xe+he|0;de=ue,ue=W,W=Q,Q=H+ye|0,H=D,D=g,g=A,A=ye+ie|0}e=e+A|0,\r\nt=t+g|0,n=n+D|0,i=i+H|0,s=s+Q|0,o=o+W|0,u=u+ue|0,c=c+de|0,l=0},\"process\"),J=a(A=>{\r\ntypeof A==\"string\"&&(A=new TextEncoder().encode(A));for(let g=0;g<A.length;g++)P[l++]=\r\nA[g],l===64&&N();h+=A.length},\"add\"),pe=a(()=>{if(P[l++]=128,l==64&&N(),l+8>64){\r\nfor(;l<64;)P[l++]=0;N()}for(;l<58;)P[l++]=0;let A=h*8;P[l++]=A/1099511627776&255,\r\nP[l++]=A/4294967296&255,P[l++]=A>>>24,P[l++]=A>>>16&255,P[l++]=A>>>8&255,P[l++]=\r\nA&255,N();let g=new Uint8Array(32);return g[0]=e>>>24,g[1]=e>>>16&255,g[2]=e>>>8&\r\n255,g[3]=e&255,g[4]=t>>>24,g[5]=t>>>16&255,g[6]=t>>>8&255,g[7]=t&255,g[8]=n>>>24,\r\ng[9]=n>>>16&255,g[10]=n>>>8&255,g[11]=n&255,g[12]=i>>>24,g[13]=i>>>16&255,g[14]=\r\ni>>>8&255,g[15]=i&255,g[16]=s>>>24,g[17]=s>>>16&255,g[18]=s>>>8&255,g[19]=s&255,\r\ng[20]=o>>>24,g[21]=o>>>16&255,g[22]=o>>>8&255,g[23]=o&255,g[24]=u>>>24,g[25]=u>>>\r\n16&255,g[26]=u>>>8&255,g[27]=u&255,g[28]=c>>>24,g[29]=c>>>16&255,g[30]=c>>>8&255,\r\ng[31]=c&255,g},\"digest\");return r===void 0?{add:J,digest:pe}:(J(r),pe())}var ri=K(\r\n()=>{\"use strict\";p();a($e,\"sha256\")});var O,Ke,ni=K(()=>{\"use strict\";p();O=class O{constructor(){T(this,\"_dataLength\",\r\n0);T(this,\"_bufferLength\",0);T(this,\"_state\",new Int32Array(4));T(this,\"_buffer\",\r\nnew ArrayBuffer(68));T(this,\"_buffer8\");T(this,\"_buffer32\");this._buffer8=new Uint8Array(\r\nthis._buffer,0,68),this._buffer32=new Uint32Array(this._buffer,0,17),this.start()}static hashByteArray(e,t=!1){\r\nreturn this.onePassHasher.start().appendByteArray(e).end(t)}static hashStr(e,t=!1){\r\nreturn this.onePassHasher.start().appendStr(e).end(t)}static hashAsciiStr(e,t=!1){\r\nreturn this.onePassHasher.start().appendAsciiStr(e).end(t)}static _hex(e){let t=O.\r\nhexChars,n=O.hexOut,i,s,o,u;for(u=0;u<4;u+=1)for(s=u*8,i=e[u],o=0;o<8;o+=2)n[s+1+\r\no]=t.charAt(i&15),i>>>=4,n[s+0+o]=t.charAt(i&15),i>>>=4;return n.join(\"\")}static _md5cycle(e,t){\r\nlet n=e[0],i=e[1],s=e[2],o=e[3];n+=(i&s|~i&o)+t[0]-680876936|0,n=(n<<7|n>>>25)+i|\r\n0,o+=(n&i|~n&s)+t[1]-389564586|0,o=(o<<12|o>>>20)+n|0,s+=(o&n|~o&i)+t[2]+606105819|\r\n0,s=(s<<17|s>>>15)+o|0,i+=(s&o|~s&n)+t[3]-1044525330|0,i=(i<<22|i>>>10)+s|0,n+=(i&\r\ns|~i&o)+t[4]-176418897|0,n=(n<<7|n>>>25)+i|0,o+=(n&i|~n&s)+t[5]+1200080426|0,o=(o<<\r\n12|o>>>20)+n|0,s+=(o&n|~o&i)+t[6]-1473231341|0,s=(s<<17|s>>>15)+o|0,i+=(s&o|~s&n)+\r\nt[7]-45705983|0,i=(i<<22|i>>>10)+s|0,n+=(i&s|~i&o)+t[8]+1770035416|0,n=(n<<7|n>>>\r\n25)+i|0,o+=(n&i|~n&s)+t[9]-1958414417|0,o=(o<<12|o>>>20)+n|0,s+=(o&n|~o&i)+t[10]-\r\n42063|0,s=(s<<17|s>>>15)+o|0,i+=(s&o|~s&n)+t[11]-1990404162|0,i=(i<<22|i>>>10)+s|\r\n0,n+=(i&s|~i&o)+t[12]+1804603682|0,n=(n<<7|n>>>25)+i|0,o+=(n&i|~n&s)+t[13]-40341101|\r\n0,o=(o<<12|o>>>20)+n|0,s+=(o&n|~o&i)+t[14]-1502002290|0,s=(s<<17|s>>>15)+o|0,i+=\r\n(s&o|~s&n)+t[15]+1236535329|0,i=(i<<22|i>>>10)+s|0,n+=(i&o|s&~o)+t[1]-165796510|\r\n0,n=(n<<5|n>>>27)+i|0,o+=(n&s|i&~s)+t[6]-1069501632|0,o=(o<<9|o>>>23)+n|0,s+=(o&\r\ni|n&~i)+t[11]+643717713|0,s=(s<<14|s>>>18)+o|0,i+=(s&n|o&~n)+t[0]-373897302|0,i=\r\n(i<<20|i>>>12)+s|0,n+=(i&o|s&~o)+t[5]-701558691|0,n=(n<<5|n>>>27)+i|0,o+=(n&s|i&\r\n~s)+t[10]+38016083|0,o=(o<<9|o>>>23)+n|0,s+=(o&i|n&~i)+t[15]-660478335|0,s=(s<<14|\r\ns>>>18)+o|0,i+=(s&n|o&~n)+t[4]-405537848|0,i=(i<<20|i>>>12)+s|0,n+=(i&o|s&~o)+t[9]+\r\n568446438|0,n=(n<<5|n>>>27)+i|0,o+=(n&s|i&~s)+t[14]-1019803690|0,o=(o<<9|o>>>23)+\r\nn|0,s+=(o&i|n&~i)+t[3]-187363961|0,s=(s<<14|s>>>18)+o|0,i+=(s&n|o&~n)+t[8]+1163531501|\r\n0,i=(i<<20|i>>>12)+s|0,n+=(i&o|s&~o)+t[13]-1444681467|0,n=(n<<5|n>>>27)+i|0,o+=(n&\r\ns|i&~s)+t[2]-51403784|0,o=(o<<9|o>>>23)+n|0,s+=(o&i|n&~i)+t[7]+1735328473|0,s=(s<<\r\n14|s>>>18)+o|0,i+=(s&n|o&~n)+t[12]-1926607734|0,i=(i<<20|i>>>12)+s|0,n+=(i^s^o)+\r\nt[5]-378558|0,n=(n<<4|n>>>28)+i|0,o+=(n^i^s)+t[8]-2022574463|0,o=(o<<11|o>>>21)+\r\nn|0,s+=(o^n^i)+t[11]+1839030562|0,s=(s<<16|s>>>16)+o|0,i+=(s^o^n)+t[14]-35309556|\r\n0,i=(i<<23|i>>>9)+s|0,n+=(i^s^o)+t[1]-1530992060|0,n=(n<<4|n>>>28)+i|0,o+=(n^i^s)+\r\nt[4]+1272893353|0,o=(o<<11|o>>>21)+n|0,s+=(o^n^i)+t[7]-155497632|0,s=(s<<16|s>>>\r\n16)+o|0,i+=(s^o^n)+t[10]-1094730640|0,i=(i<<23|i>>>9)+s|0,n+=(i^s^o)+t[13]+681279174|\r\n0,n=(n<<4|n>>>28)+i|0,o+=(n^i^s)+t[0]-358537222|0,o=(o<<11|o>>>21)+n|0,s+=(o^n^i)+\r\nt[3]-722521979|0,s=(s<<16|s>>>16)+o|0,i+=(s^o^n)+t[6]+76029189|0,i=(i<<23|i>>>9)+\r\ns|0,n+=(i^s^o)+t[9]-640364487|0,n=(n<<4|n>>>28)+i|0,o+=(n^i^s)+t[12]-421815835|0,\r\no=(o<<11|o>>>21)+n|0,s+=(o^n^i)+t[15]+530742520|0,s=(s<<16|s>>>16)+o|0,i+=(s^o^n)+\r\nt[2]-995338651|0,i=(i<<23|i>>>9)+s|0,n+=(s^(i|~o))+t[0]-198630844|0,n=(n<<6|n>>>\r\n26)+i|0,o+=(i^(n|~s))+t[7]+1126891415|0,o=(o<<10|o>>>22)+n|0,s+=(n^(o|~i))+t[14]-\r\n1416354905|0,s=(s<<15|s>>>17)+o|0,i+=(o^(s|~n))+t[5]-57434055|0,i=(i<<21|i>>>11)+\r\ns|0,n+=(s^(i|~o))+t[12]+1700485571|0,n=(n<<6|n>>>26)+i|0,o+=(i^(n|~s))+t[3]-1894986606|\r\n0,o=(o<<10|o>>>22)+n|0,s+=(n^(o|~i))+t[10]-1051523|0,s=(s<<15|s>>>17)+o|0,i+=(o^\r\n(s|~n))+t[1]-2054922799|0,i=(i<<21|i>>>11)+s|0,n+=(s^(i|~o))+t[8]+1873313359|0,n=\r\n(n<<6|n>>>26)+i|0,o+=(i^(n|~s))+t[15]-30611744|0,o=(o<<10|o>>>22)+n|0,s+=(n^(o|~i))+\r\nt[6]-1560198380|0,s=(s<<15|s>>>17)+o|0,i+=(o^(s|~n))+t[13]+1309151649|0,i=(i<<21|\r\ni>>>11)+s|0,n+=(s^(i|~o))+t[4]-145523070|0,n=(n<<6|n>>>26)+i|0,o+=(i^(n|~s))+t[11]-\r\n1120210379|0,o=(o<<10|o>>>22)+n|0,s+=(n^(o|~i))+t[2]+718787259|0,s=(s<<15|s>>>17)+\r\no|0,i+=(o^(s|~n))+t[9]-343485551|0,i=(i<<21|i>>>11)+s|0,e[0]=n+e[0]|0,e[1]=i+e[1]|\r\n0,e[2]=s+e[2]|0,e[3]=o+e[3]|0}start(){return this._dataLength=0,this._bufferLength=\r\n0,this._state.set(O.stateIdentity),this}appendStr(e){let t=this._buffer8,n=this.\r\n_buffer32,i=this._bufferLength,s,o;for(o=0;o<e.length;o+=1){if(s=e.charCodeAt(o),\r\ns<128)t[i++]=s;else if(s<2048)t[i++]=(s>>>6)+192,t[i++]=s&63|128;else if(s<55296||\r\ns>56319)t[i++]=(s>>>12)+224,t[i++]=s>>>6&63|128,t[i++]=s&63|128;else{if(s=(s-55296)*\r\n1024+(e.charCodeAt(++o)-56320)+65536,s>1114111)throw new Error(\"Unicode standard\\\r\n supports code points up to U+10FFFF\");t[i++]=(s>>>18)+240,t[i++]=s>>>12&63|128,\r\nt[i++]=s>>>6&63|128,t[i++]=s&63|128}i>=64&&(this._dataLength+=64,O._md5cycle(this.\r\n_state,n),i-=64,n[0]=n[16])}return this._bufferLength=i,this}appendAsciiStr(e){let t=this.\r\n_buffer8,n=this._buffer32,i=this._bufferLength,s,o=0;for(;;){for(s=Math.min(e.length-\r\no,64-i);s--;)t[i++]=e.charCodeAt(o++);if(i<64)break;this._dataLength+=64,O._md5cycle(\r\nthis._state,n),i=0}return this._bufferLength=i,this}appendByteArray(e){let t=this.\r\n_buffer8,n=this._buffer32,i=this._bufferLength,s,o=0;for(;;){for(s=Math.min(e.length-\r\no,64-i);s--;)t[i++]=e[o++];if(i<64)break;this._dataLength+=64,O._md5cycle(this._state,\r\nn),i=0}return this._bufferLength=i,this}getState(){let e=this._state;return{buffer:String.\r\nfromCharCode.apply(null,Array.from(this._buffer8)),buflen:this._bufferLength,length:this.\r\n_dataLength,state:[e[0],e[1],e[2],e[3]]}}setState(e){let t=e.buffer,n=e.state,i=this.\r\n_state,s;for(this._dataLength=e.length,this._bufferLength=e.buflen,i[0]=n[0],i[1]=\r\nn[1],i[2]=n[2],i[3]=n[3],s=0;s<t.length;s+=1)this._buffer8[s]=t.charCodeAt(s)}end(e=!1){\r\nlet t=this._bufferLength,n=this._buffer8,i=this._buffer32,s=(t>>2)+1;this._dataLength+=\r\nt;let o=this._dataLength*8;if(n[t]=128,n[t+1]=n[t+2]=n[t+3]=0,i.set(O.buffer32Identity.\r\nsubarray(s),s),t>55&&(O._md5cycle(this._state,i),i.set(O.buffer32Identity)),o<=4294967295)\r\ni[14]=o;else{let u=o.toString(16).match(/(.*?)(.{0,8})$/);if(u===null)return;let c=parseInt(\r\nu[2],16),h=parseInt(u[1],16)||0;i[14]=c,i[15]=h}return O._md5cycle(this._state,i),\r\ne?this._state:O._hex(this._state)}};a(O,\"Md5\"),T(O,\"stateIdentity\",new Int32Array(\r\n[1732584193,-271733879,-1732584194,271733878])),T(O,\"buffer32Identity\",new Int32Array(\r\n[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])),T(O,\"hexChars\",\"0123456789abcdef\"),T(O,\"hexO\\\r\nut\",[]),T(O,\"onePassHasher\",new O);Ke=O});var Ut={};X(Ut,{createHash:()=>$o,createHmac:()=>Ko,randomBytes:()=>Go});function Go(r){\r\nreturn w.getRandomValues(d.alloc(r))}function $o(r){if(r===\"sha256\")return{update:function(e){\r\nreturn{digest:function(){return d.from($e(e))}}}};if(r===\"md5\")return{update:function(e){\r\nreturn{digest:function(){return typeof e==\"string\"?Ke.hashStr(e):Ke.hashByteArray(\r\ne)}}}};throw new Error(`Hash type '${r}' not supported`)}function Ko(r,e){if(r!==\r\n\"sha256\")throw new Error(`Only sha256 is supported (requested: '${r}')`);return{\r\nupdate:function(t){return{digest:function(){typeof e==\"string\"&&(e=new TextEncoder().\r\nencode(e)),typeof t==\"string\"&&(t=new TextEncoder().encode(t));let n=e.length;if(n>\r\n64)e=$e(e);else if(n<64){let c=new Uint8Array(64);c.set(e),e=c}let i=new Uint8Array(\r\n64),s=new Uint8Array(64);for(let c=0;c<64;c++)i[c]=54^e[c],s[c]=92^e[c];let o=new Uint8Array(\r\nt.length+64);o.set(i,0),o.set(t,64);let u=new Uint8Array(96);return u.set(s,0),u.\r\nset($e(o),64),d.from($e(u))}}}}}var qt=K(()=>{\"use strict\";p();ri();ni();a(Go,\"r\\\r\nandomBytes\");a($o,\"createHash\");a(Ko,\"createHmac\")});var Qt=I(ii=>{\"use strict\";p();ii.parse=function(r,e){return new Nt(r,e).parse()};\r\nvar ct=class ct{constructor(e,t){this.source=e,this.transform=t||Vo,this.position=\r\n0,this.entries=[],this.recorded=[],this.dimension=0}isEof(){return this.position>=\r\nthis.source.length}nextCharacter(){var e=this.source[this.position++];return e===\r\n\"\\\\\"?{value:this.source[this.position++],escaped:!0}:{value:e,escaped:!1}}record(e){\r\nthis.recorded.push(e)}newEntry(e){var t;(this.recorded.length>0||e)&&(t=this.recorded.\r\njoin(\"\"),t===\"NULL\"&&!e&&(t=null),t!==null&&(t=this.transform(t)),this.entries.push(\r\nt),this.recorded=[])}consumeDimensions(){if(this.source[0]===\"[\")for(;!this.isEof();){\r\nvar e=this.nextCharacter();if(e.value===\"=\")break}}parse(e){var t,n,i;for(this.consumeDimensions();!this.\r\nisEof();)if(t=this.nextCharacter(),t.value===\"{\"&&!i)this.dimension++,this.dimension>\r\n1&&(n=new ct(this.source.substr(this.position-1),this.transform),this.entries.push(\r\nn.parse(!0)),this.position+=n.position-2);else if(t.value===\"}\"&&!i){if(this.dimension--,\r\n!this.dimension&&(this.newEntry(),e))return this.entries}else t.value==='\"'&&!t.\r\nescaped?(i&&this.newEntry(!0),i=!i):t.value===\",\"&&!i?this.newEntry():this.record(\r\nt.value);if(this.dimension!==0)throw new Error(\"array dimension not balanced\");return this.\r\nentries}};a(ct,\"ArrayParser\");var Nt=ct;function Vo(r){return r}a(Vo,\"identity\")});var Wt=I((yh,si)=>{p();var zo=Qt();si.exports={create:function(r,e){return{parse:function(){\r\nreturn zo.parse(r,e)}}}}});var ui=I((gh,ai)=>{\"use strict\";p();var Yo=/(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/,\r\nZo=/^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/,Jo=/([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/,Xo=/^-?infinity$/;\r\nai.exports=a(function(e){if(Xo.test(e))return Number(e.replace(\"i\",\"I\"));var t=Yo.\r\nexec(e);if(!t)return ea(e)||null;var n=!!t[8],i=parseInt(t[1],10);n&&(i=oi(i));var s=parseInt(\r\nt[2],10)-1,o=t[3],u=parseInt(t[4],10),c=parseInt(t[5],10),h=parseInt(t[6],10),l=t[7];\r\nl=l?1e3*parseFloat(l):0;var y,E=ta(e);return E!=null?(y=new Date(Date.UTC(i,s,o,\r\nu,c,h,l)),jt(i)&&y.setUTCFullYear(i),E!==0&&y.setTime(y.getTime()-E)):(y=new Date(\r\ni,s,o,u,c,h,l),jt(i)&&y.setFullYear(i)),y},\"parseDate\");function ea(r){var e=Zo.\r\nexec(r);if(e){var t=parseInt(e[1],10),n=!!e[4];n&&(t=oi(t));var i=parseInt(e[2],\r\n10)-1,s=e[3],o=new Date(t,i,s);return jt(t)&&o.setFullYear(t),o}}a(ea,\"getDate\");\r\nfunction ta(r){if(r.endsWith(\"+00\"))return 0;var e=Jo.exec(r.split(\" \")[1]);if(e){\r\nvar t=e[1];if(t===\"Z\")return 0;var n=t===\"-\"?-1:1,i=parseInt(e[2],10)*3600+parseInt(\r\ne[3]||0,10)*60+parseInt(e[4]||0,10);return i*n*1e3}}a(ta,\"timeZoneOffset\");function oi(r){\r\nreturn-(r-1)}a(oi,\"bcYearToNegativeYear\");function jt(r){return r>=0&&r<100}a(jt,\r\n\"is0To99\")});var hi=I((Sh,ci)=>{p();ci.exports=na;var ra=Object.prototype.hasOwnProperty;function na(r){\r\nfor(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)ra.call(t,\r\nn)&&(r[n]=t[n])}return r}a(na,\"extend\")});var pi=I((vh,fi)=>{\"use strict\";p();var ia=hi();fi.exports=Fe;function Fe(r){if(!(this instanceof\r\nFe))return new Fe(r);ia(this,ma(r))}a(Fe,\"PostgresInterval\");var sa=[\"seconds\",\"\\\r\nminutes\",\"hours\",\"days\",\"months\",\"years\"];Fe.prototype.toPostgres=function(){var r=sa.\r\nfilter(this.hasOwnProperty,this);return this.milliseconds&&r.indexOf(\"seconds\")<\r\n0&&r.push(\"seconds\"),r.length===0?\"0\":r.map(function(e){var t=this[e]||0;return e===\r\n\"seconds\"&&this.milliseconds&&(t=(t+this.milliseconds/1e3).toFixed(6).replace(/\\.?0+$/,\r\n\"\")),t+\" \"+e},this).join(\" \")};var oa={years:\"Y\",months:\"M\",days:\"D\",hours:\"H\",minutes:\"\\\r\nM\",seconds:\"S\"},aa=[\"years\",\"months\",\"days\"],ua=[\"hours\",\"minutes\",\"seconds\"];Fe.\r\nprototype.toISOString=Fe.prototype.toISO=function(){var r=aa.map(t,this).join(\"\"),\r\ne=ua.map(t,this).join(\"\");return\"P\"+r+\"T\"+e;function t(n){var i=this[n]||0;return n===\r\n\"seconds\"&&this.milliseconds&&(i=(i+this.milliseconds/1e3).toFixed(6).replace(/0+$/,\r\n\"\")),i+oa[n]}};var Ht=\"([+-]?\\\\d+)\",ca=Ht+\"\\\\s+years?\",ha=Ht+\"\\\\s+mons?\",la=Ht+\"\\\r\n\\\\s+days?\",fa=\"([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?\",pa=new RegExp([\r\nca,ha,la,fa].map(function(r){return\"(\"+r+\")?\"}).join(\"\\\\s*\")),li={years:2,months:4,\r\ndays:6,hours:9,minutes:10,seconds:11,milliseconds:12},da=[\"hours\",\"minutes\",\"sec\\\r\nonds\",\"milliseconds\"];function ya(r){var e=r+\"000000\".slice(r.length);return parseInt(\r\ne,10)/1e3}a(ya,\"parseMilliseconds\");function ma(r){if(!r)return{};var e=pa.exec(\r\nr),t=e[8]===\"-\";return Object.keys(li).reduce(function(n,i){var s=li[i],o=e[s];return!o||\r\n(o=i===\"milliseconds\"?ya(o):parseInt(o,10),!o)||(t&&~da.indexOf(i)&&(o*=-1),n[i]=\r\no),n},{})}a(ma,\"parse\")});var yi=I((Ch,di)=>{\"use strict\";p();di.exports=a(function(e){if(/^\\\\x/.test(e))return new d(\r\ne.substr(2),\"hex\");for(var t=\"\",n=0;n<e.length;)if(e[n]!==\"\\\\\")t+=e[n],++n;else if(/[0-7]{3}/.\r\ntest(e.substr(n+1,3)))t+=String.fromCharCode(parseInt(e.substr(n+1,3),8)),n+=4;else{\r\nfor(var i=1;n+i<e.length&&e[n+i]===\"\\\\\";)i++;for(var s=0;s<Math.floor(i/2);++s)t+=\r\n\"\\\\\";n+=Math.floor(i/2)*2}return new d(t,\"binary\")},\"parseBytea\")});var Ei=I((Ph,xi)=>{p();var Ve=Qt(),ze=Wt(),ht=ui(),gi=pi(),wi=yi();function lt(r){\r\nreturn a(function(t){return t===null?t:r(t)},\"nullAllowed\")}a(lt,\"allowNull\");function bi(r){\r\nreturn r===null?r:r===\"TRUE\"||r===\"t\"||r===\"true\"||r===\"y\"||r===\"yes\"||r===\"on\"||\r\nr===\"1\"}a(bi,\"parseBool\");function ga(r){return r?Ve.parse(r,bi):null}a(ga,\"pars\\\r\neBoolArray\");function wa(r){return parseInt(r,10)}a(wa,\"parseBaseTenInt\");function Gt(r){\r\nreturn r?Ve.parse(r,lt(wa)):null}a(Gt,\"parseIntegerArray\");function ba(r){return r?\r\nVe.parse(r,lt(function(e){return Si(e).trim()})):null}a(ba,\"parseBigIntegerArray\");\r\nvar Sa=a(function(r){if(!r)return null;var e=ze.create(r,function(t){return t!==\r\nnull&&(t=zt(t)),t});return e.parse()},\"parsePointArray\"),$t=a(function(r){if(!r)\r\nreturn null;var e=ze.create(r,function(t){return t!==null&&(t=parseFloat(t)),t});\r\nreturn e.parse()},\"parseFloatArray\"),te=a(function(r){if(!r)return null;var e=ze.\r\ncreate(r);return e.parse()},\"parseStringArray\"),Kt=a(function(r){if(!r)return null;\r\nvar e=ze.create(r,function(t){return t!==null&&(t=ht(t)),t});return e.parse()},\"\\\r\nparseDateArray\"),xa=a(function(r){if(!r)return null;var e=ze.create(r,function(t){\r\nreturn t!==null&&(t=gi(t)),t});return e.parse()},\"parseIntervalArray\"),Ea=a(function(r){\r\nreturn r?Ve.parse(r,lt(wi)):null},\"parseByteAArray\"),Vt=a(function(r){return parseInt(\r\nr,10)},\"parseInteger\"),Si=a(function(r){var e=String(r);return/^\\d+$/.test(e)?e:\r\nr},\"parseBigInteger\"),mi=a(function(r){return r?Ve.parse(r,lt(JSON.parse)):null},\r\n\"parseJsonArray\"),zt=a(function(r){return r[0]!==\"(\"?null:(r=r.substring(1,r.length-\r\n1).split(\",\"),{x:parseFloat(r[0]),y:parseFloat(r[1])})},\"parsePoint\"),va=a(function(r){\r\nif(r[0]!==\"<\"&&r[1]!==\"(\")return null;for(var e=\"(\",t=\"\",n=!1,i=2;i<r.length-1;i++){\r\nif(n||(e+=r[i]),r[i]===\")\"){n=!0;continue}else if(!n)continue;r[i]!==\",\"&&(t+=r[i])}\r\nvar s=zt(e);return s.radius=parseFloat(t),s},\"parseCircle\"),_a=a(function(r){r(20,\r\nSi),r(21,Vt),r(23,Vt),r(26,Vt),r(700,parseFloat),r(701,parseFloat),r(16,bi),r(1082,\r\nht),r(1114,ht),r(1184,ht),r(600,zt),r(651,te),r(718,va),r(1e3,ga),r(1001,Ea),r(1005,\r\nGt),r(1007,Gt),r(1028,Gt),r(1016,ba),r(1017,Sa),r(1021,$t),r(1022,$t),r(1231,$t),\r\nr(1014,te),r(1015,te),r(1008,te),r(1009,te),r(1040,te),r(1041,te),r(1115,Kt),r(1182,\r\nKt),r(1185,Kt),r(1186,gi),r(1187,xa),r(17,wi),r(114,JSON.parse.bind(JSON)),r(3802,\r\nJSON.parse.bind(JSON)),r(199,mi),r(3807,mi),r(3907,te),r(2951,te),r(791,te),r(1183,\r\nte),r(1270,te)},\"init\");xi.exports={init:_a}});var _i=I((Rh,vi)=>{\"use strict\";p();var Y=1e6;function Aa(r){var e=r.readInt32BE(\r\n0),t=r.readUInt32BE(4),n=\"\";e<0&&(e=~e+(t===0),t=~t+1>>>0,n=\"-\");var i=\"\",s,o,u,\r\nc,h,l;{if(s=e%Y,e=e/Y>>>0,o=4294967296*s+t,t=o/Y>>>0,u=\"\"+(o-Y*t),t===0&&e===0)return n+\r\nu+i;for(c=\"\",h=6-u.length,l=0;l<h;l++)c+=\"0\";i=c+u+i}{if(s=e%Y,e=e/Y>>>0,o=4294967296*\r\ns+t,t=o/Y>>>0,u=\"\"+(o-Y*t),t===0&&e===0)return n+u+i;for(c=\"\",h=6-u.length,l=0;l<\r\nh;l++)c+=\"0\";i=c+u+i}{if(s=e%Y,e=e/Y>>>0,o=4294967296*s+t,t=o/Y>>>0,u=\"\"+(o-Y*t),\r\nt===0&&e===0)return n+u+i;for(c=\"\",h=6-u.length,l=0;l<h;l++)c+=\"0\";i=c+u+i}return s=\r\ne%Y,o=4294967296*s+t,u=\"\"+o%Y,n+u+i}a(Aa,\"readInt8\");vi.exports=Aa});var Pi=I((Dh,Ti)=>{p();var Ca=_i(),R=a(function(r,e,t,n,i){t=t||0,n=n||!1,i=i||function(_,P,N){\r\nreturn _*Math.pow(2,N)+P};var s=t>>3,o=a(function(_){return n?~_&255:_},\"inv\"),u=255,\r\nc=8-t%8;e<c&&(u=255<<8-e&255,c=e),t&&(u=u>>t%8);var h=0;t%8+e>=8&&(h=i(0,o(r[s])&\r\nu,c));for(var l=e+t>>3,y=s+1;y<l;y++)h=i(h,o(r[y]),8);var E=(e+t)%8;return E>0&&\r\n(h=i(h,o(r[l])>>8-E,E)),h},\"parseBits\"),Ii=a(function(r,e,t){var n=Math.pow(2,t-\r\n1)-1,i=R(r,1),s=R(r,t,1);if(s===0)return 0;var o=1,u=a(function(h,l,y){h===0&&(h=\r\n1);for(var E=1;E<=y;E++)o/=2,(l&1<<y-E)>0&&(h+=o);return h},\"parsePrecisionBits\"),\r\nc=R(r,e,t+1,!1,u);return s==Math.pow(2,t+1)-1?c===0?i===0?1/0:-1/0:NaN:(i===0?1:\r\n-1)*Math.pow(2,s-n)*c},\"parseFloatFromBits\"),Ia=a(function(r){return R(r,1)==1?-1*\r\n(R(r,15,1,!0)+1):R(r,15,1)},\"parseInt16\"),Ai=a(function(r){return R(r,1)==1?-1*(R(\r\nr,31,1,!0)+1):R(r,31,1)},\"parseInt32\"),Ta=a(function(r){return Ii(r,23,8)},\"pars\\\r\neFloat32\"),Pa=a(function(r){return Ii(r,52,11)},\"parseFloat64\"),Ba=a(function(r){\r\nvar e=R(r,16,32);if(e==49152)return NaN;for(var t=Math.pow(1e4,R(r,16,16)),n=0,i=[],\r\ns=R(r,16),o=0;o<s;o++)n+=R(r,16,64+16*o)*t,t/=1e4;var u=Math.pow(10,R(r,16,48));\r\nreturn(e===0?1:-1)*Math.round(n*u)/u},\"parseNumeric\"),Ci=a(function(r,e){var t=R(\r\ne,1),n=R(e,63,1),i=new Date((t===0?1:-1)*n/1e3+9466848e5);return r||i.setTime(i.\r\ngetTime()+i.getTimezoneOffset()*6e4),i.usec=n%1e3,i.getMicroSeconds=function(){return this.\r\nusec},i.setMicroSeconds=function(s){this.usec=s},i.getUTCMicroSeconds=function(){\r\nreturn this.usec},i},\"parseDate\"),Ye=a(function(r){for(var e=R(r,32),t=R(r,32,32),\r\nn=R(r,32,64),i=96,s=[],o=0;o<e;o++)s[o]=R(r,32,i),i+=32,i+=32;var u=a(function(h){\r\nvar l=R(r,32,i);if(i+=32,l==4294967295)return null;var y;if(h==23||h==20)return y=\r\nR(r,l*8,i),i+=l*8,y;if(h==25)return y=r.toString(this.encoding,i>>3,(i+=l<<3)>>3),\r\ny;console.log(\"ERROR: ElementType not implemented: \"+h)},\"parseElement\"),c=a(function(h,l){\r\nvar y=[],E;if(h.length>1){var _=h.shift();for(E=0;E<_;E++)y[E]=c(h,l);h.unshift(\r\n_)}else for(E=0;E<h[0];E++)y[E]=u(l);return y},\"parse\");return c(s,n)},\"parseArr\\\r\nay\"),La=a(function(r){return r.toString(\"utf8\")},\"parseText\"),Ra=a(function(r){return r===\r\nnull?null:R(r,8)>0},\"parseBool\"),Fa=a(function(r){r(20,Ca),r(21,Ia),r(23,Ai),r(26,\r\nAi),r(1700,Ba),r(700,Ta),r(701,Pa),r(16,Ra),r(1114,Ci.bind(null,!1)),r(1184,Ci.bind(\r\nnull,!0)),r(1e3,Ye),r(1007,Ye),r(1016,Ye),r(1008,Ye),r(1009,Ye),r(25,La)},\"init\");\r\nTi.exports={init:Fa}});var Li=I((Uh,Bi)=>{p();Bi.exports={BOOL:16,BYTEA:17,CHAR:18,INT8:20,INT2:21,INT4:23,\r\nREGPROC:24,TEXT:25,OID:26,TID:27,XID:28,CID:29,JSON:114,XML:142,PG_NODE_TREE:194,\r\nSMGR:210,PATH:602,POLYGON:604,CIDR:650,FLOAT4:700,FLOAT8:701,ABSTIME:702,RELTIME:703,\r\nTINTERVAL:704,CIRCLE:718,MACADDR8:774,MONEY:790,MACADDR:829,INET:869,ACLITEM:1033,\r\nBPCHAR:1042,VARCHAR:1043,DATE:1082,TIME:1083,TIMESTAMP:1114,TIMESTAMPTZ:1184,INTERVAL:1186,\r\nTIMETZ:1266,BIT:1560,VARBIT:1562,NUMERIC:1700,REFCURSOR:1790,REGPROCEDURE:2202,REGOPER:2203,\r\nREGOPERATOR:2204,REGCLASS:2205,REGTYPE:2206,UUID:2950,TXID_SNAPSHOT:2970,PG_LSN:3220,\r\nPG_NDISTINCT:3361,PG_DEPENDENCIES:3402,TSVECTOR:3614,TSQUERY:3615,GTSVECTOR:3642,\r\nREGCONFIG:3734,REGDICTIONARY:3769,JSONB:3802,REGNAMESPACE:4089,REGROLE:4096}});var Xe=I(Je=>{p();var Ma=Ei(),Da=Pi(),Oa=Wt(),ka=Li();Je.getTypeParser=Ua;Je.setTypeParser=\r\nqa;Je.arrayParser=Oa;Je.builtins=ka;var Ze={text:{},binary:{}};function Ri(r){return String(\r\nr)}a(Ri,\"noParse\");function Ua(r,e){return e=e||\"text\",Ze[e]&&Ze[e][r]||Ri}a(Ua,\r\n\"getTypeParser\");function qa(r,e,t){typeof e==\"function\"&&(t=e,e=\"text\"),Ze[e][r]=\r\nt}a(qa,\"setTypeParser\");Ma.init(function(r,e){Ze.text[r]=e});Da.init(function(r,e){\r\nZe.binary[r]=e})});var et=I((jh,Yt)=>{\"use strict\";p();Yt.exports={host:\"localhost\",user:m.platform===\r\n\"win32\"?m.env.USERNAME:m.env.USER,database:void 0,password:null,connectionString:void 0,\r\nport:5432,rows:0,binary:!1,max:10,idleTimeoutMillis:3e4,client_encoding:\"\",ssl:!1,\r\napplication_name:void 0,fallback_application_name:void 0,options:void 0,parseInputDatesAsUTC:!1,\r\nstatement_timeout:!1,lock_timeout:!1,idle_in_transaction_session_timeout:!1,query_timeout:!1,\r\nconnect_timeout:0,keepalives:1,keepalives_idle:0};var Me=Xe(),Na=Me.getTypeParser(\r\n20,\"text\"),Qa=Me.getTypeParser(1016,\"text\");Yt.exports.__defineSetter__(\"parseIn\\\r\nt8\",function(r){Me.setTypeParser(20,\"text\",r?Me.getTypeParser(23,\"text\"):Na),Me.\r\nsetTypeParser(1016,\"text\",r?Me.getTypeParser(1007,\"text\"):Qa)})});var tt=I((Gh,Mi)=>{\"use strict\";p();var Wa=(qt(),k(Ut)),ja=et();function Ha(r){var e=r.\r\nreplace(/\\\\/g,\"\\\\\\\\\").replace(/\"/g,'\\\\\"');return'\"'+e+'\"'}a(Ha,\"escapeElement\");\r\nfunction Fi(r){for(var e=\"{\",t=0;t<r.length;t++)t>0&&(e=e+\",\"),r[t]===null||typeof r[t]>\r\n\"u\"?e=e+\"NULL\":Array.isArray(r[t])?e=e+Fi(r[t]):r[t]instanceof d?e+=\"\\\\\\\\x\"+r[t].\r\ntoString(\"hex\"):e+=Ha(ft(r[t]));return e=e+\"}\",e}a(Fi,\"arrayString\");var ft=a(function(r,e){\r\nif(r==null)return null;if(r instanceof d)return r;if(ArrayBuffer.isView(r)){var t=d.\r\nfrom(r.buffer,r.byteOffset,r.byteLength);return t.length===r.byteLength?t:t.slice(\r\nr.byteOffset,r.byteOffset+r.byteLength)}return r instanceof Date?ja.parseInputDatesAsUTC?\r\nKa(r):$a(r):Array.isArray(r)?Fi(r):typeof r==\"object\"?Ga(r,e):r.toString()},\"pre\\\r\npareValue\");function Ga(r,e){if(r&&typeof r.toPostgres==\"function\"){if(e=e||[],e.\r\nindexOf(r)!==-1)throw new Error('circular reference detected while preparing \"'+\r\nr+'\" for query');return e.push(r),ft(r.toPostgres(ft),e)}return JSON.stringify(r)}\r\na(Ga,\"prepareObject\");function j(r,e){for(r=\"\"+r;r.length<e;)r=\"0\"+r;return r}a(\r\nj,\"pad\");function $a(r){var e=-r.getTimezoneOffset(),t=r.getFullYear(),n=t<1;n&&\r\n(t=Math.abs(t)+1);var i=j(t,4)+\"-\"+j(r.getMonth()+1,2)+\"-\"+j(r.getDate(),2)+\"T\"+\r\nj(r.getHours(),2)+\":\"+j(r.getMinutes(),2)+\":\"+j(r.getSeconds(),2)+\".\"+j(r.getMilliseconds(),\r\n3);return e<0?(i+=\"-\",e*=-1):i+=\"+\",i+=j(Math.floor(e/60),2)+\":\"+j(e%60,2),n&&(i+=\r\n\" BC\"),i}a($a,\"dateToString\");function Ka(r){var e=r.getUTCFullYear(),t=e<1;t&&(e=\r\nMath.abs(e)+1);var n=j(e,4)+\"-\"+j(r.getUTCMonth()+1,2)+\"-\"+j(r.getUTCDate(),2)+\"\\\r\nT\"+j(r.getUTCHours(),2)+\":\"+j(r.getUTCMinutes(),2)+\":\"+j(r.getUTCSeconds(),2)+\".\"+\r\nj(r.getUTCMilliseconds(),3);return n+=\"+00:00\",t&&(n+=\" BC\"),n}a(Ka,\"dateToStrin\\\r\ngUTC\");function Va(r,e,t){return r=typeof r==\"string\"?{text:r}:r,e&&(typeof e==\"\\\r\nfunction\"?r.callback=e:r.values=e),t&&(r.callback=t),r}a(Va,\"normalizeQueryConfi\\\r\ng\");var Zt=a(function(r){return Wa.createHash(\"md5\").update(r,\"utf-8\").digest(\"h\\\r\nex\")},\"md5\"),za=a(function(r,e,t){var n=Zt(e+r),i=Zt(d.concat([d.from(n),t]));return\"\\\r\nmd5\"+i},\"postgresMd5PasswordHash\");Mi.exports={prepareValue:a(function(e){return ft(\r\ne)},\"prepareValueWrapper\"),normalizeQueryConfig:Va,postgresMd5PasswordHash:za,md5:Zt}});var qi=I((Vh,Ui)=>{\"use strict\";p();var Jt=(qt(),k(Ut));function Ya(r){if(r.indexOf(\r\n\"SCRAM-SHA-256\")===-1)throw new Error(\"SASL: Only mechanism SCRAM-SHA-256 is cur\\\r\nrently supported\");let e=Jt.randomBytes(18).toString(\"base64\");return{mechanism:\"\\\r\nSCRAM-SHA-256\",clientNonce:e,response:\"n,,n=*,r=\"+e,message:\"SASLInitialResponse\"}}\r\na(Ya,\"startSession\");function Za(r,e,t){if(r.message!==\"SASLInitialResponse\")throw new Error(\r\n\"SASL: Last message was not SASLInitialResponse\");if(typeof e!=\"string\")throw new Error(\r\n\"SASL: SCRAM-SERVER-FIRST-MESSAGE: client password must be a string\");if(typeof t!=\r\n\"string\")throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serverData must be a\\\r\n string\");let n=eu(t);if(n.nonce.startsWith(r.clientNonce)){if(n.nonce.length===\r\nr.clientNonce.length)throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server n\\\r\nonce is too short\")}else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: serv\\\r\ner nonce does not start with client nonce\");var i=d.from(n.salt,\"base64\"),s=nu(e,\r\ni,n.iteration),o=De(s,\"Client Key\"),u=ru(o),c=\"n=*,r=\"+r.clientNonce,h=\"r=\"+n.nonce+\r\n\",s=\"+n.salt+\",i=\"+n.iteration,l=\"c=biws,r=\"+n.nonce,y=c+\",\"+h+\",\"+l,E=De(u,y),_=ki(\r\no,E),P=_.toString(\"base64\"),N=De(s,\"Server Key\"),J=De(N,y);r.message=\"SASLRespon\\\r\nse\",r.serverSignature=J.toString(\"base64\"),r.response=l+\",p=\"+P}a(Za,\"continueSe\\\r\nssion\");function Ja(r,e){if(r.message!==\"SASLResponse\")throw new Error(\"SASL: La\\\r\nst message was not SASLResponse\");if(typeof e!=\"string\")throw new Error(\"SASL: S\\\r\nCRAM-SERVER-FINAL-MESSAGE: serverData must be a string\");let{serverSignature:t}=tu(\r\ne);if(t!==r.serverSignature)throw new Error(\"SASL: SCRAM-SERVER-FINAL-MESSAGE: s\\\r\nerver signature does not match\")}a(Ja,\"finalizeSession\");function Xa(r){if(typeof r!=\r\n\"string\")throw new TypeError(\"SASL: text must be a string\");return r.split(\"\").map(\r\n(e,t)=>r.charCodeAt(t)).every(e=>e>=33&&e<=43||e>=45&&e<=126)}a(Xa,\"isPrintableC\\\r\nhars\");function Di(r){return/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.\r\ntest(r)}a(Di,\"isBase64\");function Oi(r){if(typeof r!=\"string\")throw new TypeError(\r\n\"SASL: attribute pairs text must be a string\");return new Map(r.split(\",\").map(e=>{\r\nif(!/^.=/.test(e))throw new Error(\"SASL: Invalid attribute pair entry\");let t=e[0],\r\nn=e.substring(2);return[t,n]}))}a(Oi,\"parseAttributePairs\");function eu(r){let e=Oi(\r\nr),t=e.get(\"r\");if(t){if(!Xa(t))throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAG\\\r\nE: nonce must only contain printable characters\")}else throw new Error(\"SASL: SC\\\r\nRAM-SERVER-FIRST-MESSAGE: nonce missing\");let n=e.get(\"s\");if(n){if(!Di(n))throw new Error(\r\n\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt must be base64\")}else throw new Error(\"S\\\r\nASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing\");let i=e.get(\"i\");if(i){if(!/^[1-9][0-9]*$/.\r\ntest(i))throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: invalid iteration cou\\\r\nnt\")}else throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing\");\r\nlet s=parseInt(i,10);return{nonce:t,salt:n,iteration:s}}a(eu,\"parseServerFirstMe\\\r\nssage\");function tu(r){let t=Oi(r).get(\"v\");if(t){if(!Di(t))throw new Error(\"SAS\\\r\nL: SCRAM-SERVER-FINAL-MESSAGE: server signature must be base64\")}else throw new Error(\r\n\"SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature is missing\");return{serverSignature:t}}\r\na(tu,\"parseServerFinalMessage\");function ki(r,e){if(!d.isBuffer(r))throw new TypeError(\r\n\"first argument must be a Buffer\");if(!d.isBuffer(e))throw new TypeError(\"second\\\r\n argument must be a Buffer\");if(r.length!==e.length)throw new Error(\"Buffer leng\\\r\nths must match\");if(r.length===0)throw new Error(\"Buffers cannot be empty\");return d.\r\nfrom(r.map((t,n)=>r[n]^e[n]))}a(ki,\"xorBuffers\");function ru(r){return Jt.createHash(\r\n\"sha256\").update(r).digest()}a(ru,\"sha256\");function De(r,e){return Jt.createHmac(\r\n\"sha256\",r).update(e).digest()}a(De,\"hmacSha256\");function nu(r,e,t){for(var n=De(\r\nr,d.concat([e,d.from([0,0,0,1])])),i=n,s=0;s<t-1;s++)n=De(r,n),i=ki(i,n);return i}\r\na(nu,\"Hi\");Ui.exports={startSession:Ya,continueSession:Za,finalizeSession:Ja}});var Xt={};X(Xt,{join:()=>iu});function iu(...r){return r.join(\"/\")}var er=K(()=>{\r\n\"use strict\";p();a(iu,\"join\")});var tr={};X(tr,{stat:()=>su});function su(r,e){e(new Error(\"No filesystem\"))}var rr=K(\r\n()=>{\"use strict\";p();a(su,\"stat\")});var nr={};X(nr,{default:()=>ou});var ou,ir=K(()=>{\"use strict\";p();ou={}});var Ni={};X(Ni,{StringDecoder:()=>sr});var or,sr,Qi=K(()=>{\"use strict\";p();or=class or{constructor(e){\r\nT(this,\"td\");this.td=new TextDecoder(e)}write(e){return this.td.decode(e,{stream:!0})}end(e){\r\nreturn this.td.decode(e)}};a(or,\"StringDecoder\");sr=or});var Gi=I((il,Hi)=>{\"use strict\";p();var{Transform:au}=(ir(),k(nr)),{StringDecoder:uu}=(Qi(),k(Ni)),\r\nwe=Symbol(\"last\"),pt=Symbol(\"decoder\");function cu(r,e,t){let n;if(this.overflow){\r\nif(n=this[pt].write(r).split(this.matcher),n.length===1)return t();n.shift(),this.\r\noverflow=!1}else this[we]+=this[pt].write(r),n=this[we].split(this.matcher);this[we]=\r\nn.pop();for(let i=0;i<n.length;i++)try{ji(this,this.mapper(n[i]))}catch(s){return t(\r\ns)}if(this.overflow=this[we].length>this.maxLength,this.overflow&&!this.skipOverflow){\r\nt(new Error(\"maximum buffer reached\"));return}t()}a(cu,\"transform\");function hu(r){\r\nif(this[we]+=this[pt].end(),this[we])try{ji(this,this.mapper(this[we]))}catch(e){\r\nreturn r(e)}r()}a(hu,\"flush\");function ji(r,e){e!==void 0&&r.push(e)}a(ji,\"push\");\r\nfunction Wi(r){return r}a(Wi,\"noop\");function lu(r,e,t){switch(r=r||/\\r?\\n/,e=e||\r\nWi,t=t||{},arguments.length){case 1:typeof r==\"function\"?(e=r,r=/\\r?\\n/):typeof r==\r\n\"object\"&&!(r instanceof RegExp)&&!r[Symbol.split]&&(t=r,r=/\\r?\\n/);break;case 2:\r\ntypeof r==\"function\"?(t=e,e=r,r=/\\r?\\n/):typeof e==\"object\"&&(t=e,e=Wi)}t=Object.\r\nassign({},t),t.autoDestroy=!0,t.transform=cu,t.flush=hu,t.readableObjectMode=!0;\r\nlet n=new au(t);return n[we]=\"\",n[pt]=new uu(\"utf8\"),n.matcher=r,n.mapper=e,n.maxLength=\r\nt.maxLength,n.skipOverflow=t.skipOverflow||!1,n.overflow=!1,n._destroy=function(i,s){\r\nthis._writableState.errorEmitted=!1,s(i)},n}a(lu,\"split\");Hi.exports=lu});var Vi=I((al,fe)=>{\"use strict\";p();var $i=(er(),k(Xt)),fu=(ir(),k(nr)).Stream,pu=Gi(),\r\nKi=(Ge(),k(He)),du=5432,dt=m.platform===\"win32\",rt=m.stderr,yu=56,mu=7,gu=61440,\r\nwu=32768;function bu(r){return(r&gu)==wu}a(bu,\"isRegFile\");var Oe=[\"host\",\"port\",\r\n\"database\",\"user\",\"password\"],ar=Oe.length,Su=Oe[ar-1];function ur(){var r=rt instanceof\r\nfu&&rt.writable===!0;if(r){var e=Array.prototype.slice.call(arguments).concat(`\r\n`);rt.write(Ki.format.apply(Ki,e))}}a(ur,\"warn\");Object.defineProperty(fe.exports,\r\n\"isWin\",{get:function(){return dt},set:function(r){dt=r}});fe.exports.warnTo=function(r){\r\nvar e=rt;return rt=r,e};fe.exports.getFileName=function(r){var e=r||m.env,t=e.PGPASSFILE||\r\n(dt?$i.join(e.APPDATA||\"./\",\"postgresql\",\"pgpass.conf\"):$i.join(e.HOME||\"./\",\".p\\\r\ngpass\"));return t};fe.exports.usePgPass=function(r,e){return Object.prototype.hasOwnProperty.\r\ncall(m.env,\"PGPASSWORD\")?!1:dt?!0:(e=e||\"<unkn>\",bu(r.mode)?r.mode&(yu|mu)?(ur('\\\r\nWARNING: password file \"%s\" has group or world access; permissions should be u=r\\\r\nw (0600) or less',e),!1):!0:(ur('WARNING: password file \"%s\" is not a plain file',\r\ne),!1))};var xu=fe.exports.match=function(r,e){return Oe.slice(0,-1).reduce(function(t,n,i){\r\nreturn i==1&&Number(r[n]||du)===Number(e[n])?t&&!0:t&&(e[n]===\"*\"||e[n]===r[n])},\r\n!0)};fe.exports.getPassword=function(r,e,t){var n,i=e.pipe(pu());function s(c){var h=Eu(\r\nc);h&&vu(h)&&xu(r,h)&&(n=h[Su],i.end())}a(s,\"onLine\");var o=a(function(){e.destroy(),\r\nt(n)},\"onEnd\"),u=a(function(c){e.destroy(),ur(\"WARNING: error on reading file: %\\\r\ns\",c),t(void 0)},\"onErr\");e.on(\"error\",u),i.on(\"data\",s).on(\"end\",o).on(\"error\",\r\nu)};var Eu=fe.exports.parseLine=function(r){if(r.length<11||r.match(/^\\s+#/))return null;\r\nfor(var e=\"\",t=\"\",n=0,i=0,s=0,o={},u=!1,c=a(function(l,y,E){var _=r.substring(y,\r\nE);Object.hasOwnProperty.call(m.env,\"PGPASS_NO_DEESCAPE\")||(_=_.replace(/\\\\([:\\\\])/g,\r\n\"$1\")),o[Oe[l]]=_},\"addToObj\"),h=0;h<r.length-1;h+=1){if(e=r.charAt(h+1),t=r.charAt(\r\nh),u=n==ar-1,u){c(n,i);break}h>=0&&e==\":\"&&t!==\"\\\\\"&&(c(n,i,h+1),i=h+2,n+=1)}return o=\r\nObject.keys(o).length===ar?o:null,o},vu=fe.exports.isValidEntry=function(r){for(var e={\r\n0:function(o){return o.length>0},1:function(o){return o===\"*\"?!0:(o=Number(o),isFinite(\r\no)&&o>0&&o<9007199254740992&&Math.floor(o)===o)},2:function(o){return o.length>0},\r\n3:function(o){return o.length>0},4:function(o){return o.length>0}},t=0;t<Oe.length;t+=\r\n1){var n=e[t],i=r[Oe[t]]||\"\",s=n(i);if(!s)return!1}return!0}});var Yi=I((ll,cr)=>{\"use strict\";p();var hl=(er(),k(Xt)),zi=(rr(),k(tr)),yt=Vi();\r\ncr.exports=function(r,e){var t=yt.getFileName();zi.stat(t,function(n,i){if(n||!yt.\r\nusePgPass(i,t))return e(void 0);var s=zi.createReadStream(t);yt.getPassword(r,s,\r\ne)})};cr.exports.warnTo=yt.warnTo});var hr=I((pl,Zi)=>{\"use strict\";p();var _u=Xe();function mt(r){this._types=r||_u,\r\nthis.text={},this.binary={}}a(mt,\"TypeOverrides\");mt.prototype.getOverrides=function(r){\r\nswitch(r){case\"text\":return this.text;case\"binary\":return this.binary;default:return{}}};\r\nmt.prototype.setTypeParser=function(r,e,t){typeof e==\"function\"&&(t=e,e=\"text\"),\r\nthis.getOverrides(e)[r]=t};mt.prototype.getTypeParser=function(r,e){return e=e||\r\n\"text\",this.getOverrides(e)[r]||this._types.getTypeParser(r,e)};Zi.exports=mt});var Ji={};X(Ji,{default:()=>Au});var Au,Xi=K(()=>{\"use strict\";p();Au={}});var es={};X(es,{parse:()=>lr});function lr(r,e=!1){let{protocol:t}=new URL(r),n=\"\\\r\nhttp:\"+r.substring(t.length),{username:i,password:s,host:o,hostname:u,port:c,pathname:h,\r\nsearch:l,searchParams:y,hash:E}=new URL(n);s=decodeURIComponent(s);let _=i+\":\"+s,\r\nP=e?Object.fromEntries(y.entries()):l;return{href:r,protocol:t,auth:_,username:i,\r\npassword:s,host:o,hostname:u,port:c,pathname:h,search:l,query:P,hash:E}}var fr=K(\r\n()=>{\"use strict\";p();a(lr,\"parse\")});var rs=I((bl,ts)=>{\"use strict\";p();var Cu=(fr(),k(es)),pr=(rr(),k(tr));function dr(r){\r\nif(r.charAt(0)===\"/\"){var t=r.split(\" \");return{host:t[0],database:t[1]}}var e=Cu.\r\nparse(/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(r)?encodeURI(r).replace(/\\%25(\\d\\d)/g,\r\n\"%$1\"):r,!0),t=e.query;for(var n in t)Array.isArray(t[n])&&(t[n]=t[n][t[n].length-\r\n1]);var i=(e.auth||\":\").split(\":\");if(t.user=i[0],t.password=i.splice(1).join(\":\"),\r\nt.port=e.port,e.protocol==\"socket:\")return t.host=decodeURI(e.pathname),t.database=\r\ne.query.db,t.client_encoding=e.query.encoding,t;t.host||(t.host=e.hostname);var s=e.\r\npathname;if(!t.host&&s&&/^%2f/i.test(s)){var o=s.split(\"/\");t.host=decodeURIComponent(\r\no[0]),s=o.splice(1).join(\"/\")}switch(s&&s.charAt(0)===\"/\"&&(s=s.slice(1)||null),\r\nt.database=s&&decodeURI(s),(t.ssl===\"true\"||t.ssl===\"1\")&&(t.ssl=!0),t.ssl===\"0\"&&\r\n(t.ssl=!1),(t.sslcert||t.sslkey||t.sslrootcert||t.sslmode)&&(t.ssl={}),t.sslcert&&\r\n(t.ssl.cert=pr.readFileSync(t.sslcert).toString()),t.sslkey&&(t.ssl.key=pr.readFileSync(\r\nt.sslkey).toString()),t.sslrootcert&&(t.ssl.ca=pr.readFileSync(t.sslrootcert).toString()),\r\nt.sslmode){case\"disable\":{t.ssl=!1;break}case\"prefer\":case\"require\":case\"verify-\\\r\nca\":case\"verify-full\":break;case\"no-verify\":{t.ssl.rejectUnauthorized=!1;break}}\r\nreturn t}a(dr,\"parse\");ts.exports=dr;dr.parse=dr});var gt=I((El,ss)=>{\"use strict\";p();var Iu=(Xi(),k(Ji)),is=et(),ns=rs().parse,V=a(\r\nfunction(r,e,t){return t===void 0?t=m.env[\"PG\"+r.toUpperCase()]:t===!1||(t=m.env[t]),\r\ne[r]||t||is[r]},\"val\"),Tu=a(function(){switch(m.env.PGSSLMODE){case\"disable\":return!1;case\"\\\r\nprefer\":case\"require\":case\"verify-ca\":case\"verify-full\":return!0;case\"no-verify\":\r\nreturn{rejectUnauthorized:!1}}return is.ssl},\"readSSLConfigFromEnvironment\"),ke=a(\r\nfunction(r){return\"'\"+(\"\"+r).replace(/\\\\/g,\"\\\\\\\\\").replace(/'/g,\"\\\\'\")+\"'\"},\"quo\\\r\nteParamValue\"),re=a(function(r,e,t){var n=e[t];n!=null&&r.push(t+\"=\"+ke(n))},\"ad\\\r\nd\"),mr=class mr{constructor(e){e=typeof e==\"string\"?ns(e):e||{},e.connectionString&&\r\n(e=Object.assign({},e,ns(e.connectionString))),this.user=V(\"user\",e),this.database=\r\nV(\"database\",e),this.database===void 0&&(this.database=this.user),this.port=parseInt(\r\nV(\"port\",e),10),this.host=V(\"host\",e),Object.defineProperty(this,\"password\",{configurable:!0,\r\nenumerable:!1,writable:!0,value:V(\"password\",e)}),this.binary=V(\"binary\",e),this.\r\noptions=V(\"options\",e),this.ssl=typeof e.ssl>\"u\"?Tu():e.ssl,typeof this.ssl==\"st\\\r\nring\"&&this.ssl===\"true\"&&(this.ssl=!0),this.ssl===\"no-verify\"&&(this.ssl={rejectUnauthorized:!1}),\r\nthis.ssl&&this.ssl.key&&Object.defineProperty(this.ssl,\"key\",{enumerable:!1}),this.\r\nclient_encoding=V(\"client_encoding\",e),this.replication=V(\"replication\",e),this.\r\nisDomainSocket=!(this.host||\"\").indexOf(\"/\"),this.application_name=V(\"applicatio\\\r\nn_name\",e,\"PGAPPNAME\"),this.fallback_application_name=V(\"fallback_application_na\\\r\nme\",e,!1),this.statement_timeout=V(\"statement_timeout\",e,!1),this.lock_timeout=V(\r\n\"lock_timeout\",e,!1),this.idle_in_transaction_session_timeout=V(\"idle_in_transac\\\r\ntion_session_timeout\",e,!1),this.query_timeout=V(\"query_timeout\",e,!1),e.connectionTimeoutMillis===\r\nvoid 0?this.connect_timeout=m.env.PGCONNECT_TIMEOUT||0:this.connect_timeout=Math.\r\nfloor(e.connectionTimeoutMillis/1e3),e.keepAlive===!1?this.keepalives=0:e.keepAlive===\r\n!0&&(this.keepalives=1),typeof e.keepAliveInitialDelayMillis==\"number\"&&(this.keepalives_idle=\r\nMath.floor(e.keepAliveInitialDelayMillis/1e3))}getLibpqConnectionString(e){var t=[];\r\nre(t,this,\"user\"),re(t,this,\"password\"),re(t,this,\"port\"),re(t,this,\"application\\\r\n_name\"),re(t,this,\"fallback_application_name\"),re(t,this,\"connect_timeout\"),re(t,\r\nthis,\"options\");var n=typeof this.ssl==\"object\"?this.ssl:this.ssl?{sslmode:this.\r\nssl}:{};if(re(t,n,\"sslmode\"),re(t,n,\"sslca\"),re(t,n,\"sslkey\"),re(t,n,\"sslcert\"),\r\nre(t,n,\"sslrootcert\"),this.database&&t.push(\"dbname=\"+ke(this.database)),this.replication&&\r\nt.push(\"replication=\"+ke(this.replication)),this.host&&t.push(\"host=\"+ke(this.host)),\r\nthis.isDomainSocket)return e(null,t.join(\" \"));this.client_encoding&&t.push(\"cli\\\r\nent_encoding=\"+ke(this.client_encoding)),Iu.lookup(this.host,function(i,s){return i?\r\ne(i,null):(t.push(\"hostaddr=\"+ke(s)),e(null,t.join(\" \")))})}};a(mr,\"ConnectionPa\\\r\nrameters\");var yr=mr;ss.exports=yr});var us=I((Al,as)=>{\"use strict\";p();var Pu=Xe(),os=/^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/,\r\nwr=class wr{constructor(e,t){this.command=null,this.rowCount=null,this.oid=null,\r\nthis.rows=[],this.fields=[],this._parsers=void 0,this._types=t,this.RowCtor=null,\r\nthis.rowAsArray=e===\"array\",this.rowAsArray&&(this.parseRow=this._parseRowAsArray)}addCommandComplete(e){\r\nvar t;e.text?t=os.exec(e.text):t=os.exec(e.command),t&&(this.command=t[1],t[3]?(this.\r\noid=parseInt(t[2],10),this.rowCount=parseInt(t[3],10)):t[2]&&(this.rowCount=parseInt(\r\nt[2],10)))}_parseRowAsArray(e){for(var t=new Array(e.length),n=0,i=e.length;n<i;n++){\r\nvar s=e[n];s!==null?t[n]=this._parsers[n](s):t[n]=null}return t}parseRow(e){for(var t={},\r\nn=0,i=e.length;n<i;n++){var s=e[n],o=this.fields[n].name;s!==null?t[o]=this._parsers[n](\r\ns):t[o]=null}return t}addRow(e){this.rows.push(e)}addFields(e){this.fields=e,this.\r\nfields.length&&(this._parsers=new Array(e.length));for(var t=0;t<e.length;t++){var n=e[t];\r\nthis._types?this._parsers[t]=this._types.getTypeParser(n.dataTypeID,n.format||\"t\\\r\next\"):this._parsers[t]=Pu.getTypeParser(n.dataTypeID,n.format||\"text\")}}};a(wr,\"\\\r\nResult\");var gr=wr;as.exports=gr});var fs=I((Tl,ls)=>{\"use strict\";p();var{EventEmitter:Bu}=ge(),cs=us(),hs=tt(),Sr=class Sr extends Bu{constructor(e,t,n){\r\nsuper(),e=hs.normalizeQueryConfig(e,t,n),this.text=e.text,this.values=e.values,this.\r\nrows=e.rows,this.types=e.types,this.name=e.name,this.binary=e.binary,this.portal=\r\ne.portal||\"\",this.callback=e.callback,this._rowMode=e.rowMode,m.domain&&e.callback&&\r\n(this.callback=m.domain.bind(e.callback)),this._result=new cs(this._rowMode,this.\r\ntypes),this._results=this._result,this.isPreparedStatement=!1,this._canceledDueToError=\r\n!1,this._promise=null}requiresPreparation(){return this.name||this.rows?!0:!this.\r\ntext||!this.values?!1:this.values.length>0}_checkForMultirow(){this._result.command&&\r\n(Array.isArray(this._results)||(this._results=[this._result]),this._result=new cs(\r\nthis._rowMode,this.types),this._results.push(this._result))}handleRowDescription(e){\r\nthis._checkForMultirow(),this._result.addFields(e.fields),this._accumulateRows=this.\r\ncallback||!this.listeners(\"row\").length}handleDataRow(e){let t;if(!this._canceledDueToError){\r\ntry{t=this._result.parseRow(e.fields)}catch(n){this._canceledDueToError=n;return}\r\nthis.emit(\"row\",t,this._result),this._accumulateRows&&this._result.addRow(t)}}handleCommandComplete(e,t){\r\nthis._checkForMultirow(),this._result.addCommandComplete(e),this.rows&&t.sync()}handleEmptyQuery(e){\r\nthis.rows&&e.sync()}handleError(e,t){if(this._canceledDueToError&&(e=this._canceledDueToError,\r\nthis._canceledDueToError=!1),this.callback)return this.callback(e);this.emit(\"er\\\r\nror\",e)}handleReadyForQuery(e){if(this._canceledDueToError)return this.handleError(\r\nthis._canceledDueToError,e);if(this.callback)try{this.callback(null,this._results)}catch(t){\r\nm.nextTick(()=>{throw t})}this.emit(\"end\",this._results)}submit(e){if(typeof this.\r\ntext!=\"string\"&&typeof this.name!=\"string\")return new Error(\"A query must have e\\\r\nither text or a name. Supplying neither is unsupported.\");let t=e.parsedStatements[this.\r\nname];return this.text&&t&&this.text!==t?new Error(`Prepared statements must be \\\r\nunique - '${this.name}' was used for a different statement`):this.values&&!Array.\r\nisArray(this.values)?new Error(\"Query values must be an array\"):(this.requiresPreparation()?\r\nthis.prepare(e):e.query(this.text),null)}hasBeenParsed(e){return this.name&&e.parsedStatements[this.\r\nname]}handlePortalSuspended(e){this._getRows(e,this.rows)}_getRows(e,t){e.execute(\r\n{portal:this.portal,rows:t}),t?e.flush():e.sync()}prepare(e){this.isPreparedStatement=\r\n!0,this.hasBeenParsed(e)||e.parse({text:this.text,name:this.name,types:this.types});\r\ntry{e.bind({portal:this.portal,statement:this.name,values:this.values,binary:this.\r\nbinary,valueMapper:hs.prepareValue})}catch(t){this.handleError(t,e);return}e.describe(\r\n{type:\"P\",name:this.portal||\"\"}),this._getRows(e,this.rows)}handleCopyInResponse(e){\r\ne.sendCopyFail(\"No source stream defined\")}handleCopyData(e,t){}};a(Sr,\"Query\");\r\nvar br=Sr;ls.exports=br});var ds={};X(ds,{Socket:()=>_e,isIP:()=>Lu});function Lu(r){return 0}var ps,x,_e,\r\nwt=K(()=>{\"use strict\";p();ps=We(ge(),1);a(Lu,\"isIP\");x=class x extends ps.EventEmitter{constructor(){\r\nsuper(...arguments);T(this,\"opts\",{});T(this,\"connecting\",!1);T(this,\"pending\",!0);\r\nT(this,\"writable\",!0);T(this,\"encrypted\",!1);T(this,\"authorized\",!1);T(this,\"des\\\r\ntroyed\",!1);T(this,\"ws\",null);T(this,\"writeBuffer\");T(this,\"tlsState\",0);T(this,\r\n\"tlsRead\");T(this,\"tlsWrite\")}static get poolQueryViaFetch(){return x.opts.poolQueryViaFetch??\r\nx.defaults.poolQueryViaFetch}static set poolQueryViaFetch(t){x.opts.poolQueryViaFetch=\r\nt}static get fetchEndpoint(){return x.opts.fetchEndpoint??x.defaults.fetchEndpoint}static set fetchEndpoint(t){\r\nx.opts.fetchEndpoint=t}static get fetchConnectionCache(){return x.opts.fetchConnectionCache??\r\nx.defaults.fetchConnectionCache}static set fetchConnectionCache(t){x.opts.fetchConnectionCache=\r\nt}static get fetchFunction(){return x.opts.fetchFunction??x.defaults.fetchFunction}static set fetchFunction(t){\r\nx.opts.fetchFunction=t}static get webSocketConstructor(){return x.opts.webSocketConstructor??\r\nx.defaults.webSocketConstructor}static set webSocketConstructor(t){x.opts.webSocketConstructor=\r\nt}get webSocketConstructor(){return this.opts.webSocketConstructor??x.webSocketConstructor}set webSocketConstructor(t){\r\nthis.opts.webSocketConstructor=t}static get wsProxy(){return x.opts.wsProxy??x.defaults.\r\nwsProxy}static set wsProxy(t){x.opts.wsProxy=t}get wsProxy(){return this.opts.wsProxy??\r\nx.wsProxy}set wsProxy(t){this.opts.wsProxy=t}static get coalesceWrites(){return x.\r\nopts.coalesceWrites??x.defaults.coalesceWrites}static set coalesceWrites(t){x.opts.\r\ncoalesceWrites=t}get coalesceWrites(){return this.opts.coalesceWrites??x.coalesceWrites}set coalesceWrites(t){\r\nthis.opts.coalesceWrites=t}static get useSecureWebSocket(){return x.opts.useSecureWebSocket??\r\nx.defaults.useSecureWebSocket}static set useSecureWebSocket(t){x.opts.useSecureWebSocket=\r\nt}get useSecureWebSocket(){return this.opts.useSecureWebSocket??x.useSecureWebSocket}set useSecureWebSocket(t){\r\nthis.opts.useSecureWebSocket=t}static get forceDisablePgSSL(){return x.opts.forceDisablePgSSL??\r\nx.defaults.forceDisablePgSSL}static set forceDisablePgSSL(t){x.opts.forceDisablePgSSL=\r\nt}get forceDisablePgSSL(){return this.opts.forceDisablePgSSL??x.forceDisablePgSSL}set forceDisablePgSSL(t){\r\nthis.opts.forceDisablePgSSL=t}static get disableSNI(){return x.opts.disableSNI??\r\nx.defaults.disableSNI}static set disableSNI(t){x.opts.disableSNI=t}get disableSNI(){\r\nreturn this.opts.disableSNI??x.disableSNI}set disableSNI(t){this.opts.disableSNI=\r\nt}static get pipelineConnect(){return x.opts.pipelineConnect??x.defaults.pipelineConnect}static set pipelineConnect(t){\r\nx.opts.pipelineConnect=t}get pipelineConnect(){return this.opts.pipelineConnect??\r\nx.pipelineConnect}set pipelineConnect(t){this.opts.pipelineConnect=t}static get subtls(){\r\nreturn x.opts.subtls??x.defaults.subtls}static set subtls(t){x.opts.subtls=t}get subtls(){\r\nreturn this.opts.subtls??x.subtls}set subtls(t){this.opts.subtls=t}static get pipelineTLS(){\r\nreturn x.opts.pipelineTLS??x.defaults.pipelineTLS}static set pipelineTLS(t){x.opts.\r\npipelineTLS=t}get pipelineTLS(){return this.opts.pipelineTLS??x.pipelineTLS}set pipelineTLS(t){\r\nthis.opts.pipelineTLS=t}static get rootCerts(){return x.opts.rootCerts??x.defaults.\r\nrootCerts}static set rootCerts(t){x.opts.rootCerts=t}get rootCerts(){return this.\r\nopts.rootCerts??x.rootCerts}set rootCerts(t){this.opts.rootCerts=t}wsProxyAddrForHost(t,n){\r\nlet i=this.wsProxy;if(i===void 0)throw new Error(\"No WebSocket proxy is configur\\\r\ned. Please see https://github.com/neondatabase/serverless/blob/main/CONFIG.md#ws\\\r\nproxy-string--host-string-port-number--string--string\");return typeof i==\"functi\\\r\non\"?i(t,n):`${i}?address=${t}:${n}`}setNoDelay(){return this}setKeepAlive(){return this}ref(){\r\nreturn this}unref(){return this}connect(t,n,i){this.connecting=!0,i&&this.once(\"\\\r\nconnect\",i);let s=a(()=>{this.connecting=!1,this.pending=!1,this.emit(\"connect\"),\r\nthis.emit(\"ready\")},\"handleWebSocketOpen\"),o=a((c,h=!1)=>{c.binaryType=\"arraybuf\\\r\nfer\",c.addEventListener(\"error\",l=>{this.emit(\"error\",l),this.emit(\"close\")}),c.\r\naddEventListener(\"message\",l=>{if(this.tlsState===0){let y=d.from(l.data);this.emit(\r\n\"data\",y)}}),c.addEventListener(\"close\",()=>{this.emit(\"close\")}),h?s():c.addEventListener(\r\n\"open\",s)},\"configureWebSocket\"),u;try{u=this.wsProxyAddrForHost(n,typeof t==\"st\\\r\nring\"?parseInt(t,10):t)}catch(c){this.emit(\"error\",c),this.emit(\"close\");return}\r\ntry{let h=(this.useSecureWebSocket?\"wss:\":\"ws:\")+\"//\"+u;if(this.webSocketConstructor!==\r\nvoid 0)this.ws=new this.webSocketConstructor(h),o(this.ws);else try{this.ws=new WebSocket(\r\nh),o(this.ws)}catch{this.ws=new __unstable_WebSocket(h),o(this.ws)}}catch(c){let l=(this.\r\nuseSecureWebSocket?\"https:\":\"http:\")+\"//\"+u;fetch(l,{headers:{Upgrade:\"websocket\"}}).\r\nthen(y=>{if(this.ws=y.webSocket,this.ws==null)throw c;this.ws.accept(),o(this.ws,\r\n!0)}).catch(y=>{this.emit(\"error\",new Error(`All attempts to open a WebSocket to\\\r\n connect to the database failed. Please refer to https://github.com/neondatabase\\\r\n/serverless/blob/main/CONFIG.md#websocketconstructor-typeof-websocket--undefined\\\r\n. Details: ${y.message}`)),this.emit(\"close\")})}}async startTls(t){if(this.subtls===\r\nvoid 0)throw new Error(\"For Postgres SSL connections, you must set `neonConfig.s\\\r\nubtls` to the subtls library. See https://github.com/neondatabase/serverless/blo\\\r\nb/main/CONFIG.md for more information.\");this.tlsState=1;let n=this.subtls.TrustedCert.\r\nfromPEM(this.rootCerts),i=new this.subtls.WebSocketReadQueue(this.ws),s=i.read.bind(\r\ni),o=this.rawWrite.bind(this),[u,c]=await this.subtls.startTls(t,n,s,o,{useSNI:!this.\r\ndisableSNI,expectPreData:this.pipelineTLS?new Uint8Array([83]):void 0});this.tlsRead=\r\nu,this.tlsWrite=c,this.tlsState=2,this.encrypted=!0,this.authorized=!0,this.emit(\r\n\"secureConnection\",this),this.tlsReadLoop()}async tlsReadLoop(){for(;;){let t=await this.\r\ntlsRead();if(t===void 0)break;{let n=d.from(t);this.emit(\"data\",n)}}}rawWrite(t){\r\nif(!this.coalesceWrites){this.ws.send(t);return}if(this.writeBuffer===void 0)this.\r\nwriteBuffer=t,setTimeout(()=>{this.ws.send(this.writeBuffer),this.writeBuffer=void 0},\r\n0);else{let n=new Uint8Array(this.writeBuffer.length+t.length);n.set(this.writeBuffer),\r\nn.set(t,this.writeBuffer.length),this.writeBuffer=n}}write(t,n=\"utf8\",i=s=>{}){return t.\r\nlength===0?(i(),!0):(typeof t==\"string\"&&(t=d.from(t,n)),this.tlsState===0?(this.\r\nrawWrite(t),i()):this.tlsState===1?this.once(\"secureConnection\",()=>{this.write(\r\nt,n,i)}):(this.tlsWrite(t),i()),!0)}end(t=d.alloc(0),n=\"utf8\",i=()=>{}){return this.\r\nwrite(t,n,()=>{this.ws.close(),i()}),this}destroy(){return this.destroyed=!0,this.\r\nend()}};a(x,\"Socket\"),T(x,\"defaults\",{poolQueryViaFetch:!1,fetchEndpoint:t=>\"htt\\\r\nps://\"+t+\"/sql\",fetchConnectionCache:!1,fetchFunction:void 0,webSocketConstructor:void 0,\r\nwsProxy:t=>t+\"/v2\",useSecureWebSocket:!0,forceDisablePgSSL:!0,coalesceWrites:!0,\r\npipelineConnect:\"password\",subtls:void 0,rootCerts:\"\",pipelineTLS:!1,disableSNI:!1}),\r\nT(x,\"opts\",{});_e=x});var zr=I(C=>{\"use strict\";p();Object.defineProperty(C,\"__esModule\",{value:!0});C.\r\nNoticeMessage=C.DataRowMessage=C.CommandCompleteMessage=C.ReadyForQueryMessage=C.\r\nNotificationResponseMessage=C.BackendKeyDataMessage=C.AuthenticationMD5Password=\r\nC.ParameterStatusMessage=C.ParameterDescriptionMessage=C.RowDescriptionMessage=C.\r\nField=C.CopyResponse=C.CopyDataMessage=C.DatabaseError=C.copyDone=C.emptyQuery=C.\r\nreplicationStart=C.portalSuspended=C.noData=C.closeComplete=C.bindComplete=C.parseComplete=\r\nvoid 0;C.parseComplete={name:\"parseComplete\",length:5};C.bindComplete={name:\"bin\\\r\ndComplete\",length:5};C.closeComplete={name:\"closeComplete\",length:5};C.noData={name:\"\\\r\nnoData\",length:5};C.portalSuspended={name:\"portalSuspended\",length:5};C.replicationStart=\r\n{name:\"replicationStart\",length:4};C.emptyQuery={name:\"emptyQuery\",length:4};C.copyDone=\r\n{name:\"copyDone\",length:4};var Dr=class Dr extends Error{constructor(e,t,n){super(\r\ne),this.length=t,this.name=n}};a(Dr,\"DatabaseError\");var xr=Dr;C.DatabaseError=xr;\r\nvar Or=class Or{constructor(e,t){this.length=e,this.chunk=t,this.name=\"copyData\"}};\r\na(Or,\"CopyDataMessage\");var Er=Or;C.CopyDataMessage=Er;var kr=class kr{constructor(e,t,n,i){\r\nthis.length=e,this.name=t,this.binary=n,this.columnTypes=new Array(i)}};a(kr,\"Co\\\r\npyResponse\");var vr=kr;C.CopyResponse=vr;var Ur=class Ur{constructor(e,t,n,i,s,o,u){\r\nthis.name=e,this.tableID=t,this.columnID=n,this.dataTypeID=i,this.dataTypeSize=s,\r\nthis.dataTypeModifier=o,this.format=u}};a(Ur,\"Field\");var _r=Ur;C.Field=_r;var qr=class qr{constructor(e,t){\r\nthis.length=e,this.fieldCount=t,this.name=\"rowDescription\",this.fields=new Array(\r\nthis.fieldCount)}};a(qr,\"RowDescriptionMessage\");var Ar=qr;C.RowDescriptionMessage=\r\nAr;var Nr=class Nr{constructor(e,t){this.length=e,this.parameterCount=t,this.name=\r\n\"parameterDescription\",this.dataTypeIDs=new Array(this.parameterCount)}};a(Nr,\"P\\\r\narameterDescriptionMessage\");var Cr=Nr;C.ParameterDescriptionMessage=Cr;var Qr=class Qr{constructor(e,t,n){\r\nthis.length=e,this.parameterName=t,this.parameterValue=n,this.name=\"parameterSta\\\r\ntus\"}};a(Qr,\"ParameterStatusMessage\");var Ir=Qr;C.ParameterStatusMessage=Ir;var Wr=class Wr{constructor(e,t){\r\nthis.length=e,this.salt=t,this.name=\"authenticationMD5Password\"}};a(Wr,\"Authenti\\\r\ncationMD5Password\");var Tr=Wr;C.AuthenticationMD5Password=Tr;var jr=class jr{constructor(e,t,n){\r\nthis.length=e,this.processID=t,this.secretKey=n,this.name=\"backendKeyData\"}};a(jr,\r\n\"BackendKeyDataMessage\");var Pr=jr;C.BackendKeyDataMessage=Pr;var Hr=class Hr{constructor(e,t,n,i){\r\nthis.length=e,this.processId=t,this.channel=n,this.payload=i,this.name=\"notifica\\\r\ntion\"}};a(Hr,\"NotificationResponseMessage\");var Br=Hr;C.NotificationResponseMessage=\r\nBr;var Gr=class Gr{constructor(e,t){this.length=e,this.status=t,this.name=\"ready\\\r\nForQuery\"}};a(Gr,\"ReadyForQueryMessage\");var Lr=Gr;C.ReadyForQueryMessage=Lr;var $r=class $r{constructor(e,t){\r\nthis.length=e,this.text=t,this.name=\"commandComplete\"}};a($r,\"CommandCompleteMes\\\r\nsage\");var Rr=$r;C.CommandCompleteMessage=Rr;var Kr=class Kr{constructor(e,t){this.\r\nlength=e,this.fields=t,this.name=\"dataRow\",this.fieldCount=t.length}};a(Kr,\"Data\\\r\nRowMessage\");var Fr=Kr;C.DataRowMessage=Fr;var Vr=class Vr{constructor(e,t){this.\r\nlength=e,this.message=t,this.name=\"notice\"}};a(Vr,\"NoticeMessage\");var Mr=Vr;C.NoticeMessage=\r\nMr});var ys=I(bt=>{\"use strict\";p();Object.defineProperty(bt,\"__esModule\",{value:!0});\r\nbt.Writer=void 0;var Zr=class Zr{constructor(e=256){this.size=e,this.offset=5,this.\r\nheaderPosition=0,this.buffer=d.allocUnsafe(e)}ensure(e){var t=this.buffer.length-\r\nthis.offset;if(t<e){var n=this.buffer,i=n.length+(n.length>>1)+e;this.buffer=d.allocUnsafe(\r\ni),n.copy(this.buffer)}}addInt32(e){return this.ensure(4),this.buffer[this.offset++]=\r\ne>>>24&255,this.buffer[this.offset++]=e>>>16&255,this.buffer[this.offset++]=e>>>\r\n8&255,this.buffer[this.offset++]=e>>>0&255,this}addInt16(e){return this.ensure(2),\r\nthis.buffer[this.offset++]=e>>>8&255,this.buffer[this.offset++]=e>>>0&255,this}addCString(e){\r\nif(!e)this.ensure(1);else{var t=d.byteLength(e);this.ensure(t+1),this.buffer.write(\r\ne,this.offset,\"utf-8\"),this.offset+=t}return this.buffer[this.offset++]=0,this}addString(e=\"\"){\r\nvar t=d.byteLength(e);return this.ensure(t),this.buffer.write(e,this.offset),this.\r\noffset+=t,this}add(e){return this.ensure(e.length),e.copy(this.buffer,this.offset),\r\nthis.offset+=e.length,this}join(e){if(e){this.buffer[this.headerPosition]=e;let t=this.\r\noffset-(this.headerPosition+1);this.buffer.writeInt32BE(t,this.headerPosition+1)}\r\nreturn this.buffer.slice(e?0:5,this.offset)}flush(e){var t=this.join(e);return this.\r\noffset=5,this.headerPosition=0,this.buffer=d.allocUnsafe(this.size),t}};a(Zr,\"Wr\\\r\niter\");var Yr=Zr;bt.Writer=Yr});var gs=I(xt=>{\"use strict\";p();Object.defineProperty(xt,\"__esModule\",{value:!0});\r\nxt.serialize=void 0;var Jr=ys(),F=new Jr.Writer,Ru=a(r=>{F.addInt16(3).addInt16(\r\n0);for(let n of Object.keys(r))F.addCString(n).addCString(r[n]);F.addCString(\"cl\\\r\nient_encoding\").addCString(\"UTF8\");var e=F.addCString(\"\").flush(),t=e.length+4;return new Jr.\r\nWriter().addInt32(t).add(e).flush()},\"startup\"),Fu=a(()=>{let r=d.allocUnsafe(8);\r\nreturn r.writeInt32BE(8,0),r.writeInt32BE(80877103,4),r},\"requestSsl\"),Mu=a(r=>F.\r\naddCString(r).flush(112),\"password\"),Du=a(function(r,e){return F.addCString(r).addInt32(\r\nd.byteLength(e)).addString(e),F.flush(112)},\"sendSASLInitialResponseMessage\"),Ou=a(\r\nfunction(r){return F.addString(r).flush(112)},\"sendSCRAMClientFinalMessage\"),ku=a(\r\nr=>F.addCString(r).flush(81),\"query\"),ms=[],Uu=a(r=>{let e=r.name||\"\";e.length>63&&\r\n(console.error(\"Warning! Postgres only supports 63 characters for query names.\"),\r\nconsole.error(\"You supplied %s (%s)\",e,e.length),console.error(\"This can cause c\\\r\nonflicts and silent errors executing queries\"));let t=r.types||ms;for(var n=t.length,\r\ni=F.addCString(e).addCString(r.text).addInt16(n),s=0;s<n;s++)i.addInt32(t[s]);return F.\r\nflush(80)},\"parse\"),Ue=new Jr.Writer,qu=a(function(r,e){for(let t=0;t<r.length;t++){\r\nlet n=e?e(r[t],t):r[t];n==null?(F.addInt16(0),Ue.addInt32(-1)):n instanceof d?(F.\r\naddInt16(1),Ue.addInt32(n.length),Ue.add(n)):(F.addInt16(0),Ue.addInt32(d.byteLength(\r\nn)),Ue.addString(n))}},\"writeValues\"),Nu=a((r={})=>{let e=r.portal||\"\",t=r.statement||\r\n\"\",n=r.binary||!1,i=r.values||ms,s=i.length;return F.addCString(e).addCString(t),\r\nF.addInt16(s),qu(i,r.valueMapper),F.addInt16(s),F.add(Ue.flush()),F.addInt16(n?1:\r\n0),F.flush(66)},\"bind\"),Qu=d.from([69,0,0,0,9,0,0,0,0,0]),Wu=a(r=>{if(!r||!r.portal&&\r\n!r.rows)return Qu;let e=r.portal||\"\",t=r.rows||0,n=d.byteLength(e),i=4+n+1+4,s=d.\r\nallocUnsafe(1+i);return s[0]=69,s.writeInt32BE(i,1),s.write(e,5,\"utf-8\"),s[n+5]=\r\n0,s.writeUInt32BE(t,s.length-4),s},\"execute\"),ju=a((r,e)=>{let t=d.allocUnsafe(16);\r\nreturn t.writeInt32BE(16,0),t.writeInt16BE(1234,4),t.writeInt16BE(5678,6),t.writeInt32BE(\r\nr,8),t.writeInt32BE(e,12),t},\"cancel\"),Xr=a((r,e)=>{let n=4+d.byteLength(e)+1,i=d.\r\nallocUnsafe(1+n);return i[0]=r,i.writeInt32BE(n,1),i.write(e,5,\"utf-8\"),i[n]=0,i},\r\n\"cstringMessage\"),Hu=F.addCString(\"P\").flush(68),Gu=F.addCString(\"S\").flush(68),\r\n$u=a(r=>r.name?Xr(68,`${r.type}${r.name||\"\"}`):r.type===\"P\"?Hu:Gu,\"describe\"),Ku=a(\r\nr=>{let e=`${r.type}${r.name||\"\"}`;return Xr(67,e)},\"close\"),Vu=a(r=>F.add(r).flush(\r\n100),\"copyData\"),zu=a(r=>Xr(102,r),\"copyFail\"),St=a(r=>d.from([r,0,0,0,4]),\"code\\\r\nOnlyBuffer\"),Yu=St(72),Zu=St(83),Ju=St(88),Xu=St(99),ec={startup:Ru,password:Mu,\r\nrequestSsl:Fu,sendSASLInitialResponseMessage:Du,sendSCRAMClientFinalMessage:Ou,query:ku,\r\nparse:Uu,bind:Nu,execute:Wu,describe:$u,close:Ku,flush:()=>Yu,sync:()=>Zu,end:()=>Ju,\r\ncopyData:Vu,copyDone:()=>Xu,copyFail:zu,cancel:ju};xt.serialize=ec});var ws=I(Et=>{\"use strict\";p();Object.defineProperty(Et,\"__esModule\",{value:!0});\r\nEt.BufferReader=void 0;var tc=d.allocUnsafe(0),tn=class tn{constructor(e=0){this.\r\noffset=e,this.buffer=tc,this.encoding=\"utf-8\"}setBuffer(e,t){this.offset=e,this.\r\nbuffer=t}int16(){let e=this.buffer.readInt16BE(this.offset);return this.offset+=\r\n2,e}byte(){let e=this.buffer[this.offset];return this.offset++,e}int32(){let e=this.\r\nbuffer.readInt32BE(this.offset);return this.offset+=4,e}string(e){let t=this.buffer.\r\ntoString(this.encoding,this.offset,this.offset+e);return this.offset+=e,t}cstring(){\r\nlet e=this.offset,t=e;for(;this.buffer[t++]!==0;);return this.offset=t,this.buffer.\r\ntoString(this.encoding,e,t-1)}bytes(e){let t=this.buffer.slice(this.offset,this.\r\noffset+e);return this.offset+=e,t}};a(tn,\"BufferReader\");var en=tn;Et.BufferReader=\r\nen});var bs={};X(bs,{default:()=>rc});var rc,Ss=K(()=>{\"use strict\";p();rc={}});var vs=I(qe=>{\"use strict\";p();var nc=qe&&qe.__importDefault||function(r){return r&&\r\nr.__esModule?r:{default:r}};Object.defineProperty(qe,\"__esModule\",{value:!0});qe.\r\nParser=void 0;var M=zr(),ic=ws(),sc=nc((Ss(),k(bs))),rn=1,oc=4,xs=rn+oc,Es=d.allocUnsafe(\r\n0),sn=class sn{constructor(e){if(this.buffer=Es,this.bufferLength=0,this.bufferOffset=\r\n0,this.reader=new ic.BufferReader,e?.mode===\"binary\")throw new Error(\"Binary mod\\\r\ne not supported yet\");this.mode=e?.mode||\"text\"}parse(e,t){this.mergeBuffer(e);let n=this.\r\nbufferOffset+this.bufferLength,i=this.bufferOffset;for(;i+xs<=n;){let s=this.buffer[i],\r\no=this.buffer.readUInt32BE(i+rn),u=rn+o;if(u+i<=n){let c=this.handlePacket(i+xs,\r\ns,o,this.buffer);t(c),i+=u}else break}i===n?(this.buffer=Es,this.bufferLength=0,\r\nthis.bufferOffset=0):(this.bufferLength=n-i,this.bufferOffset=i)}mergeBuffer(e){\r\nif(this.bufferLength>0){let t=this.bufferLength+e.byteLength;if(t+this.bufferOffset>\r\nthis.buffer.byteLength){let i;if(t<=this.buffer.byteLength&&this.bufferOffset>=this.\r\nbufferLength)i=this.buffer;else{let s=this.buffer.byteLength*2;for(;t>=s;)s*=2;i=\r\nd.allocUnsafe(s)}this.buffer.copy(i,0,this.bufferOffset,this.bufferOffset+this.bufferLength),\r\nthis.buffer=i,this.bufferOffset=0}e.copy(this.buffer,this.bufferOffset+this.bufferLength),\r\nthis.bufferLength=t}else this.buffer=e,this.bufferOffset=0,this.bufferLength=e.byteLength}handlePacket(e,t,n,i){\r\nswitch(t){case 50:return M.bindComplete;case 49:return M.parseComplete;case 51:return M.\r\ncloseComplete;case 110:return M.noData;case 115:return M.portalSuspended;case 99:\r\nreturn M.copyDone;case 87:return M.replicationStart;case 73:return M.emptyQuery;case 68:\r\nreturn this.parseDataRowMessage(e,n,i);case 67:return this.parseCommandCompleteMessage(\r\ne,n,i);case 90:return this.parseReadyForQueryMessage(e,n,i);case 65:return this.\r\nparseNotificationMessage(e,n,i);case 82:return this.parseAuthenticationResponse(\r\ne,n,i);case 83:return this.parseParameterStatusMessage(e,n,i);case 75:return this.\r\nparseBackendKeyData(e,n,i);case 69:return this.parseErrorMessage(e,n,i,\"error\");case 78:\r\nreturn this.parseErrorMessage(e,n,i,\"notice\");case 84:return this.parseRowDescriptionMessage(\r\ne,n,i);case 116:return this.parseParameterDescriptionMessage(e,n,i);case 71:return this.\r\nparseCopyInMessage(e,n,i);case 72:return this.parseCopyOutMessage(e,n,i);case 100:\r\nreturn this.parseCopyData(e,n,i);default:sc.default.fail(`unknown message code: ${t.\r\ntoString(16)}`)}}parseReadyForQueryMessage(e,t,n){this.reader.setBuffer(e,n);let i=this.\r\nreader.string(1);return new M.ReadyForQueryMessage(t,i)}parseCommandCompleteMessage(e,t,n){\r\nthis.reader.setBuffer(e,n);let i=this.reader.cstring();return new M.CommandCompleteMessage(\r\nt,i)}parseCopyData(e,t,n){let i=n.slice(e,e+(t-4));return new M.CopyDataMessage(\r\nt,i)}parseCopyInMessage(e,t,n){return this.parseCopyMessage(e,t,n,\"copyInRespons\\\r\ne\")}parseCopyOutMessage(e,t,n){return this.parseCopyMessage(e,t,n,\"copyOutRespon\\\r\nse\")}parseCopyMessage(e,t,n,i){this.reader.setBuffer(e,n);let s=this.reader.byte()!==\r\n0,o=this.reader.int16(),u=new M.CopyResponse(t,i,s,o);for(let c=0;c<o;c++)u.columnTypes[c]=\r\nthis.reader.int16();return u}parseNotificationMessage(e,t,n){this.reader.setBuffer(\r\ne,n);let i=this.reader.int32(),s=this.reader.cstring(),o=this.reader.cstring();return new M.\r\nNotificationResponseMessage(t,i,s,o)}parseRowDescriptionMessage(e,t,n){this.reader.\r\nsetBuffer(e,n);let i=this.reader.int16(),s=new M.RowDescriptionMessage(t,i);for(let o=0;o<\r\ni;o++)s.fields[o]=this.parseField();return s}parseField(){let e=this.reader.cstring(),\r\nt=this.reader.int32(),n=this.reader.int16(),i=this.reader.int32(),s=this.reader.\r\nint16(),o=this.reader.int32(),u=this.reader.int16()===0?\"text\":\"binary\";return new M.\r\nField(e,t,n,i,s,o,u)}parseParameterDescriptionMessage(e,t,n){this.reader.setBuffer(\r\ne,n);let i=this.reader.int16(),s=new M.ParameterDescriptionMessage(t,i);for(let o=0;o<\r\ni;o++)s.dataTypeIDs[o]=this.reader.int32();return s}parseDataRowMessage(e,t,n){this.\r\nreader.setBuffer(e,n);let i=this.reader.int16(),s=new Array(i);for(let o=0;o<i;o++){\r\nlet u=this.reader.int32();s[o]=u===-1?null:this.reader.string(u)}return new M.DataRowMessage(\r\nt,s)}parseParameterStatusMessage(e,t,n){this.reader.setBuffer(e,n);let i=this.reader.\r\ncstring(),s=this.reader.cstring();return new M.ParameterStatusMessage(t,i,s)}parseBackendKeyData(e,t,n){\r\nthis.reader.setBuffer(e,n);let i=this.reader.int32(),s=this.reader.int32();return new M.\r\nBackendKeyDataMessage(t,i,s)}parseAuthenticationResponse(e,t,n){this.reader.setBuffer(\r\ne,n);let i=this.reader.int32(),s={name:\"authenticationOk\",length:t};switch(i){case 0:\r\nbreak;case 3:s.length===8&&(s.name=\"authenticationCleartextPassword\");break;case 5:\r\nif(s.length===12){s.name=\"authenticationMD5Password\";let u=this.reader.bytes(4);\r\nreturn new M.AuthenticationMD5Password(t,u)}break;case 10:s.name=\"authentication\\\r\nSASL\",s.mechanisms=[];let o;do o=this.reader.cstring(),o&&s.mechanisms.push(o);while(o);\r\nbreak;case 11:s.name=\"authenticationSASLContinue\",s.data=this.reader.string(t-8);\r\nbreak;case 12:s.name=\"authenticationSASLFinal\",s.data=this.reader.string(t-8);break;default:\r\nthrow new Error(\"Unknown authenticationOk message type \"+i)}return s}parseErrorMessage(e,t,n,i){\r\nthis.reader.setBuffer(e,n);let s={},o=this.reader.string(1);for(;o!==\"\\0\";)s[o]=\r\nthis.reader.cstring(),o=this.reader.string(1);let u=s.M,c=i===\"notice\"?new M.NoticeMessage(\r\nt,u):new M.DatabaseError(u,t,i);return c.severity=s.S,c.code=s.C,c.detail=s.D,c.\r\nhint=s.H,c.position=s.P,c.internalPosition=s.p,c.internalQuery=s.q,c.where=s.W,c.\r\nschema=s.s,c.table=s.t,c.column=s.c,c.dataType=s.d,c.constraint=s.n,c.file=s.F,c.\r\nline=s.L,c.routine=s.R,c}};a(sn,\"Parser\");var nn=sn;qe.Parser=nn});var on=I(be=>{\"use strict\";p();Object.defineProperty(be,\"__esModule\",{value:!0});\r\nbe.DatabaseError=be.serialize=be.parse=void 0;var ac=zr();Object.defineProperty(\r\nbe,\"DatabaseError\",{enumerable:!0,get:function(){return ac.DatabaseError}});var uc=gs();\r\nObject.defineProperty(be,\"serialize\",{enumerable:!0,get:function(){return uc.serialize}});\r\nvar cc=vs();function hc(r,e){let t=new cc.Parser;return r.on(\"data\",n=>t.parse(n,\r\ne)),new Promise(n=>r.on(\"end\",()=>n()))}a(hc,\"parse\");be.parse=hc});var _s={};X(_s,{connect:()=>lc});function lc({socket:r,servername:e}){return r.startTls(\r\ne),r}var As=K(()=>{\"use strict\";p();a(lc,\"connect\")});var cn=I((ef,Ts)=>{\"use strict\";p();var Cs=(wt(),k(ds)),fc=ge().EventEmitter,{parse:pc,\r\nserialize:q}=on(),Is=q.flush(),dc=q.sync(),yc=q.end(),un=class un extends fc{constructor(e){\r\nsuper(),e=e||{},this.stream=e.stream||new Cs.Socket,this._keepAlive=e.keepAlive,\r\nthis._keepAliveInitialDelayMillis=e.keepAliveInitialDelayMillis,this.lastBuffer=\r\n!1,this.parsedStatements={},this.ssl=e.ssl||!1,this._ending=!1,this._emitMessage=\r\n!1;var t=this;this.on(\"newListener\",function(n){n===\"message\"&&(t._emitMessage=!0)})}connect(e,t){\r\nvar n=this;this._connecting=!0,this.stream.setNoDelay(!0),this.stream.connect(e,\r\nt),this.stream.once(\"connect\",function(){n._keepAlive&&n.stream.setKeepAlive(!0,\r\nn._keepAliveInitialDelayMillis),n.emit(\"connect\")});let i=a(function(s){n._ending&&\r\n(s.code===\"ECONNRESET\"||s.code===\"EPIPE\")||n.emit(\"error\",s)},\"reportStreamError\");\r\nif(this.stream.on(\"error\",i),this.stream.on(\"close\",function(){n.emit(\"end\")}),!this.\r\nssl)return this.attachListeners(this.stream);this.stream.once(\"data\",function(s){\r\nvar o=s.toString(\"utf8\");switch(o){case\"S\":break;case\"N\":return n.stream.end(),n.\r\nemit(\"error\",new Error(\"The server does not support SSL connections\"));default:return n.\r\nstream.end(),n.emit(\"error\",new Error(\"There was an error establishing an SSL co\\\r\nnnection\"))}var u=(As(),k(_s));let c={socket:n.stream};n.ssl!==!0&&(Object.assign(\r\nc,n.ssl),\"key\"in n.ssl&&(c.key=n.ssl.key)),Cs.isIP(t)===0&&(c.servername=t);try{\r\nn.stream=u.connect(c)}catch(h){return n.emit(\"error\",h)}n.attachListeners(n.stream),\r\nn.stream.on(\"error\",i),n.emit(\"sslconnect\")})}attachListeners(e){e.on(\"end\",()=>{\r\nthis.emit(\"end\")}),pc(e,t=>{var n=t.name===\"error\"?\"errorMessage\":t.name;this._emitMessage&&\r\nthis.emit(\"message\",t),this.emit(n,t)})}requestSsl(){this.stream.write(q.requestSsl())}startup(e){\r\nthis.stream.write(q.startup(e))}cancel(e,t){this._send(q.cancel(e,t))}password(e){\r\nthis._send(q.password(e))}sendSASLInitialResponseMessage(e,t){this._send(q.sendSASLInitialResponseMessage(\r\ne,t))}sendSCRAMClientFinalMessage(e){this._send(q.sendSCRAMClientFinalMessage(e))}_send(e){\r\nreturn this.stream.writable?this.stream.write(e):!1}query(e){this._send(q.query(\r\ne))}parse(e){this._send(q.parse(e))}bind(e){this._send(q.bind(e))}execute(e){this.\r\n_send(q.execute(e))}flush(){this.stream.writable&&this.stream.write(Is)}sync(){this.\r\n_ending=!0,this._send(Is),this._send(dc)}ref(){this.stream.ref()}unref(){this.stream.\r\nunref()}end(){if(this._ending=!0,!this._connecting||!this.stream.writable){this.\r\nstream.end();return}return this.stream.write(yc,()=>{this.stream.end()})}close(e){\r\nthis._send(q.close(e))}describe(e){this._send(q.describe(e))}sendCopyFromChunk(e){\r\nthis._send(q.copyData(e))}endCopyFrom(){this._send(q.copyDone())}sendCopyFail(e){\r\nthis._send(q.copyFail(e))}};a(un,\"Connection\");var an=un;Ts.exports=an});var Ls=I((sf,Bs)=>{\"use strict\";p();var mc=ge().EventEmitter,nf=(Ge(),k(He)),gc=tt(),\r\nhn=qi(),wc=Yi(),bc=hr(),Sc=gt(),Ps=fs(),xc=et(),Ec=cn(),ln=class ln extends mc{constructor(e){\r\nsuper(),this.connectionParameters=new Sc(e),this.user=this.connectionParameters.\r\nuser,this.database=this.connectionParameters.database,this.port=this.connectionParameters.\r\nport,this.host=this.connectionParameters.host,Object.defineProperty(this,\"passwo\\\r\nrd\",{configurable:!0,enumerable:!1,writable:!0,value:this.connectionParameters.password}),\r\nthis.replication=this.connectionParameters.replication;var t=e||{};this._Promise=\r\nt.Promise||b.Promise,this._types=new bc(t.types),this._ending=!1,this._connecting=\r\n!1,this._connected=!1,this._connectionError=!1,this._queryable=!0,this.connection=\r\nt.connection||new Ec({stream:t.stream,ssl:this.connectionParameters.ssl,keepAlive:t.\r\nkeepAlive||!1,keepAliveInitialDelayMillis:t.keepAliveInitialDelayMillis||0,encoding:this.\r\nconnectionParameters.client_encoding||\"utf8\"}),this.queryQueue=[],this.binary=t.\r\nbinary||xc.binary,this.processID=null,this.secretKey=null,this.ssl=this.connectionParameters.\r\nssl||!1,this.ssl&&this.ssl.key&&Object.defineProperty(this.ssl,\"key\",{enumerable:!1}),\r\nthis._connectionTimeoutMillis=t.connectionTimeoutMillis||0}_errorAllQueries(e){let t=a(\r\nn=>{m.nextTick(()=>{n.handleError(e,this.connection)})},\"enqueueError\");this.activeQuery&&\r\n(t(this.activeQuery),this.activeQuery=null),this.queryQueue.forEach(t),this.queryQueue.\r\nlength=0}_connect(e){var t=this,n=this.connection;if(this._connectionCallback=e,\r\nthis._connecting||this._connected){let i=new Error(\"Client has already been conn\\\r\nected. You cannot reuse a client.\");m.nextTick(()=>{e(i)});return}this._connecting=\r\n!0,this.connectionTimeoutHandle,this._connectionTimeoutMillis>0&&(this.connectionTimeoutHandle=\r\nsetTimeout(()=>{n._ending=!0,n.stream.destroy(new Error(\"timeout expired\"))},this.\r\n_connectionTimeoutMillis)),this.host&&this.host.indexOf(\"/\")===0?n.connect(this.\r\nhost+\"/.s.PGSQL.\"+this.port):n.connect(this.port,this.host),n.on(\"connect\",function(){\r\nt.ssl?n.requestSsl():n.startup(t.getStartupConf())}),n.on(\"sslconnect\",function(){\r\nn.startup(t.getStartupConf())}),this._attachListeners(n),n.once(\"end\",()=>{let i=this.\r\n_ending?new Error(\"Connection terminated\"):new Error(\"Connection terminated unex\\\r\npectedly\");clearTimeout(this.connectionTimeoutHandle),this._errorAllQueries(i),this.\r\n_ending||(this._connecting&&!this._connectionError?this._connectionCallback?this.\r\n_connectionCallback(i):this._handleErrorEvent(i):this._connectionError||this._handleErrorEvent(\r\ni)),m.nextTick(()=>{this.emit(\"end\")})})}connect(e){if(e){this._connect(e);return}\r\nreturn new this._Promise((t,n)=>{this._connect(i=>{i?n(i):t()})})}_attachListeners(e){\r\ne.on(\"authenticationCleartextPassword\",this._handleAuthCleartextPassword.bind(this)),\r\ne.on(\"authenticationMD5Password\",this._handleAuthMD5Password.bind(this)),e.on(\"a\\\r\nuthenticationSASL\",this._handleAuthSASL.bind(this)),e.on(\"authenticationSASLCont\\\r\ninue\",this._handleAuthSASLContinue.bind(this)),e.on(\"authenticationSASLFinal\",this.\r\n_handleAuthSASLFinal.bind(this)),e.on(\"backendKeyData\",this._handleBackendKeyData.\r\nbind(this)),e.on(\"error\",this._handleErrorEvent.bind(this)),e.on(\"errorMessage\",\r\nthis._handleErrorMessage.bind(this)),e.on(\"readyForQuery\",this._handleReadyForQuery.\r\nbind(this)),e.on(\"notice\",this._handleNotice.bind(this)),e.on(\"rowDescription\",this.\r\n_handleRowDescription.bind(this)),e.on(\"dataRow\",this._handleDataRow.bind(this)),\r\ne.on(\"portalSuspended\",this._handlePortalSuspended.bind(this)),e.on(\"emptyQuery\",\r\nthis._handleEmptyQuery.bind(this)),e.on(\"commandComplete\",this._handleCommandComplete.\r\nbind(this)),e.on(\"parseComplete\",this._handleParseComplete.bind(this)),e.on(\"cop\\\r\nyInResponse\",this._handleCopyInResponse.bind(this)),e.on(\"copyData\",this._handleCopyData.\r\nbind(this)),e.on(\"notification\",this._handleNotification.bind(this))}_checkPgPass(e){\r\nlet t=this.connection;typeof this.password==\"function\"?this._Promise.resolve().then(\r\n()=>this.password()).then(n=>{if(n!==void 0){if(typeof n!=\"string\"){t.emit(\"erro\\\r\nr\",new TypeError(\"Password must be a string\"));return}this.connectionParameters.\r\npassword=this.password=n}else this.connectionParameters.password=this.password=null;\r\ne()}).catch(n=>{t.emit(\"error\",n)}):this.password!==null?e():wc(this.connectionParameters,\r\nn=>{n!==void 0&&(this.connectionParameters.password=this.password=n),e()})}_handleAuthCleartextPassword(e){\r\nthis._checkPgPass(()=>{this.connection.password(this.password)})}_handleAuthMD5Password(e){\r\nthis._checkPgPass(()=>{let t=gc.postgresMd5PasswordHash(this.user,this.password,\r\ne.salt);this.connection.password(t)})}_handleAuthSASL(e){this._checkPgPass(()=>{\r\nthis.saslSession=hn.startSession(e.mechanisms),this.connection.sendSASLInitialResponseMessage(\r\nthis.saslSession.mechanism,this.saslSession.response)})}_handleAuthSASLContinue(e){\r\nhn.continueSession(this.saslSession,this.password,e.data),this.connection.sendSCRAMClientFinalMessage(\r\nthis.saslSession.response)}_handleAuthSASLFinal(e){hn.finalizeSession(this.saslSession,\r\ne.data),this.saslSession=null}_handleBackendKeyData(e){this.processID=e.processID,\r\nthis.secretKey=e.secretKey}_handleReadyForQuery(e){this._connecting&&(this._connecting=\r\n!1,this._connected=!0,clearTimeout(this.connectionTimeoutHandle),this._connectionCallback&&\r\n(this._connectionCallback(null,this),this._connectionCallback=null),this.emit(\"c\\\r\nonnect\"));let{activeQuery:t}=this;this.activeQuery=null,this.readyForQuery=!0,t&&\r\nt.handleReadyForQuery(this.connection),this._pulseQueryQueue()}_handleErrorWhileConnecting(e){\r\nif(!this._connectionError){if(this._connectionError=!0,clearTimeout(this.connectionTimeoutHandle),\r\nthis._connectionCallback)return this._connectionCallback(e);this.emit(\"error\",e)}}_handleErrorEvent(e){\r\nif(this._connecting)return this._handleErrorWhileConnecting(e);this._queryable=!1,\r\nthis._errorAllQueries(e),this.emit(\"error\",e)}_handleErrorMessage(e){if(this._connecting)\r\nreturn this._handleErrorWhileConnecting(e);let t=this.activeQuery;if(!t){this._handleErrorEvent(\r\ne);return}this.activeQuery=null,t.handleError(e,this.connection)}_handleRowDescription(e){\r\nthis.activeQuery.handleRowDescription(e)}_handleDataRow(e){this.activeQuery.handleDataRow(\r\ne)}_handlePortalSuspended(e){this.activeQuery.handlePortalSuspended(this.connection)}_handleEmptyQuery(e){\r\nthis.activeQuery.handleEmptyQuery(this.connection)}_handleCommandComplete(e){this.\r\nactiveQuery.handleCommandComplete(e,this.connection)}_handleParseComplete(e){this.\r\nactiveQuery.name&&(this.connection.parsedStatements[this.activeQuery.name]=this.\r\nactiveQuery.text)}_handleCopyInResponse(e){this.activeQuery.handleCopyInResponse(\r\nthis.connection)}_handleCopyData(e){this.activeQuery.handleCopyData(e,this.connection)}_handleNotification(e){\r\nthis.emit(\"notification\",e)}_handleNotice(e){this.emit(\"notice\",e)}getStartupConf(){\r\nvar e=this.connectionParameters,t={user:e.user,database:e.database},n=e.application_name||\r\ne.fallback_application_name;return n&&(t.application_name=n),e.replication&&(t.replication=\r\n\"\"+e.replication),e.statement_timeout&&(t.statement_timeout=String(parseInt(e.statement_timeout,\r\n10))),e.lock_timeout&&(t.lock_timeout=String(parseInt(e.lock_timeout,10))),e.idle_in_transaction_session_timeout&&\r\n(t.idle_in_transaction_session_timeout=String(parseInt(e.idle_in_transaction_session_timeout,\r\n10))),e.options&&(t.options=e.options),t}cancel(e,t){if(e.activeQuery===t){var n=this.\r\nconnection;this.host&&this.host.indexOf(\"/\")===0?n.connect(this.host+\"/.s.PGSQL.\"+\r\nthis.port):n.connect(this.port,this.host),n.on(\"connect\",function(){n.cancel(e.processID,\r\ne.secretKey)})}else e.queryQueue.indexOf(t)!==-1&&e.queryQueue.splice(e.queryQueue.\r\nindexOf(t),1)}setTypeParser(e,t,n){return this._types.setTypeParser(e,t,n)}getTypeParser(e,t){\r\nreturn this._types.getTypeParser(e,t)}escapeIdentifier(e){return'\"'+e.replace(/\"/g,\r\n'\"\"')+'\"'}escapeLiteral(e){for(var t=!1,n=\"'\",i=0;i<e.length;i++){var s=e[i];s===\r\n\"'\"?n+=s+s:s===\"\\\\\"?(n+=s+s,t=!0):n+=s}return n+=\"'\",t===!0&&(n=\" E\"+n),n}_pulseQueryQueue(){\r\nif(this.readyForQuery===!0)if(this.activeQuery=this.queryQueue.shift(),this.activeQuery){\r\nthis.readyForQuery=!1,this.hasExecuted=!0;let e=this.activeQuery.submit(this.connection);\r\ne&&m.nextTick(()=>{this.activeQuery.handleError(e,this.connection),this.readyForQuery=\r\n!0,this._pulseQueryQueue()})}else this.hasExecuted&&(this.activeQuery=null,this.\r\nemit(\"drain\"))}query(e,t,n){var i,s,o,u,c;if(e==null)throw new TypeError(\"Client\\\r\n was passed a null or undefined query\");return typeof e.submit==\"function\"?(o=e.\r\nquery_timeout||this.connectionParameters.query_timeout,s=i=e,typeof t==\"function\"&&\r\n(i.callback=i.callback||t)):(o=this.connectionParameters.query_timeout,i=new Ps(\r\ne,t,n),i.callback||(s=new this._Promise((h,l)=>{i.callback=(y,E)=>y?l(y):h(E)}))),\r\no&&(c=i.callback,u=setTimeout(()=>{var h=new Error(\"Query read timeout\");m.nextTick(\r\n()=>{i.handleError(h,this.connection)}),c(h),i.callback=()=>{};var l=this.queryQueue.\r\nindexOf(i);l>-1&&this.queryQueue.splice(l,1),this._pulseQueryQueue()},o),i.callback=\r\n(h,l)=>{clearTimeout(u),c(h,l)}),this.binary&&!i.binary&&(i.binary=!0),i._result&&\r\n!i._result._types&&(i._result._types=this._types),this._queryable?this._ending?(m.\r\nnextTick(()=>{i.handleError(new Error(\"Client was closed and is not queryable\"),\r\nthis.connection)}),s):(this.queryQueue.push(i),this._pulseQueryQueue(),s):(m.nextTick(\r\n()=>{i.handleError(new Error(\"Client has encountered a connection error and is n\\\r\not queryable\"),this.connection)}),s)}ref(){this.connection.ref()}unref(){this.connection.\r\nunref()}end(e){if(this._ending=!0,!this.connection._connecting)if(e)e();else return this.\r\n_Promise.resolve();if(this.activeQuery||!this._queryable?this.connection.stream.\r\ndestroy():this.connection.end(),e)this.connection.once(\"end\",e);else return new this.\r\n_Promise(t=>{this.connection.once(\"end\",t)})}};a(ln,\"Client\");var vt=ln;vt.Query=\r\nPs;Bs.exports=vt});var Ds=I((uf,Ms)=>{\"use strict\";p();var vc=ge().EventEmitter,Rs=a(function(){},\"\\\r\nNOOP\"),Fs=a((r,e)=>{let t=r.findIndex(e);return t===-1?void 0:r.splice(t,1)[0]},\r\n\"removeWhere\"),dn=class dn{constructor(e,t,n){this.client=e,this.idleListener=t,\r\nthis.timeoutId=n}};a(dn,\"IdleItem\");var fn=dn,yn=class yn{constructor(e){this.callback=\r\ne}};a(yn,\"PendingItem\");var Ne=yn;function _c(){throw new Error(\"Release called \\\r\non client which has already been released to the pool.\")}a(_c,\"throwOnDoubleRele\\\r\nase\");function _t(r,e){if(e)return{callback:e,result:void 0};let t,n,i=a(function(o,u){\r\no?t(o):n(u)},\"cb\"),s=new r(function(o,u){n=o,t=u}).catch(o=>{throw Error.captureStackTrace(\r\no),o});return{callback:i,result:s}}a(_t,\"promisify\");function Ac(r,e){return a(function t(n){\r\nn.client=e,e.removeListener(\"error\",t),e.on(\"error\",()=>{r.log(\"additional clien\\\r\nt error after disconnection due to error\",n)}),r._remove(e),r.emit(\"error\",n,e)},\r\n\"idleListener\")}a(Ac,\"makeIdleListener\");var mn=class mn extends vc{constructor(e,t){\r\nsuper(),this.options=Object.assign({},e),e!=null&&\"password\"in e&&Object.defineProperty(\r\nthis.options,\"password\",{configurable:!0,enumerable:!1,writable:!0,value:e.password}),\r\ne!=null&&e.ssl&&e.ssl.key&&Object.defineProperty(this.options.ssl,\"key\",{enumerable:!1}),\r\nthis.options.max=this.options.max||this.options.poolSize||10,this.options.maxUses=\r\nthis.options.maxUses||1/0,this.options.allowExitOnIdle=this.options.allowExitOnIdle||\r\n!1,this.options.maxLifetimeSeconds=this.options.maxLifetimeSeconds||0,this.log=this.\r\noptions.log||function(){},this.Client=this.options.Client||t||At().Client,this.Promise=\r\nthis.options.Promise||b.Promise,typeof this.options.idleTimeoutMillis>\"u\"&&(this.\r\noptions.idleTimeoutMillis=1e4),this._clients=[],this._idle=[],this._expired=new WeakSet,\r\nthis._pendingQueue=[],this._endCallback=void 0,this.ending=!1,this.ended=!1}_isFull(){\r\nreturn this._clients.length>=this.options.max}_pulseQueue(){if(this.log(\"pulse q\\\r\nueue\"),this.ended){this.log(\"pulse queue ended\");return}if(this.ending){this.log(\r\n\"pulse queue on ending\"),this._idle.length&&this._idle.slice().map(t=>{this._remove(\r\nt.client)}),this._clients.length||(this.ended=!0,this._endCallback());return}if(!this.\r\n_pendingQueue.length){this.log(\"no queued requests\");return}if(!this._idle.length&&\r\nthis._isFull())return;let e=this._pendingQueue.shift();if(this._idle.length){let t=this.\r\n_idle.pop();clearTimeout(t.timeoutId);let n=t.client;n.ref&&n.ref();let i=t.idleListener;\r\nreturn this._acquireClient(n,e,i,!1)}if(!this._isFull())return this.newClient(e);\r\nthrow new Error(\"unexpected condition\")}_remove(e){let t=Fs(this._idle,n=>n.client===\r\ne);t!==void 0&&clearTimeout(t.timeoutId),this._clients=this._clients.filter(n=>n!==\r\ne),e.end(),this.emit(\"remove\",e)}connect(e){if(this.ending){let i=new Error(\"Can\\\r\nnot use a pool after calling end on the pool\");return e?e(i):this.Promise.reject(\r\ni)}let t=_t(this.Promise,e),n=t.result;if(this._isFull()||this._idle.length){if(this.\r\n_idle.length&&m.nextTick(()=>this._pulseQueue()),!this.options.connectionTimeoutMillis)\r\nreturn this._pendingQueue.push(new Ne(t.callback)),n;let i=a((u,c,h)=>{clearTimeout(\r\no),t.callback(u,c,h)},\"queueCallback\"),s=new Ne(i),o=setTimeout(()=>{Fs(this._pendingQueue,\r\nu=>u.callback===i),s.timedOut=!0,t.callback(new Error(\"timeout exceeded when try\\\r\ning to connect\"))},this.options.connectionTimeoutMillis);return this._pendingQueue.\r\npush(s),n}return this.newClient(new Ne(t.callback)),n}newClient(e){let t=new this.\r\nClient(this.options);this._clients.push(t);let n=Ac(this,t);this.log(\"checking c\\\r\nlient timeout\");let i,s=!1;this.options.connectionTimeoutMillis&&(i=setTimeout(()=>{\r\nthis.log(\"ending client due to timeout\"),s=!0,t.connection?t.connection.stream.destroy():\r\nt.end()},this.options.connectionTimeoutMillis)),this.log(\"connecting new client\"),\r\nt.connect(o=>{if(i&&clearTimeout(i),t.on(\"error\",n),o)this.log(\"client failed to\\\r\n connect\",o),this._clients=this._clients.filter(u=>u!==t),s&&(o.message=\"Connect\\\r\nion terminated due to connection timeout\"),this._pulseQueue(),e.timedOut||e.callback(\r\no,void 0,Rs);else{if(this.log(\"new client connected\"),this.options.maxLifetimeSeconds!==\r\n0){let u=setTimeout(()=>{this.log(\"ending client due to expired lifetime\"),this.\r\n_expired.add(t),this._idle.findIndex(h=>h.client===t)!==-1&&this._acquireClient(\r\nt,new Ne((h,l,y)=>y()),n,!1)},this.options.maxLifetimeSeconds*1e3);u.unref(),t.once(\r\n\"end\",()=>clearTimeout(u))}return this._acquireClient(t,e,n,!0)}})}_acquireClient(e,t,n,i){\r\ni&&this.emit(\"connect\",e),this.emit(\"acquire\",e),e.release=this._releaseOnce(e,n),\r\ne.removeListener(\"error\",n),t.timedOut?i&&this.options.verify?this.options.verify(\r\ne,e.release):e.release():i&&this.options.verify?this.options.verify(e,s=>{if(s)return e.\r\nrelease(s),t.callback(s,void 0,Rs);t.callback(void 0,e,e.release)}):t.callback(void 0,\r\ne,e.release)}_releaseOnce(e,t){let n=!1;return i=>{n&&_c(),n=!0,this._release(e,\r\nt,i)}}_release(e,t,n){if(e.on(\"error\",t),e._poolUseCount=(e._poolUseCount||0)+1,\r\nthis.emit(\"release\",n,e),n||this.ending||!e._queryable||e._ending||e._poolUseCount>=\r\nthis.options.maxUses){e._poolUseCount>=this.options.maxUses&&this.log(\"remove ex\\\r\npended client\"),this._remove(e),this._pulseQueue();return}if(this._expired.has(e)){\r\nthis.log(\"remove expired client\"),this._expired.delete(e),this._remove(e),this._pulseQueue();\r\nreturn}let s;this.options.idleTimeoutMillis&&(s=setTimeout(()=>{this.log(\"remove\\\r\n idle client\"),this._remove(e)},this.options.idleTimeoutMillis),this.options.allowExitOnIdle&&\r\ns.unref()),this.options.allowExitOnIdle&&e.unref(),this._idle.push(new fn(e,t,s)),\r\nthis._pulseQueue()}query(e,t,n){if(typeof e==\"function\"){let s=_t(this.Promise,e);\r\nreturn S(function(){return s.callback(new Error(\"Passing a function as the first\\\r\n parameter to pool.query is not supported\"))}),s.result}typeof t==\"function\"&&(n=\r\nt,t=void 0);let i=_t(this.Promise,n);return n=i.callback,this.connect((s,o)=>{if(s)\r\nreturn n(s);let u=!1,c=a(h=>{u||(u=!0,o.release(h),n(h))},\"onError\");o.once(\"err\\\r\nor\",c),this.log(\"dispatching query\");try{o.query(e,t,(h,l)=>{if(this.log(\"query \\\r\ndispatched\"),o.removeListener(\"error\",c),!u)return u=!0,o.release(h),h?n(h):n(void 0,\r\nl)})}catch(h){return o.release(h),n(h)}}),i.result}end(e){if(this.log(\"ending\"),\r\nthis.ending){let n=new Error(\"Called end on pool more than once\");return e?e(n):\r\nthis.Promise.reject(n)}this.ending=!0;let t=_t(this.Promise,e);return this._endCallback=\r\nt.callback,this._pulseQueue(),t.result}get waitingCount(){return this._pendingQueue.\r\nlength}get idleCount(){return this._idle.length}get expiredCount(){return this._clients.\r\nreduce((e,t)=>e+(this._expired.has(t)?1:0),0)}get totalCount(){return this._clients.\r\nlength}};a(mn,\"Pool\");var pn=mn;Ms.exports=pn});var Os={};X(Os,{default:()=>Cc});var Cc,ks=K(()=>{\"use strict\";p();Cc={}});var Us=I((ff,Ic)=>{Ic.exports={name:\"pg\",version:\"8.8.0\",description:\"PostgreSQL\\\r\n client - pure javascript & libpq with the same API\",keywords:[\"database\",\"libpq\",\r\n\"pg\",\"postgre\",\"postgres\",\"postgresql\",\"rdbms\"],homepage:\"https://github.com/bri\\\r\nanc/node-postgres\",repository:{type:\"git\",url:\"git://github.com/brianc/node-post\\\r\ngres.git\",directory:\"packages/pg\"},author:\"Brian Carlson <brian.m.carlson@gmail.\\\r\ncom>\",main:\"./lib\",dependencies:{\"buffer-writer\":\"2.0.0\",\"packet-reader\":\"1.0.0\",\r\n\"pg-connection-string\":\"^2.5.0\",\"pg-pool\":\"^3.5.2\",\"pg-protocol\":\"^1.5.0\",\"pg-ty\\\r\npes\":\"^2.1.0\",pgpass:\"1.x\"},devDependencies:{async:\"2.6.4\",bluebird:\"3.5.2\",co:\"\\\r\n4.6.0\",\"pg-copy-streams\":\"0.3.0\"},peerDependencies:{\"pg-native\":\">=3.0.1\"},peerDependenciesMeta:{\r\n\"pg-native\":{optional:!0}},scripts:{test:\"make test-all\"},files:[\"lib\",\"SPONSORS\\\r\n.md\"],license:\"MIT\",engines:{node:\">= 8.0.0\"},gitHead:\"c99fb2c127ddf8d712500db2c\\\r\n7b9a5491a178655\"}});var Qs=I((pf,Ns)=>{\"use strict\";p();var qs=ge().EventEmitter,Tc=(Ge(),k(He)),gn=tt(),\r\nQe=Ns.exports=function(r,e,t){qs.call(this),r=gn.normalizeQueryConfig(r,e,t),this.\r\ntext=r.text,this.values=r.values,this.name=r.name,this.callback=r.callback,this.\r\nstate=\"new\",this._arrayMode=r.rowMode===\"array\",this._emitRowEvents=!1,this.on(\"\\\r\nnewListener\",function(n){n===\"row\"&&(this._emitRowEvents=!0)}.bind(this))};Tc.inherits(\r\nQe,qs);var Pc={sqlState:\"code\",statementPosition:\"position\",messagePrimary:\"mess\\\r\nage\",context:\"where\",schemaName:\"schema\",tableName:\"table\",columnName:\"column\",dataTypeName:\"\\\r\ndataType\",constraintName:\"constraint\",sourceFile:\"file\",sourceLine:\"line\",sourceFunction:\"\\\r\nroutine\"};Qe.prototype.handleError=function(r){var e=this.native.pq.resultErrorFields();\r\nif(e)for(var t in e){var n=Pc[t]||t;r[n]=e[t]}this.callback?this.callback(r):this.\r\nemit(\"error\",r),this.state=\"error\"};Qe.prototype.then=function(r,e){return this.\r\n_getPromise().then(r,e)};Qe.prototype.catch=function(r){return this._getPromise().\r\ncatch(r)};Qe.prototype._getPromise=function(){return this._promise?this._promise:\r\n(this._promise=new Promise(function(r,e){this._once(\"end\",r),this._once(\"error\",\r\ne)}.bind(this)),this._promise)};Qe.prototype.submit=function(r){this.state=\"runn\\\r\ning\";var e=this;this.native=r.native,r.native.arrayMode=this._arrayMode;var t=a(\r\nfunction(s,o,u){if(r.native.arrayMode=!1,S(function(){e.emit(\"_done\")}),s)return e.\r\nhandleError(s);e._emitRowEvents&&(u.length>1?o.forEach((c,h)=>{c.forEach(l=>{e.emit(\r\n\"row\",l,u[h])})}):o.forEach(function(c){e.emit(\"row\",c,u)})),e.state=\"end\",e.emit(\r\n\"end\",u),e.callback&&e.callback(null,u)},\"after\");if(m.domain&&(t=m.domain.bind(\r\nt)),this.name){this.name.length>63&&(console.error(\"Warning! Postgres only suppo\\\r\nrts 63 characters for query names.\"),console.error(\"You supplied %s (%s)\",this.name,\r\nthis.name.length),console.error(\"This can cause conflicts and silent errors exec\\\r\nuting queries\"));var n=(this.values||[]).map(gn.prepareValue);if(r.namedQueries[this.\r\nname]){if(this.text&&r.namedQueries[this.name]!==this.text){let s=new Error(`Pre\\\r\npared statements must be unique - '${this.name}' was used for a different statem\\\r\nent`);return t(s)}return r.native.execute(this.name,n,t)}return r.native.prepare(\r\nthis.name,this.text,n.length,function(s){return s?t(s):(r.namedQueries[e.name]=e.\r\ntext,e.native.execute(e.name,n,t))})}else if(this.values){if(!Array.isArray(this.\r\nvalues)){let s=new Error(\"Query values must be an array\");return t(s)}var i=this.\r\nvalues.map(gn.prepareValue);r.native.query(this.text,i,t)}else r.native.query(this.\r\ntext,t)}});var Gs=I((gf,Hs)=>{\"use strict\";p();var Bc=(ks(),k(Os)),Lc=hr(),mf=Us(),Ws=ge().\r\nEventEmitter,Rc=(Ge(),k(He)),Fc=gt(),js=Qs(),Z=Hs.exports=function(r){Ws.call(this),\r\nr=r||{},this._Promise=r.Promise||b.Promise,this._types=new Lc(r.types),this.native=\r\nnew Bc({types:this._types}),this._queryQueue=[],this._ending=!1,this._connecting=\r\n!1,this._connected=!1,this._queryable=!0;var e=this.connectionParameters=new Fc(\r\nr);this.user=e.user,Object.defineProperty(this,\"password\",{configurable:!0,enumerable:!1,\r\nwritable:!0,value:e.password}),this.database=e.database,this.host=e.host,this.port=\r\ne.port,this.namedQueries={}};Z.Query=js;Rc.inherits(Z,Ws);Z.prototype._errorAllQueries=\r\nfunction(r){let e=a(t=>{m.nextTick(()=>{t.native=this.native,t.handleError(r)})},\r\n\"enqueueError\");this._hasActiveQuery()&&(e(this._activeQuery),this._activeQuery=\r\nnull),this._queryQueue.forEach(e),this._queryQueue.length=0};Z.prototype._connect=\r\nfunction(r){var e=this;if(this._connecting){m.nextTick(()=>r(new Error(\"Client h\\\r\nas already been connected. You cannot reuse a client.\")));return}this._connecting=\r\n!0,this.connectionParameters.getLibpqConnectionString(function(t,n){if(t)return r(\r\nt);e.native.connect(n,function(i){if(i)return e.native.end(),r(i);e._connected=!0,\r\ne.native.on(\"error\",function(s){e._queryable=!1,e._errorAllQueries(s),e.emit(\"er\\\r\nror\",s)}),e.native.on(\"notification\",function(s){e.emit(\"notification\",{channel:s.\r\nrelname,payload:s.extra})}),e.emit(\"connect\"),e._pulseQueryQueue(!0),r()})})};Z.\r\nprototype.connect=function(r){if(r){this._connect(r);return}return new this._Promise(\r\n(e,t)=>{this._connect(n=>{n?t(n):e()})})};Z.prototype.query=function(r,e,t){var n,\r\ni,s,o,u;if(r==null)throw new TypeError(\"Client was passed a null or undefined qu\\\r\nery\");if(typeof r.submit==\"function\")s=r.query_timeout||this.connectionParameters.\r\nquery_timeout,i=n=r,typeof e==\"function\"&&(r.callback=e);else if(s=this.connectionParameters.\r\nquery_timeout,n=new js(r,e,t),!n.callback){let c,h;i=new this._Promise((l,y)=>{c=\r\nl,h=y}),n.callback=(l,y)=>l?h(l):c(y)}return s&&(u=n.callback,o=setTimeout(()=>{\r\nvar c=new Error(\"Query read timeout\");m.nextTick(()=>{n.handleError(c,this.connection)}),\r\nu(c),n.callback=()=>{};var h=this._queryQueue.indexOf(n);h>-1&&this._queryQueue.\r\nsplice(h,1),this._pulseQueryQueue()},s),n.callback=(c,h)=>{clearTimeout(o),u(c,h)}),\r\nthis._queryable?this._ending?(n.native=this.native,m.nextTick(()=>{n.handleError(\r\nnew Error(\"Client was closed and is not queryable\"))}),i):(this._queryQueue.push(\r\nn),this._pulseQueryQueue(),i):(n.native=this.native,m.nextTick(()=>{n.handleError(\r\nnew Error(\"Client has encountered a connection error and is not queryable\"))}),i)};\r\nZ.prototype.end=function(r){var e=this;this._ending=!0,this._connected||this.once(\r\n\"connect\",this.end.bind(this,r));var t;return r||(t=new this._Promise(function(n,i){\r\nr=a(s=>s?i(s):n(),\"cb\")})),this.native.end(function(){e._errorAllQueries(new Error(\r\n\"Connection terminated\")),m.nextTick(()=>{e.emit(\"end\"),r&&r()})}),t};Z.prototype.\r\n_hasActiveQuery=function(){return this._activeQuery&&this._activeQuery.state!==\"\\\r\nerror\"&&this._activeQuery.state!==\"end\"};Z.prototype._pulseQueryQueue=function(r){\r\nif(this._connected&&!this._hasActiveQuery()){var e=this._queryQueue.shift();if(!e){\r\nr||this.emit(\"drain\");return}this._activeQuery=e,e.submit(this);var t=this;e.once(\r\n\"_done\",function(){t._pulseQueryQueue()})}};Z.prototype.cancel=function(r){this.\r\n_activeQuery===r?this.native.cancel(function(){}):this._queryQueue.indexOf(r)!==\r\n-1&&this._queryQueue.splice(this._queryQueue.indexOf(r),1)};Z.prototype.ref=function(){};\r\nZ.prototype.unref=function(){};Z.prototype.setTypeParser=function(r,e,t){return this.\r\n_types.setTypeParser(r,e,t)};Z.prototype.getTypeParser=function(r,e){return this.\r\n_types.getTypeParser(r,e)}});var wn=I((Sf,$s)=>{\"use strict\";p();$s.exports=Gs()});var At=I((Ef,nt)=>{\"use strict\";p();var Mc=Ls(),Dc=et(),Oc=cn(),kc=Ds(),{DatabaseError:Uc}=on(),\r\nqc=a(r=>{var e;return e=class extends kc{constructor(n){super(n,r)}},a(e,\"BoundP\\\r\nool\"),e},\"poolFactory\"),bn=a(function(r){this.defaults=Dc,this.Client=r,this.Query=\r\nthis.Client.Query,this.Pool=qc(this.Client),this._pools=[],this.Connection=Oc,this.\r\ntypes=Xe(),this.DatabaseError=Uc},\"PG\");typeof m.env.NODE_PG_FORCE_NATIVE<\"u\"?nt.\r\nexports=new bn(wn()):(nt.exports=new bn(Mc),Object.defineProperty(nt.exports,\"na\\\r\ntive\",{configurable:!0,enumerable:!1,get(){var r=null;try{r=new bn(wn())}catch(e){\r\nif(e.code!==\"MODULE_NOT_FOUND\")throw e}return Object.defineProperty(nt.exports,\"\\\r\nnative\",{value:r}),r}}))});p();var Ct=We(At());wt();p();fr();wt();var zs=We(tt());var Sn=class Sn extends Error{constructor(){super(...arguments);T(this,\"name\",\"N\\\r\neonDbError\");T(this,\"code\",null);T(this,\"sourceError\")}};a(Sn,\"NeonDbError\");var Ae=Sn,\r\nKs=\"transaction() expects an array of queries, or a function returning an array \\\r\nof queries\";function Ys(r,{arrayMode:e,fullResults:t,fetchOptions:n,isolationLevel:i,\r\nreadOnly:s,deferrable:o,queryCallback:u,resultCallback:c}={}){if(!r)throw new Error(\r\n\"No database connection string was provided to `neon()`. Perhaps an environment \\\r\nvariable has not been set?\");let h;try{h=lr(r)}catch{throw new Error(\"Database c\\\r\nonnection string provided to `neon()` is not a valid URL. Connection string: \"+String(\r\nr))}let{protocol:l,username:y,password:E,hostname:_,port:P,pathname:N}=h;if(l!==\r\n\"postgres:\"&&l!==\"postgresql:\"||!y||!E||!_||!N)throw new Error(\"Database connect\\\r\nion string format for `neon()` should be: postgresql://user:password@host.tld/db\\\r\nname?option=value\");function J(A,...g){let D,H;if(typeof A==\"string\")D=A,H=g[1],\r\ng=g[0]??[];else{D=\"\";for(let W=0;W<A.length;W++)D+=A[W],W<g.length&&(D+=\"$\"+(W+1))}\r\ng=g.map(W=>(0,zs.prepareValue)(W));let Q={query:D,params:g};return u&&u(Q),Nc(pe,\r\nQ,H)}a(J,\"resolve\"),J.transaction=async(A,g)=>{if(typeof A==\"function\"&&(A=A(J)),\r\n!Array.isArray(A))throw new Error(Ks);let D=A.map(H=>{if(H[Symbol.toStringTag]!==\r\n\"NeonQueryPromise\")throw new Error(Ks);return H.parameterizedQuery});return pe(D,\r\ng)};async function pe(A,g){let D=n??{},{fetchEndpoint:H,fetchConnectionCache:Q,fetchFunction:W}=_e,\r\nue=typeof H==\"function\"?H(_,P):H,de=Array.isArray(A)?{queries:A}:A,L=e??!1,G=t??\r\n!1,ce=i,ye=s,xe=o;g!==void 0&&(g.arrayMode!==void 0&&(L=g.arrayMode),g.fullResults!==\r\nvoid 0&&(G=g.fullResults),g.fetchOptions!==void 0&&(D={...D,...g.fetchOptions}),\r\ng.isolationLevel!==void 0&&(ce=g.isolationLevel),g.readOnly!==void 0&&(ye=g.readOnly),\r\ng.deferrable!==void 0&&(xe=g.deferrable));let he={\"Neon-Connection-String\":r,\"Ne\\\r\non-Raw-Text-Output\":\"true\",\"Neon-Array-Mode\":\"true\"};Q===!0&&(he[\"Neon-Pool-Opt-\\\r\nIn\"]=\"true\"),Array.isArray(A)&&(ce!==void 0&&(he[\"Neon-Batch-Isolation-Level\"]=ce),\r\nye!==void 0&&(he[\"Neon-Batch-Read-Only\"]=String(ye)),xe!==void 0&&(he[\"Neon-Batc\\\r\nh-Deferrable\"]=String(xe)));let ie;try{ie=await(W??fetch)(ue,{method:\"POST\",body:JSON.\r\nstringify(de),headers:he,...D})}catch(se){let $=new Ae(`Error connecting to data\\\r\nbase: ${se.message}`);throw $.sourceError=se,$}if(ie.ok){let se=await ie.json();\r\nif(Array.isArray(A)){let $=se.results;if(!Array.isArray($))throw new Ae(\"Neon in\\\r\nternal error: unexpected result format\");return $.map((ne,Ce)=>Vs(ne,{arrayMode:L,\r\nfullResults:G,parameterizedQuery:A[Ce],resultCallback:c}))}else return Vs(se,{arrayMode:L,\r\nfullResults:G,parameterizedQuery:A,resultCallback:c})}else{let{status:se}=ie;if(se===\r\n400){let{message:$,code:ne}=await ie.json(),Ce=new Ae($);throw Ce.code=ne,Ce}else{\r\nlet $=await ie.text();throw new Ae(`Server error (HTTP status ${se}): ${$}`)}}}return a(\r\npe,\"execute\"),J}a(Ys,\"neon\");function Nc(r,e,t){return{[Symbol.toStringTag]:\"Neo\\\r\nnQueryPromise\",parameterizedQuery:e,opts:t,then:(n,i)=>r(e,t).then(n,i),catch:n=>r(\r\ne,t).catch(n),finally:n=>r(e,t).finally(n)}}a(Nc,\"createNeonQueryPromise\");function Vs(r,{\r\narrayMode:e,fullResults:t,parameterizedQuery:n,resultCallback:i}){let s=r.fields.\r\nmap(c=>c.name),o=r.fields.map(c=>Se.types.getTypeParser(c.dataTypeID)),u=e===!0?\r\nr.rows.map(c=>c.map((h,l)=>h===null?null:o[l](h))):r.rows.map(c=>Object.fromEntries(\r\nc.map((h,l)=>[s[l],h===null?null:o[l](h)])));return i&&i(n,r,u,{arrayMode:e,fullResults:t}),\r\nt?(r.viaNeonFetch=!0,r.rowAsArray=e,r.rows=u,r):u}a(Vs,\"processQueryResult\");var Js=We(gt()),Se=We(At());var En=class En extends Ct.Client{constructor(t){super(t);this.config=t}get neonConfig(){\r\nreturn this.connection.stream}connect(t){let{neonConfig:n}=this;n.forceDisablePgSSL&&\r\n(this.ssl=this.connection.ssl=!1),this.ssl&&n.useSecureWebSocket&&console.warn(\"\\\r\nSSL is enabled for both Postgres (e.g. ?sslmode=require in the connection string\\\r\n + forceDisablePgSSL = false) and the WebSocket tunnel (useSecureWebSocket = tru\\\r\ne). Double encryption will increase latency and CPU usage. It may be appropriate\\\r\n to disable SSL in the Postgres connection parameters or set forceDisablePgSSL =\\\r\n true.\");let i=this.config?.host!==void 0||this.config?.connectionString!==void 0||\r\nm.env.PGHOST!==void 0,s=m.env.USER??m.env.USERNAME;if(!i&&this.host===\"localhost\"&&\r\nthis.user===s&&this.database===s&&this.password===null)throw new Error(`No datab\\\r\nase host or connection string was set, and key parameters have default values (h\\\r\nost: localhost, user: ${s}, db: ${s}, password: null). Is an environment variabl\\\r\ne missing? Alternatively, if you intended to connect with these parameters, plea\\\r\nse set the host to 'localhost' explicitly.`);let o=super.connect(t),u=n.pipelineTLS&&\r\nthis.ssl,c=n.pipelineConnect===\"password\";if(!u&&!n.pipelineConnect)return o;let h=this.\r\nconnection;if(u&&h.on(\"connect\",()=>h.stream.emit(\"data\",\"S\")),c){h.removeAllListeners(\r\n\"authenticationCleartextPassword\"),h.removeAllListeners(\"readyForQuery\"),h.once(\r\n\"readyForQuery\",()=>h.on(\"readyForQuery\",this._handleReadyForQuery.bind(this)));\r\nlet l=this.ssl?\"sslconnect\":\"connect\";h.on(l,()=>{this._handleAuthCleartextPassword(),\r\nthis._handleReadyForQuery()})}return o}async _handleAuthSASLContinue(t){let n=this.\r\nsaslSession,i=this.password,s=t.data;if(n.message!==\"SASLInitialResponse\"||typeof i!=\r\n\"string\"||typeof s!=\"string\")throw new Error(\"SASL: protocol error\");let o=Object.\r\nfromEntries(s.split(\",\").map($=>{if(!/^.=/.test($))throw new Error(\"SASL: Invali\\\r\nd attribute pair entry\");let ne=$[0],Ce=$.substring(2);return[ne,Ce]})),u=o.r,c=o.\r\ns,h=o.i;if(!u||!/^[!-+--~]+$/.test(u))throw new Error(\"SASL: SCRAM-SERVER-FIRST-\\\r\nMESSAGE: nonce missing/unprintable\");if(!c||!/^(?:[a-zA-Z0-9+/]{4})*(?:[a-zA-Z0-9+/]{2}==|[a-zA-Z0-9+/]{3}=)?$/.\r\ntest(c))throw new Error(\"SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing/not base\\\r\n64\");if(!h||!/^[1-9][0-9]*$/.test(h))throw new Error(\"SASL: SCRAM-SERVER-FIRST-M\\\r\nESSAGE: missing/invalid iteration count\");if(!u.startsWith(n.clientNonce))throw new Error(\r\n\"SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce\");\r\nif(u.length===n.clientNonce.length)throw new Error(\"SASL: SCRAM-SERVER-FIRST-MES\\\r\nSAGE: server nonce is too short\");let l=parseInt(h,10),y=d.from(c,\"base64\"),E=new TextEncoder,\r\n_=E.encode(i),P=await w.subtle.importKey(\"raw\",_,{name:\"HMAC\",hash:{name:\"SHA-25\\\r\n6\"}},!1,[\"sign\"]),N=new Uint8Array(await w.subtle.sign(\"HMAC\",P,d.concat([y,d.from(\r\n[0,0,0,1])]))),J=N;for(var pe=0;pe<l-1;pe++)N=new Uint8Array(await w.subtle.sign(\r\n\"HMAC\",P,N)),J=d.from(J.map(($,ne)=>J[ne]^N[ne]));let A=J,g=await w.subtle.importKey(\r\n\"raw\",A,{name:\"HMAC\",hash:{name:\"SHA-256\"}},!1,[\"sign\"]),D=new Uint8Array(await w.\r\nsubtle.sign(\"HMAC\",g,E.encode(\"Client Key\"))),H=await w.subtle.digest(\"SHA-256\",\r\nD),Q=\"n=*,r=\"+n.clientNonce,W=\"r=\"+u+\",s=\"+c+\",i=\"+l,ue=\"c=biws,r=\"+u,de=Q+\",\"+W+\r\n\",\"+ue,L=await w.subtle.importKey(\"raw\",H,{name:\"HMAC\",hash:{name:\"SHA-256\"}},!1,\r\n[\"sign\"]);var G=new Uint8Array(await w.subtle.sign(\"HMAC\",L,E.encode(de))),ce=d.\r\nfrom(D.map(($,ne)=>D[ne]^G[ne])),ye=ce.toString(\"base64\");let xe=await w.subtle.\r\nimportKey(\"raw\",A,{name:\"HMAC\",hash:{name:\"SHA-256\"}},!1,[\"sign\"]),he=await w.subtle.\r\nsign(\"HMAC\",xe,E.encode(\"Server Key\")),ie=await w.subtle.importKey(\"raw\",he,{name:\"\\\r\nHMAC\",hash:{name:\"SHA-256\"}},!1,[\"sign\"]);var se=d.from(await w.subtle.sign(\"HMA\\\r\nC\",ie,E.encode(de)));n.message=\"SASLResponse\",n.serverSignature=se.toString(\"bas\\\r\ne64\"),n.response=ue+\",p=\"+ye,this.connection.sendSCRAMClientFinalMessage(this.saslSession.\r\nresponse)}};a(En,\"NeonClient\");var xn=En;function Qc(r,e){if(e)return{callback:e,\r\nresult:void 0};let t,n,i=a(function(o,u){o?t(o):n(u)},\"cb\"),s=new r(function(o,u){\r\nn=o,t=u});return{callback:i,result:s}}a(Qc,\"promisify\");var vn=class vn extends Ct.Pool{constructor(){\r\nsuper(...arguments);T(this,\"Client\",xn);T(this,\"hasFetchUnsupportedListeners\",!1)}on(t,n){\r\nreturn t!==\"error\"&&(this.hasFetchUnsupportedListeners=!0),super.on(t,n)}query(t,n,i){\r\nif(!_e.poolQueryViaFetch||this.hasFetchUnsupportedListeners||typeof t==\"function\")\r\nreturn super.query(t,n,i);typeof n==\"function\"&&(i=n,n=void 0);let s=Qc(this.Promise,\r\ni);i=s.callback;try{let o=new Js.default(this.options),u=encodeURIComponent,c=encodeURI,\r\nh=`postgresql://${u(o.user)}:${u(o.password)}@${u(o.host)}/${c(o.database)}`,l=typeof t==\r\n\"string\"?t:t.text,y=n??t.values??[];Ys(h,{fullResults:!0,arrayMode:t.rowMode===\"\\\r\narray\"})(l,y).then(_=>i(void 0,_)).catch(_=>i(_))}catch(o){i(o)}return s.result}};\r\na(vn,\"NeonPool\");var Zs=vn;var export_ClientBase=Se.ClientBase;var export_Connection=Se.Connection;var export_DatabaseError=Se.DatabaseError;\r\nvar export_Query=Se.Query;var export_defaults=Se.defaults;var export_types=Se.types;\r\n\r\n/*! Bundled license information:\r\n\r\nieee754/index.js:\r\n  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)\r\n\r\nbuffer/index.js:\r\n  (*!\r\n   * The buffer module from node.js, for the browser.\r\n   *\r\n   * @author   Feross Aboukhadijeh <https://feross.org>\r\n   * @license  MIT\r\n   *)\r\n*/\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@neondatabase/serverless/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* binding */ VercelClient),\n/* harmony export */   VercelPool: () => (/* binding */ VercelPool),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createPool: () => (/* binding */ createPool),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   postgresConnectionString: () => (/* binding */ postgresConnectionString),\n/* harmony export */   sql: () => (/* binding */ sql),\n/* harmony export */   types: () => (/* reexport safe */ _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@neondatabase/serverless/index.mjs\");\n// src/create-pool.ts\r\n\r\n\r\n// src/error.ts\r\nvar VercelPostgresError = class extends Error {\r\n  constructor(code, message) {\r\n    super(`VercelPostgresError - '${code}': ${message}`);\r\n    this.code = code;\r\n    this.name = \"VercelPostgresError\";\r\n  }\r\n};\r\n\r\n// src/postgres-connection-string.ts\r\nfunction postgresConnectionString(type = \"pool\") {\r\n  let connectionString;\r\n  switch (type) {\r\n    case \"pool\": {\r\n      connectionString = process.env.POSTGRES_URL;\r\n      break;\r\n    }\r\n    case \"direct\": {\r\n      connectionString = process.env.POSTGRES_URL_NON_POOLING;\r\n      break;\r\n    }\r\n    default: {\r\n      const _exhaustiveCheck = type;\r\n      const str = _exhaustiveCheck;\r\n      throw new VercelPostgresError(\r\n        \"invalid_connection_type\",\r\n        `Unhandled type: ${str}`\r\n      );\r\n    }\r\n  }\r\n  if (connectionString === \"undefined\")\r\n    connectionString = void 0;\r\n  return connectionString;\r\n}\r\nfunction isPooledConnectionString(connectionString) {\r\n  return connectionString.includes(\"-pooler.\");\r\n}\r\nfunction isDirectConnectionString(connectionString) {\r\n  return !isPooledConnectionString(connectionString);\r\n}\r\nfunction isLocalhostConnectionString(connectionString) {\r\n  try {\r\n    const withHttpsProtocol = connectionString.replace(\r\n      /^postgresql:\\/\\//,\r\n      \"https://\"\r\n    );\r\n    return new URL(withHttpsProtocol).hostname === \"localhost\";\r\n  } catch (err) {\r\n    if (err instanceof TypeError) {\r\n      return false;\r\n    }\r\n    if (typeof err === \"object\" && err !== null && \"message\" in err && typeof err.message === \"string\" && err.message === \"Invalid URL\") {\r\n      return false;\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n\r\n// src/sql-template.ts\r\nfunction sqlTemplate(strings, ...values) {\r\n  var _a, _b;\r\n  if (!isTemplateStringsArray(strings) || !Array.isArray(values)) {\r\n    throw new VercelPostgresError(\r\n      \"incorrect_tagged_template_call\",\r\n      \"It looks like you tried to call `sql` as a function. Make sure to use it as a tagged template.\\n\tExample: sql`SELECT * FROM users`, not sql('SELECT * FROM users')\"\r\n    );\r\n  }\r\n  let result = (_a = strings[0]) != null ? _a : \"\";\r\n  for (let i = 1; i < strings.length; i++) {\r\n    result += `$${i}${(_b = strings[i]) != null ? _b : \"\"}`;\r\n  }\r\n  return [result, values];\r\n}\r\nfunction isTemplateStringsArray(strings) {\r\n  return Array.isArray(strings) && \"raw\" in strings && Array.isArray(strings.raw);\r\n}\r\n\r\n// src/create-client.ts\r\n\r\nvar VercelClient = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Client {\r\n  /**\r\n   * A template literal tag providing safe, easy to use SQL parameterization.\r\n   * Parameters are substituted using the underlying Postgres database, and so must follow\r\n   * the rules of Postgres parameterization.\r\n   * @example\r\n   * ```ts\r\n   * const pool = createClient();\r\n   * const userId = 123;\r\n   * await client.connect();\r\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\r\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\r\n   * await client.end();\r\n   * ```\r\n   * @returns A promise that resolves to the query result.\r\n   */\r\n  async sql(strings, ...values) {\r\n    const [query, params] = sqlTemplate(strings, ...values);\r\n    return this.query(query, params);\r\n  }\r\n};\r\nfunction createClient(config) {\r\n  var _a;\r\n  const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"direct\");\r\n  if (!connectionString)\r\n    throw new VercelPostgresError(\r\n      \"missing_connection_string\",\r\n      \"You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.\"\r\n    );\r\n  if (!isLocalhostConnectionString(connectionString) && !isDirectConnectionString(connectionString))\r\n    throw new VercelPostgresError(\r\n      \"invalid_connection_string\",\r\n      \"This connection string is meant to be used with a pooled connection. Try `createPool()` instead.\"\r\n    );\r\n  return new VercelClient({\r\n    ...config,\r\n    connectionString\r\n  });\r\n}\r\n\r\n// src/create-pool.ts\r\nvar VercelPool = class extends _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.Pool {\r\n  constructor(config) {\r\n    var _a;\r\n    super(config);\r\n    this.Client = VercelClient;\r\n    this.connectionString = (_a = config.connectionString) != null ? _a : \"\";\r\n  }\r\n  /**\r\n   * A template literal tag providing safe, easy to use SQL parameterization.\r\n   * Parameters are substituted using the underlying Postgres database, and so must follow\r\n   * the rules of Postgres parameterization.\r\n   * @example\r\n   * ```ts\r\n   * const pool = createPool();\r\n   * const userId = 123;\r\n   * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;\r\n   * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);\r\n   * ```\r\n   * @returns A promise that resolves to the query result.\r\n   */\r\n  async sql(strings, ...values) {\r\n    const [query, params] = sqlTemplate(strings, ...values);\r\n    const sql2 = (0,_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_0__.neon)(this.connectionString, {\r\n      fullResults: true\r\n    });\r\n    return sql2(query, params);\r\n  }\r\n  connect(callback) {\r\n    return super.connect(\r\n      callback\r\n    );\r\n  }\r\n};\r\nfunction createPool(config) {\r\n  var _a;\r\n  const connectionString = (_a = config == null ? void 0 : config.connectionString) != null ? _a : postgresConnectionString(\"pool\");\r\n  if (!connectionString)\r\n    throw new VercelPostgresError(\r\n      \"missing_connection_string\",\r\n      \"You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.\"\r\n    );\r\n  if (!isLocalhostConnectionString(connectionString) && !isPooledConnectionString(connectionString))\r\n    throw new VercelPostgresError(\r\n      \"invalid_connection_string\",\r\n      \"This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.\"\r\n    );\r\n  let maxUses = config == null ? void 0 : config.maxUses;\r\n  let max = config == null ? void 0 : config.max;\r\n  if (typeof EdgeRuntime !== \"undefined\") {\r\n    if (maxUses && maxUses !== 1) {\r\n      console.warn(\r\n        \"@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse.\"\r\n      );\r\n    }\r\n    if (max && max !== 1e4) {\r\n      console.warn(\r\n        \"@vercel/postgres: Overriding `max` to 10,000 because the EdgeRuntime does not support client reuse.\"\r\n      );\r\n    }\r\n    maxUses = 1;\r\n    max = 1e4;\r\n  }\r\n  const pool2 = new VercelPool({\r\n    ...config,\r\n    connectionString,\r\n    maxUses,\r\n    max\r\n  });\r\n  return pool2;\r\n}\r\n\r\n// src/index.ts\r\n\r\nvar pool;\r\nvar sql = new Proxy(\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function -- [@vercel/style-guide@5 migration]\r\n  () => {\r\n  },\r\n  {\r\n    get(_, prop) {\r\n      if (!pool) {\r\n        pool = createPool();\r\n      }\r\n      const val = Reflect.get(pool, prop);\r\n      if (typeof val === \"function\") {\r\n        return val.bind(pool);\r\n      }\r\n      return val;\r\n    },\r\n    apply(_, __, argumentsList) {\r\n      if (!pool) {\r\n        pool = createPool();\r\n      }\r\n      return pool.sql(...argumentsList);\r\n    }\r\n  }\r\n);\r\nvar db = sql;\r\n\r\n\r\n//# sourceMappingURL=chunk-WDBQYBZQ.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/index-node.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/index-node.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelClient: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelClient),\n/* harmony export */   VercelPool: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.VercelPool),\n/* harmony export */   createClient: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.createClient),\n/* harmony export */   createPool: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.createPool),\n/* harmony export */   db: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.db),\n/* harmony export */   postgresConnectionString: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.postgresConnectionString),\n/* harmony export */   sql: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.sql),\n/* harmony export */   types: () => (/* reexport safe */ _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__.types)\n/* harmony export */ });\n/* harmony import */ var _chunk_WDBQYBZQ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-WDBQYBZQ.js */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/chunk-WDBQYBZQ.js\");\n/* harmony import */ var _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @neondatabase/serverless */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@neondatabase/serverless/index.mjs\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/wrapper.mjs\");\n\r\n\r\n// src/index-node.ts\r\n\r\n\r\nif (_neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig) {\r\n  _neondatabase_serverless__WEBPACK_IMPORTED_MODULE_1__.neonConfig.webSocketConstructor = ws__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\r\n}\r\n\r\n//# sourceMappingURL=index-node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvQHZlcmNlbC9wb3N0Z3Jlcy9kaXN0L2luZGV4LW5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFTNkI7QUFDN0I7QUFDQTtBQUNzRDtBQUNsQztBQUNwQixJQUFJLGdFQUFVO0FBQ2QsRUFBRSxnRUFBVSx3QkFBd0IsMENBQUU7QUFDdEM7QUFVRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL0B2ZXJjZWwvcG9zdGdyZXMvZGlzdC9pbmRleC1ub2RlLmpzPzBjMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBWZXJjZWxDbGllbnQsXHJcbiAgVmVyY2VsUG9vbCxcclxuICBjcmVhdGVDbGllbnQsXHJcbiAgY3JlYXRlUG9vbCxcclxuICBkYixcclxuICBwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmcsXHJcbiAgc3FsLFxyXG4gIHR5cGVzXHJcbn0gZnJvbSBcIi4vY2h1bmstV0RCUVlCWlEuanNcIjtcclxuXHJcbi8vIHNyYy9pbmRleC1ub2RlLnRzXHJcbmltcG9ydCB7IG5lb25Db25maWcgfSBmcm9tIFwiQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzXCI7XHJcbmltcG9ydCB3cyBmcm9tIFwid3NcIjtcclxuaWYgKG5lb25Db25maWcpIHtcclxuICBuZW9uQ29uZmlnLndlYlNvY2tldENvbnN0cnVjdG9yID0gd3M7XHJcbn1cclxuZXhwb3J0IHtcclxuICBWZXJjZWxDbGllbnQsXHJcbiAgVmVyY2VsUG9vbCxcclxuICBjcmVhdGVDbGllbnQsXHJcbiAgY3JlYXRlUG9vbCxcclxuICBkYixcclxuICBwb3N0Z3Jlc0Nvbm5lY3Rpb25TdHJpbmcsXHJcbiAgc3FsLFxyXG4gIHR5cGVzXHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LW5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/@vercel/postgres/dist/index-node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/wrapper.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/wrapper.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Receiver: () => (/* reexport default export from named module */ _lib_receiver_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   Sender: () => (/* reexport default export from named module */ _lib_sender_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   WebSocket: () => (/* reexport default export from named module */ _lib_websocket_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   WebSocketServer: () => (/* reexport default export from named module */ _lib_websocket_server_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   createWebSocketStream: () => (/* reexport default export from named module */ _lib_stream_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/stream.js */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/stream.js\");\n/* harmony import */ var _lib_receiver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/receiver.js */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/receiver.js\");\n/* harmony import */ var _lib_sender_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/sender.js */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/sender.js\");\n/* harmony import */ var _lib_websocket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/websocket.js */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket.js\");\n/* harmony import */ var _lib_websocket_server_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/websocket-server.js */ \"(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/lib/websocket-server.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_websocket_js__WEBPACK_IMPORTED_MODULE_3__);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHZlcmNlbCtwb3N0Z3Jlc0AwLjguMC9ub2RlX21vZHVsZXMvd3Mvd3JhcHBlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDWDtBQUNKO0FBQ007QUFDYTtBQUN4RDtBQUMrRTtBQUMvRSxpRUFBZSw4Q0FBUyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B2ZXJjZWwrcG9zdGdyZXNAMC44LjAvbm9kZV9tb2R1bGVzL3dzL3dyYXBwZXIubWpzPzE4MGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVdlYlNvY2tldFN0cmVhbSBmcm9tICcuL2xpYi9zdHJlYW0uanMnO1xyXG5pbXBvcnQgUmVjZWl2ZXIgZnJvbSAnLi9saWIvcmVjZWl2ZXIuanMnO1xyXG5pbXBvcnQgU2VuZGVyIGZyb20gJy4vbGliL3NlbmRlci5qcyc7XHJcbmltcG9ydCBXZWJTb2NrZXQgZnJvbSAnLi9saWIvd2Vic29ja2V0LmpzJztcclxuaW1wb3J0IFdlYlNvY2tldFNlcnZlciBmcm9tICcuL2xpYi93ZWJzb2NrZXQtc2VydmVyLmpzJztcclxuXHJcbmV4cG9ydCB7IGNyZWF0ZVdlYlNvY2tldFN0cmVhbSwgUmVjZWl2ZXIsIFNlbmRlciwgV2ViU29ja2V0LCBXZWJTb2NrZXRTZXJ2ZXIgfTtcclxuZXhwb3J0IGRlZmF1bHQgV2ViU29ja2V0O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@vercel+postgres@0.8.0/node_modules/ws/wrapper.mjs\n");

/***/ })

};
;